//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;

/* Package-scope variables */
var iLen;

(function () {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/datatables/lib/jquery.dataTables.js                                                                      //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * @summary     DataTables                                                                                           // 2
 * @description Paginate, search and sort HTML tables                                                                // 3
 * @version     1.9.4                                                                                                // 4
 * @file        jquery.dataTables.js                                                                                 // 5
 * @author      Allan Jardine (www.sprymedia.co.uk)                                                                  // 6
 * @contact     www.sprymedia.co.uk/contact                                                                          // 7
 *                                                                                                                   // 8
 * @copyright Copyright 2008-2012 Allan Jardine, all rights reserved.                                                // 9
 *                                                                                                                   // 10
 * This source file is free software, under either the GPL v2 license or a                                           // 11
 * BSD style license, available at:                                                                                  // 12
 *   http://datatables.net/license_gpl2                                                                              // 13
 *   http://datatables.net/license_bsd                                                                               // 14
 *                                                                                                                   // 15
 * This source file is distributed in the hope that it will be useful, but                                           // 16
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY                                        // 17
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.                                           // 18
 *                                                                                                                   // 19
 * For details please refer to: http://www.datatables.net                                                            // 20
 */                                                                                                                  // 21
                                                                                                                     // 22
/*jslint evil: true, undef: true, browser: true */                                                                   // 23
/*globals $, jQuery,define,_fnExternApiFunc,_fnInitialise,_fnInitComplete,_fnLanguageCompat,_fnAddColumn,_fnColumnOptions,_fnAddData,_fnCreateTr,_fnGatherData,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnServerParams,_fnAddOptionsHtml,_fnFeatureHtmlTable,_fnScrollDraw,_fnAdjustColumnSizing,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnBuildSearchArray,_fnBuildSearchRow,_fnFilterCreateSearch,_fnDataToSearch,_fnSort,_fnSortAttachListener,_fnSortingClasses,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnFeatureHtmlLength,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnNodeToDataIndex,_fnVisbleColumns,_fnCalculateEnd,_fnConvertToWidth,_fnCalculateColumnWidths,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnDetectType,_fnSettingsFromNode,_fnGetDataMaster,_fnGetTrNodes,_fnGetTdNodes,_fnEscapeRegex,_fnDeleteIndex,_fnReOrderIndex,_fnColumnOrdering,_fnLog,_fnClearTable,_fnSaveState,_fnLoadState,_fnCreateCookie,_fnReadCookie,_fnDetectHeader,_fnGetUniqueThs,_fnScrollBarWidth,_fnApplyToChildren,_fnMap,_fnGetRowData,_fnGetCellData,_fnSetCellData,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnApplyColumnDefs,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnJsonString,_fnRender,_fnNodeToColumnIndex,_fnInfoMacros,_fnBrowserDetect,_fnGetColumns*/
                                                                                                                     // 25
(/** @lends <global> */function( window, document, undefined ) {                                                     // 26
                                                                                                                     // 27
(function( factory ) {                                                                                               // 28
	"use strict";                                                                                                       // 29
                                                                                                                     // 30
	// Define as an AMD module if possible                                                                              // 31
	if ( typeof define === 'function' && define.amd )                                                                   // 32
	{                                                                                                                   // 33
		define( ['jquery'], factory );                                                                                     // 34
	}                                                                                                                   // 35
	/* Define using browser globals otherwise                                                                           // 36
	 * Prevent multiple instantiations if the script is loaded twice                                                    // 37
	 */                                                                                                                 // 38
	else if ( jQuery && !jQuery.fn.dataTable )                                                                          // 39
	{                                                                                                                   // 40
		factory( jQuery );                                                                                                 // 41
	}                                                                                                                   // 42
}                                                                                                                    // 43
(/** @lends <global> */function( $ ) {                                                                               // 44
	"use strict";                                                                                                       // 45
	/**                                                                                                                 // 46
	 * DataTables is a plug-in for the jQuery Javascript library. It is a                                               // 47
	 * highly flexible tool, based upon the foundations of progressive                                                  // 48
	 * enhancement, which will add advanced interaction controls to any                                                 // 49
	 * HTML table. For a full list of features please refer to                                                          // 50
	 * <a href="http://datatables.net">DataTables.net</a>.                                                              // 51
	 *                                                                                                                  // 52
	 * Note that the <i>DataTable</i> object is not a global variable but is                                            // 53
	 * aliased to <i>jQuery.fn.DataTable</i> and <i>jQuery.fn.dataTable</i> through which                               // 54
	 * it may be  accessed.                                                                                             // 55
	 *                                                                                                                  // 56
	 *  @class                                                                                                          // 57
	 *  @param {object} [oInit={}] Configuration object for DataTables. Options                                         // 58
	 *    are defined by {@link DataTable.defaults}                                                                     // 59
	 *  @requires jQuery 1.3+                                                                                           // 60
	 *                                                                                                                  // 61
	 *  @example                                                                                                        // 62
	 *    // Basic initialisation                                                                                       // 63
	 *    $(document).ready( function {                                                                                 // 64
	 *      $('#example').dataTable();                                                                                  // 65
	 *    } );                                                                                                          // 66
	 *                                                                                                                  // 67
	 *  @example                                                                                                        // 68
	 *    // Initialisation with configuration options - in this case, disable                                          // 69
	 *    // pagination and sorting.                                                                                    // 70
	 *    $(document).ready( function {                                                                                 // 71
	 *      $('#example').dataTable( {                                                                                  // 72
	 *        "bPaginate": false,                                                                                       // 73
	 *        "bSort": false                                                                                            // 74
	 *      } );                                                                                                        // 75
	 *    } );                                                                                                          // 76
	 */                                                                                                                 // 77
	var DataTable = function( oInit )                                                                                   // 78
	{                                                                                                                   // 79
		                                                                                                                   // 80
		                                                                                                                   // 81
		/**                                                                                                                // 82
		 * Add a column to the list used for the table with default values                                                 // 83
		 *  @param {object} oSettings dataTables settings object                                                           // 84
		 *  @param {node} nTh The th element for this column                                                               // 85
		 *  @memberof DataTable#oApi                                                                                       // 86
		 */                                                                                                                // 87
		function _fnAddColumn( oSettings, nTh )                                                                            // 88
		{                                                                                                                  // 89
			var oDefaults = DataTable.defaults.columns;                                                                       // 90
			var iCol = oSettings.aoColumns.length;                                                                            // 91
			var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {                                                   // 92
				"sSortingClass": oSettings.oClasses.sSortable,                                                                   // 93
				"sSortingClassJUI": oSettings.oClasses.sSortJUI,                                                                 // 94
				"nTh": nTh ? nTh : document.createElement('th'),                                                                 // 95
				"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',                               // 96
				"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],                                                 // 97
				"mData": oDefaults.mData ? oDefaults.oDefaults : iCol                                                            // 98
			} );                                                                                                              // 99
			oSettings.aoColumns.push( oCol );                                                                                 // 100
			                                                                                                                  // 101
			/* Add a column specific filter */                                                                                // 102
			if ( oSettings.aoPreSearchCols[ iCol ] === undefined || oSettings.aoPreSearchCols[ iCol ] === null )              // 103
			{                                                                                                                 // 104
				oSettings.aoPreSearchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch );                                    // 105
			}                                                                                                                 // 106
			else                                                                                                              // 107
			{                                                                                                                 // 108
				var oPre = oSettings.aoPreSearchCols[ iCol ];                                                                    // 109
				                                                                                                                 // 110
				/* Don't require that the user must specify bRegex, bSmart or bCaseInsensitive */                                // 111
				if ( oPre.bRegex === undefined )                                                                                 // 112
				{                                                                                                                // 113
					oPre.bRegex = true;                                                                                             // 114
				}                                                                                                                // 115
				                                                                                                                 // 116
				if ( oPre.bSmart === undefined )                                                                                 // 117
				{                                                                                                                // 118
					oPre.bSmart = true;                                                                                             // 119
				}                                                                                                                // 120
				                                                                                                                 // 121
				if ( oPre.bCaseInsensitive === undefined )                                                                       // 122
				{                                                                                                                // 123
					oPre.bCaseInsensitive = true;                                                                                   // 124
				}                                                                                                                // 125
			}                                                                                                                 // 126
			                                                                                                                  // 127
			/* Use the column options function to initialise classes etc */                                                   // 128
			_fnColumnOptions( oSettings, iCol, null );                                                                        // 129
		}                                                                                                                  // 130
		                                                                                                                   // 131
		                                                                                                                   // 132
		/**                                                                                                                // 133
		 * Apply options for a column                                                                                      // 134
		 *  @param {object} oSettings dataTables settings object                                                           // 135
		 *  @param {int} iCol column index to consider                                                                     // 136
		 *  @param {object} oOptions object with sType, bVisible and bSearchable etc                                       // 137
		 *  @memberof DataTable#oApi                                                                                       // 138
		 */                                                                                                                // 139
		function _fnColumnOptions( oSettings, iCol, oOptions )                                                             // 140
		{                                                                                                                  // 141
			var oCol = oSettings.aoColumns[ iCol ];                                                                           // 142
			                                                                                                                  // 143
			/* User specified column options */                                                                               // 144
			if ( oOptions !== undefined && oOptions !== null )                                                                // 145
			{                                                                                                                 // 146
				/* Backwards compatibility for mDataProp */                                                                      // 147
				if ( oOptions.mDataProp && !oOptions.mData )                                                                     // 148
				{                                                                                                                // 149
					oOptions.mData = oOptions.mDataProp;                                                                            // 150
				}                                                                                                                // 151
		                                                                                                                   // 152
				if ( oOptions.sType !== undefined )                                                                              // 153
				{                                                                                                                // 154
					oCol.sType = oOptions.sType;                                                                                    // 155
					oCol._bAutoType = false;                                                                                        // 156
				}                                                                                                                // 157
				                                                                                                                 // 158
				$.extend( oCol, oOptions );                                                                                      // 159
				_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );                                                                // 160
		                                                                                                                   // 161
				/* iDataSort to be applied (backwards compatibility), but aDataSort will take                                    // 162
				 * priority if defined                                                                                           // 163
				 */                                                                                                              // 164
				if ( oOptions.iDataSort !== undefined )                                                                          // 165
				{                                                                                                                // 166
					oCol.aDataSort = [ oOptions.iDataSort ];                                                                        // 167
				}                                                                                                                // 168
				_fnMap( oCol, oOptions, "aDataSort" );                                                                           // 169
			}                                                                                                                 // 170
		                                                                                                                   // 171
			/* Cache the data get and set functions for speed */                                                              // 172
			var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;                                           // 173
			var mData = _fnGetObjectDataFn( oCol.mData );                                                                     // 174
		                                                                                                                   // 175
			oCol.fnGetData = function (oData, sSpecific) {                                                                    // 176
				var innerData = mData( oData, sSpecific );                                                                       // 177
		                                                                                                                   // 178
				if ( oCol.mRender && (sSpecific && sSpecific !== '') )                                                           // 179
				{                                                                                                                // 180
					return mRender( innerData, sSpecific, oData );                                                                  // 181
				}                                                                                                                // 182
				return innerData;                                                                                                // 183
			};                                                                                                                // 184
			oCol.fnSetData = _fnSetObjectDataFn( oCol.mData );                                                                // 185
			                                                                                                                  // 186
			/* Feature sorting overrides column specific when off */                                                          // 187
			if ( !oSettings.oFeatures.bSort )                                                                                 // 188
			{                                                                                                                 // 189
				oCol.bSortable = false;                                                                                          // 190
			}                                                                                                                 // 191
			                                                                                                                  // 192
			/* Check that the class assignment is correct for sorting */                                                      // 193
			if ( !oCol.bSortable ||                                                                                           // 194
				 ($.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) == -1) )                           // 195
			{                                                                                                                 // 196
				oCol.sSortingClass = oSettings.oClasses.sSortableNone;                                                           // 197
				oCol.sSortingClassJUI = "";                                                                                      // 198
			}                                                                                                                 // 199
			else if ( $.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) == -1 )                     // 200
			{                                                                                                                 // 201
				oCol.sSortingClass = oSettings.oClasses.sSortable;                                                               // 202
				oCol.sSortingClassJUI = oSettings.oClasses.sSortJUI;                                                             // 203
			}                                                                                                                 // 204
			else if ( $.inArray('asc', oCol.asSorting) != -1 && $.inArray('desc', oCol.asSorting) == -1 )                     // 205
			{                                                                                                                 // 206
				oCol.sSortingClass = oSettings.oClasses.sSortableAsc;                                                            // 207
				oCol.sSortingClassJUI = oSettings.oClasses.sSortJUIAscAllowed;                                                   // 208
			}                                                                                                                 // 209
			else if ( $.inArray('asc', oCol.asSorting) == -1 && $.inArray('desc', oCol.asSorting) != -1 )                     // 210
			{                                                                                                                 // 211
				oCol.sSortingClass = oSettings.oClasses.sSortableDesc;                                                           // 212
				oCol.sSortingClassJUI = oSettings.oClasses.sSortJUIDescAllowed;                                                  // 213
			}                                                                                                                 // 214
		}                                                                                                                  // 215
		                                                                                                                   // 216
		                                                                                                                   // 217
		/**                                                                                                                // 218
		 * Adjust the table column widths for new data. Note: you would probably want to                                   // 219
		 * do a redraw after calling this function!                                                                        // 220
		 *  @param {object} oSettings dataTables settings object                                                           // 221
		 *  @memberof DataTable#oApi                                                                                       // 222
		 */                                                                                                                // 223
		function _fnAdjustColumnSizing ( oSettings )                                                                       // 224
		{                                                                                                                  // 225
			/* Not interested in doing column width calculation if auto-width is disabled */                                  // 226
			if ( oSettings.oFeatures.bAutoWidth === false )                                                                   // 227
			{                                                                                                                 // 228
				return false;                                                                                                    // 229
			}                                                                                                                 // 230
			                                                                                                                  // 231
			_fnCalculateColumnWidths( oSettings );                                                                            // 232
			for ( var i=0 , iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                  // 233
			{                                                                                                                 // 234
				oSettings.aoColumns[i].nTh.style.width = oSettings.aoColumns[i].sWidth;                                          // 235
			}                                                                                                                 // 236
		}                                                                                                                  // 237
		                                                                                                                   // 238
		                                                                                                                   // 239
		/**                                                                                                                // 240
		 * Covert the index of a visible column to the index in the data array (take account                               // 241
		 * of hidden columns)                                                                                              // 242
		 *  @param {object} oSettings dataTables settings object                                                           // 243
		 *  @param {int} iMatch Visible column index to lookup                                                             // 244
		 *  @returns {int} i the data index                                                                                // 245
		 *  @memberof DataTable#oApi                                                                                       // 246
		 */                                                                                                                // 247
		function _fnVisibleToColumnIndex( oSettings, iMatch )                                                              // 248
		{                                                                                                                  // 249
			var aiVis = _fnGetColumns( oSettings, 'bVisible' );                                                               // 250
		                                                                                                                   // 251
			return typeof aiVis[iMatch] === 'number' ?                                                                        // 252
				aiVis[iMatch] :                                                                                                  // 253
				null;                                                                                                            // 254
		}                                                                                                                  // 255
		                                                                                                                   // 256
		                                                                                                                   // 257
		/**                                                                                                                // 258
		 * Covert the index of an index in the data array and convert it to the visible                                    // 259
		 *   column index (take account of hidden columns)                                                                 // 260
		 *  @param {int} iMatch Column index to lookup                                                                     // 261
		 *  @param {object} oSettings dataTables settings object                                                           // 262
		 *  @returns {int} i the data index                                                                                // 263
		 *  @memberof DataTable#oApi                                                                                       // 264
		 */                                                                                                                // 265
		function _fnColumnIndexToVisible( oSettings, iMatch )                                                              // 266
		{                                                                                                                  // 267
			var aiVis = _fnGetColumns( oSettings, 'bVisible' );                                                               // 268
			var iPos = $.inArray( iMatch, aiVis );                                                                            // 269
		                                                                                                                   // 270
			return iPos !== -1 ? iPos : null;                                                                                 // 271
		}                                                                                                                  // 272
		                                                                                                                   // 273
		                                                                                                                   // 274
		/**                                                                                                                // 275
		 * Get the number of visible columns                                                                               // 276
		 *  @param {object} oSettings dataTables settings object                                                           // 277
		 *  @returns {int} i the number of visible columns                                                                 // 278
		 *  @memberof DataTable#oApi                                                                                       // 279
		 */                                                                                                                // 280
		function _fnVisbleColumns( oSettings )                                                                             // 281
		{                                                                                                                  // 282
			return _fnGetColumns( oSettings, 'bVisible' ).length;                                                             // 283
		}                                                                                                                  // 284
		                                                                                                                   // 285
		                                                                                                                   // 286
		/**                                                                                                                // 287
		 * Get an array of column indexes that match a given property                                                      // 288
		 *  @param {object} oSettings dataTables settings object                                                           // 289
		 *  @param {string} sParam Parameter in aoColumns to look for - typically                                          // 290
		 *    bVisible or bSearchable                                                                                      // 291
		 *  @returns {array} Array of indexes with matched properties                                                      // 292
		 *  @memberof DataTable#oApi                                                                                       // 293
		 */                                                                                                                // 294
		function _fnGetColumns( oSettings, sParam )                                                                        // 295
		{                                                                                                                  // 296
			var a = [];                                                                                                       // 297
		                                                                                                                   // 298
			$.map( oSettings.aoColumns, function(val, i) {                                                                    // 299
				if ( val[sParam] ) {                                                                                             // 300
					a.push( i );                                                                                                    // 301
				}                                                                                                                // 302
			} );                                                                                                              // 303
		                                                                                                                   // 304
			return a;                                                                                                         // 305
		}                                                                                                                  // 306
		                                                                                                                   // 307
		                                                                                                                   // 308
		/**                                                                                                                // 309
		 * Get the sort type based on an input string                                                                      // 310
		 *  @param {string} sData data we wish to know the type of                                                         // 311
		 *  @returns {string} type (defaults to 'string' if no type can be detected)                                       // 312
		 *  @memberof DataTable#oApi                                                                                       // 313
		 */                                                                                                                // 314
		function _fnDetectType( sData )                                                                                    // 315
		{                                                                                                                  // 316
			var aTypes = DataTable.ext.aTypes;                                                                                // 317
			var iLen = aTypes.length;                                                                                         // 318
			                                                                                                                  // 319
			for ( var i=0 ; i<iLen ; i++ )                                                                                    // 320
			{                                                                                                                 // 321
				var sType = aTypes[i]( sData );                                                                                  // 322
				if ( sType !== null )                                                                                            // 323
				{                                                                                                                // 324
					return sType;                                                                                                   // 325
				}                                                                                                                // 326
			}                                                                                                                 // 327
			                                                                                                                  // 328
			return 'string';                                                                                                  // 329
		}                                                                                                                  // 330
		                                                                                                                   // 331
		                                                                                                                   // 332
		/**                                                                                                                // 333
		 * Figure out how to reorder a display list                                                                        // 334
		 *  @param {object} oSettings dataTables settings object                                                           // 335
		 *  @returns array {int} aiReturn index list for reordering                                                        // 336
		 *  @memberof DataTable#oApi                                                                                       // 337
		 */                                                                                                                // 338
		function _fnReOrderIndex ( oSettings, sColumns )                                                                   // 339
		{                                                                                                                  // 340
			var aColumns = sColumns.split(',');                                                                               // 341
			var aiReturn = [];                                                                                                // 342
			                                                                                                                  // 343
			for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                   // 344
			{                                                                                                                 // 345
				for ( var j=0 ; j<iLen ; j++ )                                                                                   // 346
				{                                                                                                                // 347
					if ( oSettings.aoColumns[i].sName == aColumns[j] )                                                              // 348
					{                                                                                                               // 349
						aiReturn.push( j );                                                                                            // 350
						break;                                                                                                         // 351
					}                                                                                                               // 352
				}                                                                                                                // 353
			}                                                                                                                 // 354
			                                                                                                                  // 355
			return aiReturn;                                                                                                  // 356
		}                                                                                                                  // 357
		                                                                                                                   // 358
		                                                                                                                   // 359
		/**                                                                                                                // 360
		 * Get the column ordering that DataTables expects                                                                 // 361
		 *  @param {object} oSettings dataTables settings object                                                           // 362
		 *  @returns {string} comma separated list of names                                                                // 363
		 *  @memberof DataTable#oApi                                                                                       // 364
		 */                                                                                                                // 365
		function _fnColumnOrdering ( oSettings )                                                                           // 366
		{                                                                                                                  // 367
			var sNames = '';                                                                                                  // 368
			for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                   // 369
			{                                                                                                                 // 370
				sNames += oSettings.aoColumns[i].sName+',';                                                                      // 371
			}                                                                                                                 // 372
			if ( sNames.length == iLen )                                                                                      // 373
			{                                                                                                                 // 374
				return "";                                                                                                       // 375
			}                                                                                                                 // 376
			return sNames.slice(0, -1);                                                                                       // 377
		}                                                                                                                  // 378
		                                                                                                                   // 379
		                                                                                                                   // 380
		/**                                                                                                                // 381
		 * Take the column definitions and static columns arrays and calculate how                                         // 382
		 * they relate to column indexes. The callback function will then apply the                                        // 383
		 * definition found for a column to a suitable configuration object.                                               // 384
		 *  @param {object} oSettings dataTables settings object                                                           // 385
		 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied                                          // 386
		 *  @param {array} aoCols The aoColumns array that defines columns individually                                    // 387
		 *  @param {function} fn Callback function - takes two parameters, the calculated                                  // 388
		 *    column index and the definition for that column.                                                             // 389
		 *  @memberof DataTable#oApi                                                                                       // 390
		 */                                                                                                                // 391
		function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )                                                    // 392
		{                                                                                                                  // 393
			var i, iLen, j, jLen, k, kLen;                                                                                    // 394
		                                                                                                                   // 395
			// Column definitions with aTargets                                                                               // 396
			if ( aoColDefs )                                                                                                  // 397
			{                                                                                                                 // 398
				/* Loop over the definitions array - loop in reverse so first instance has priority */                           // 399
				for ( i=aoColDefs.length-1 ; i>=0 ; i-- )                                                                        // 400
				{                                                                                                                // 401
					/* Each definition can target multiple columns, as it is an array */                                            // 402
					var aTargets = aoColDefs[i].aTargets;                                                                           // 403
					if ( !$.isArray( aTargets ) )                                                                                   // 404
					{                                                                                                               // 405
						_fnLog( oSettings, 1, 'aTargets must be an array of targets, not a '+(typeof aTargets) );                      // 406
					}                                                                                                               // 407
		                                                                                                                   // 408
					for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )                                                                // 409
					{                                                                                                               // 410
						if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )                                                     // 411
						{                                                                                                              // 412
							/* Add columns that we don't yet know about */                                                                // 413
							while( oSettings.aoColumns.length <= aTargets[j] )                                                            // 414
							{                                                                                                             // 415
								_fnAddColumn( oSettings );                                                                                   // 416
							}                                                                                                             // 417
		                                                                                                                   // 418
							/* Integer, basic index */                                                                                    // 419
							fn( aTargets[j], aoColDefs[i] );                                                                              // 420
						}                                                                                                              // 421
						else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )                                                 // 422
						{                                                                                                              // 423
							/* Negative integer, right to left column counting */                                                         // 424
							fn( oSettings.aoColumns.length+aTargets[j], aoColDefs[i] );                                                   // 425
						}                                                                                                              // 426
						else if ( typeof aTargets[j] === 'string' )                                                                    // 427
						{                                                                                                              // 428
							/* Class name matching on TH element */                                                                       // 429
							for ( k=0, kLen=oSettings.aoColumns.length ; k<kLen ; k++ )                                                   // 430
							{                                                                                                             // 431
								if ( aTargets[j] == "_all" ||                                                                                // 432
								     $(oSettings.aoColumns[k].nTh).hasClass( aTargets[j] ) )                                                 // 433
								{                                                                                                            // 434
									fn( k, aoColDefs[i] );                                                                                      // 435
								}                                                                                                            // 436
							}                                                                                                             // 437
						}                                                                                                              // 438
					}                                                                                                               // 439
				}                                                                                                                // 440
			}                                                                                                                 // 441
		                                                                                                                   // 442
			// Statically defined columns array                                                                               // 443
			if ( aoCols )                                                                                                     // 444
			{                                                                                                                 // 445
				for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )                                                                   // 446
				{                                                                                                                // 447
					fn( i, aoCols[i] );                                                                                             // 448
				}                                                                                                                // 449
			}                                                                                                                 // 450
		}                                                                                                                  // 451
		                                                                                                                   // 452
		/**                                                                                                                // 453
		 * Add a data array to the table, creating DOM node etc. This is the parallel to                                   // 454
		 * _fnGatherData, but for adding rows from a Javascript source, rather than a                                      // 455
		 * DOM source.                                                                                                     // 456
		 *  @param {object} oSettings dataTables settings object                                                           // 457
		 *  @param {array} aData data array to be added                                                                    // 458
		 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed                                     // 459
		 *  @memberof DataTable#oApi                                                                                       // 460
		 */                                                                                                                // 461
		function _fnAddData ( oSettings, aDataSupplied )                                                                   // 462
		{                                                                                                                  // 463
			var oCol;                                                                                                         // 464
			                                                                                                                  // 465
			/* Take an independent copy of the data source so we can bash it about as we wish */                              // 466
			var aDataIn = ($.isArray(aDataSupplied)) ?                                                                        // 467
				aDataSupplied.slice() :                                                                                          // 468
				$.extend( true, {}, aDataSupplied );                                                                             // 469
			                                                                                                                  // 470
			/* Create the object for storing information about this new row */                                                // 471
			var iRow = oSettings.aoData.length;                                                                               // 472
			var oData = $.extend( true, {}, DataTable.models.oRow );                                                          // 473
			oData._aData = aDataIn;                                                                                           // 474
			oSettings.aoData.push( oData );                                                                                   // 475
		                                                                                                                   // 476
			/* Create the cells */                                                                                            // 477
			var nTd, sThisType;                                                                                               // 478
			for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                   // 479
			{                                                                                                                 // 480
				oCol = oSettings.aoColumns[i];                                                                                   // 481
		                                                                                                                   // 482
				/* Use rendered data for filtering / sorting */                                                                  // 483
				if ( typeof oCol.fnRender === 'function' && oCol.bUseRendered && oCol.mData !== null )                           // 484
				{                                                                                                                // 485
					_fnSetCellData( oSettings, iRow, i, _fnRender(oSettings, iRow, i) );                                            // 486
				}                                                                                                                // 487
				else                                                                                                             // 488
				{                                                                                                                // 489
					_fnSetCellData( oSettings, iRow, i, _fnGetCellData( oSettings, iRow, i ) );                                     // 490
				}                                                                                                                // 491
				                                                                                                                 // 492
				/* See if we should auto-detect the column type */                                                               // 493
				if ( oCol._bAutoType && oCol.sType != 'string' )                                                                 // 494
				{                                                                                                                // 495
					/* Attempt to auto detect the type - same as _fnGatherData() */                                                 // 496
					var sVarType = _fnGetCellData( oSettings, iRow, i, 'type' );                                                    // 497
					if ( sVarType !== null && sVarType !== '' )                                                                     // 498
					{                                                                                                               // 499
						sThisType = _fnDetectType( sVarType );                                                                         // 500
						if ( oCol.sType === null )                                                                                     // 501
						{                                                                                                              // 502
							oCol.sType = sThisType;                                                                                       // 503
						}                                                                                                              // 504
						else if ( oCol.sType != sThisType && oCol.sType != "html" )                                                    // 505
						{                                                                                                              // 506
							/* String is always the 'fallback' option */                                                                  // 507
							oCol.sType = 'string';                                                                                        // 508
						}                                                                                                              // 509
					}                                                                                                               // 510
				}                                                                                                                // 511
			}                                                                                                                 // 512
			                                                                                                                  // 513
			/* Add to the display array */                                                                                    // 514
			oSettings.aiDisplayMaster.push( iRow );                                                                           // 515
		                                                                                                                   // 516
			/* Create the DOM information */                                                                                  // 517
			if ( !oSettings.oFeatures.bDeferRender )                                                                          // 518
			{                                                                                                                 // 519
				_fnCreateTr( oSettings, iRow );                                                                                  // 520
			}                                                                                                                 // 521
		                                                                                                                   // 522
			return iRow;                                                                                                      // 523
		}                                                                                                                  // 524
		                                                                                                                   // 525
		                                                                                                                   // 526
		/**                                                                                                                // 527
		 * Read in the data from the target table from the DOM                                                             // 528
		 *  @param {object} oSettings dataTables settings object                                                           // 529
		 *  @memberof DataTable#oApi                                                                                       // 530
		 */                                                                                                                // 531
		function _fnGatherData( oSettings )                                                                                // 532
		{                                                                                                                  // 533
			var iLoop, i, iLen, j, jLen, jInner,                                                                              // 534
			 	nTds, nTrs, nTd, nTr, aLocalData, iThisIndex,                                                                   // 535
				iRow, iRows, iColumn, iColumns, sNodeName,                                                                       // 536
				oCol, oData;                                                                                                     // 537
			                                                                                                                  // 538
			/*                                                                                                                // 539
			 * Process by row first                                                                                           // 540
			 * Add the data object for the whole table - storing the tr node. Note - no point in getting                      // 541
			 * DOM based data if we are going to go and replace it with Ajax source data.                                     // 542
			 */                                                                                                               // 543
			if ( oSettings.bDeferLoading || oSettings.sAjaxSource === null )                                                  // 544
			{                                                                                                                 // 545
				nTr = oSettings.nTBody.firstChild;                                                                               // 546
				while ( nTr )                                                                                                    // 547
				{                                                                                                                // 548
					if ( nTr.nodeName.toUpperCase() == "TR" )                                                                       // 549
					{                                                                                                               // 550
						iThisIndex = oSettings.aoData.length;                                                                          // 551
						nTr._DT_RowIndex = iThisIndex;                                                                                 // 552
						oSettings.aoData.push( $.extend( true, {}, DataTable.models.oRow, {                                            // 553
							"nTr": nTr                                                                                                    // 554
						} ) );                                                                                                         // 555
		                                                                                                                   // 556
						oSettings.aiDisplayMaster.push( iThisIndex );                                                                  // 557
						nTd = nTr.firstChild;                                                                                          // 558
						jInner = 0;                                                                                                    // 559
						while ( nTd )                                                                                                  // 560
						{                                                                                                              // 561
							sNodeName = nTd.nodeName.toUpperCase();                                                                       // 562
							if ( sNodeName == "TD" || sNodeName == "TH" )                                                                 // 563
							{                                                                                                             // 564
								_fnSetCellData( oSettings, iThisIndex, jInner, $.trim(nTd.innerHTML) );                                      // 565
								jInner++;                                                                                                    // 566
							}                                                                                                             // 567
							nTd = nTd.nextSibling;                                                                                        // 568
						}                                                                                                              // 569
					}                                                                                                               // 570
					nTr = nTr.nextSibling;                                                                                          // 571
				}                                                                                                                // 572
			}                                                                                                                 // 573
			                                                                                                                  // 574
			/* Gather in the TD elements of the Table - note that this is basically the same as                               // 575
			 * fnGetTdNodes, but that function takes account of hidden columns, which we haven't yet                          // 576
			 * setup!                                                                                                         // 577
			 */                                                                                                               // 578
			nTrs = _fnGetTrNodes( oSettings );                                                                                // 579
			nTds = [];                                                                                                        // 580
			for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )                                                                      // 581
			{                                                                                                                 // 582
				nTd = nTrs[i].firstChild;                                                                                        // 583
				while ( nTd )                                                                                                    // 584
				{                                                                                                                // 585
					sNodeName = nTd.nodeName.toUpperCase();                                                                         // 586
					if ( sNodeName == "TD" || sNodeName == "TH" )                                                                   // 587
					{                                                                                                               // 588
						nTds.push( nTd );                                                                                              // 589
					}                                                                                                               // 590
					nTd = nTd.nextSibling;                                                                                          // 591
				}                                                                                                                // 592
			}                                                                                                                 // 593
			                                                                                                                  // 594
			/* Now process by column */                                                                                       // 595
			for ( iColumn=0, iColumns=oSettings.aoColumns.length ; iColumn<iColumns ; iColumn++ )                             // 596
			{                                                                                                                 // 597
				oCol = oSettings.aoColumns[iColumn];                                                                             // 598
		                                                                                                                   // 599
				/* Get the title of the column - unless there is a user set one */                                               // 600
				if ( oCol.sTitle === null )                                                                                      // 601
				{                                                                                                                // 602
					oCol.sTitle = oCol.nTh.innerHTML;                                                                               // 603
				}                                                                                                                // 604
				                                                                                                                 // 605
				var                                                                                                              // 606
					bAutoType = oCol._bAutoType,                                                                                    // 607
					bRender = typeof oCol.fnRender === 'function',                                                                  // 608
					bClass = oCol.sClass !== null,                                                                                  // 609
					bVisible = oCol.bVisible,                                                                                       // 610
					nCell, sThisType, sRendered, sValType;                                                                          // 611
				                                                                                                                 // 612
				/* A single loop to rule them all (and be more efficient) */                                                     // 613
				if ( bAutoType || bRender || bClass || !bVisible )                                                               // 614
				{                                                                                                                // 615
					for ( iRow=0, iRows=oSettings.aoData.length ; iRow<iRows ; iRow++ )                                             // 616
					{                                                                                                               // 617
						oData = oSettings.aoData[iRow];                                                                                // 618
						nCell = nTds[ (iRow*iColumns) + iColumn ];                                                                     // 619
						                                                                                                               // 620
						/* Type detection */                                                                                           // 621
						if ( bAutoType && oCol.sType != 'string' )                                                                     // 622
						{                                                                                                              // 623
							sValType = _fnGetCellData( oSettings, iRow, iColumn, 'type' );                                                // 624
							if ( sValType !== '' )                                                                                        // 625
							{                                                                                                             // 626
								sThisType = _fnDetectType( sValType );                                                                       // 627
								if ( oCol.sType === null )                                                                                   // 628
								{                                                                                                            // 629
									oCol.sType = sThisType;                                                                                     // 630
								}                                                                                                            // 631
								else if ( oCol.sType != sThisType &&                                                                         // 632
								          oCol.sType != "html" )                                                                             // 633
								{                                                                                                            // 634
									/* String is always the 'fallback' option */                                                                // 635
									oCol.sType = 'string';                                                                                      // 636
								}                                                                                                            // 637
							}                                                                                                             // 638
						}                                                                                                              // 639
		                                                                                                                   // 640
						if ( oCol.mRender )                                                                                            // 641
						{                                                                                                              // 642
							// mRender has been defined, so we need to get the value and set it                                           // 643
							nCell.innerHTML = _fnGetCellData( oSettings, iRow, iColumn, 'display' );                                      // 644
						}                                                                                                              // 645
						else if ( oCol.mData !== iColumn )                                                                             // 646
						{                                                                                                              // 647
							// If mData is not the same as the column number, then we need to                                             // 648
							// get the dev set value. If it is the column, no point in wasting                                            // 649
							// time setting the value that is already there!                                                              // 650
							nCell.innerHTML = _fnGetCellData( oSettings, iRow, iColumn, 'display' );                                      // 651
						}                                                                                                              // 652
						                                                                                                               // 653
						/* Rendering */                                                                                                // 654
						if ( bRender )                                                                                                 // 655
						{                                                                                                              // 656
							sRendered = _fnRender( oSettings, iRow, iColumn );                                                            // 657
							nCell.innerHTML = sRendered;                                                                                  // 658
							if ( oCol.bUseRendered )                                                                                      // 659
							{                                                                                                             // 660
								/* Use the rendered data for filtering / sorting */                                                          // 661
								_fnSetCellData( oSettings, iRow, iColumn, sRendered );                                                       // 662
							}                                                                                                             // 663
						}                                                                                                              // 664
						                                                                                                               // 665
						/* Classes */                                                                                                  // 666
						if ( bClass )                                                                                                  // 667
						{                                                                                                              // 668
							nCell.className += ' '+oCol.sClass;                                                                           // 669
						}                                                                                                              // 670
						                                                                                                               // 671
						/* Column visibility */                                                                                        // 672
						if ( !bVisible )                                                                                               // 673
						{                                                                                                              // 674
							oData._anHidden[iColumn] = nCell;                                                                             // 675
							nCell.parentNode.removeChild( nCell );                                                                        // 676
						}                                                                                                              // 677
						else                                                                                                           // 678
						{                                                                                                              // 679
							oData._anHidden[iColumn] = null;                                                                              // 680
						}                                                                                                              // 681
		                                                                                                                   // 682
						if ( oCol.fnCreatedCell )                                                                                      // 683
						{                                                                                                              // 684
							oCol.fnCreatedCell.call( oSettings.oInstance,                                                                 // 685
								nCell, _fnGetCellData( oSettings, iRow, iColumn, 'display' ), oData._aData, iRow, iColumn                    // 686
							);                                                                                                            // 687
						}                                                                                                              // 688
					}                                                                                                               // 689
				}                                                                                                                // 690
			}                                                                                                                 // 691
		                                                                                                                   // 692
			/* Row created callbacks */                                                                                       // 693
			if ( oSettings.aoRowCreatedCallback.length !== 0 )                                                                // 694
			{                                                                                                                 // 695
				for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )                                                         // 696
				{                                                                                                                // 697
					oData = oSettings.aoData[i];                                                                                    // 698
					_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [oData.nTr, oData._aData, i] );                       // 699
				}                                                                                                                // 700
			}                                                                                                                 // 701
		}                                                                                                                  // 702
		                                                                                                                   // 703
		                                                                                                                   // 704
		/**                                                                                                                // 705
		 * Take a TR element and convert it to an index in aoData                                                          // 706
		 *  @param {object} oSettings dataTables settings object                                                           // 707
		 *  @param {node} n the TR element to find                                                                         // 708
		 *  @returns {int} index if the node is found, null if not                                                         // 709
		 *  @memberof DataTable#oApi                                                                                       // 710
		 */                                                                                                                // 711
		function _fnNodeToDataIndex( oSettings, n )                                                                        // 712
		{                                                                                                                  // 713
			return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;                                                      // 714
		}                                                                                                                  // 715
		                                                                                                                   // 716
		                                                                                                                   // 717
		/**                                                                                                                // 718
		 * Take a TD element and convert it into a column data index (not the visible index)                               // 719
		 *  @param {object} oSettings dataTables settings object                                                           // 720
		 *  @param {int} iRow The row number the TD/TH can be found in                                                     // 721
		 *  @param {node} n The TD/TH element to find                                                                      // 722
		 *  @returns {int} index if the node is found, -1 if not                                                           // 723
		 *  @memberof DataTable#oApi                                                                                       // 724
		 */                                                                                                                // 725
		function _fnNodeToColumnIndex( oSettings, iRow, n )                                                                // 726
		{                                                                                                                  // 727
			var anCells = _fnGetTdNodes( oSettings, iRow );                                                                   // 728
		                                                                                                                   // 729
			for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                   // 730
			{                                                                                                                 // 731
				if ( anCells[i] === n )                                                                                          // 732
				{                                                                                                                // 733
					return i;                                                                                                       // 734
				}                                                                                                                // 735
			}                                                                                                                 // 736
			return -1;                                                                                                        // 737
		}                                                                                                                  // 738
		                                                                                                                   // 739
		                                                                                                                   // 740
		/**                                                                                                                // 741
		 * Get an array of data for a given row from the internal data cache                                               // 742
		 *  @param {object} oSettings dataTables settings object                                                           // 743
		 *  @param {int} iRow aoData row id                                                                                // 744
		 *  @param {string} sSpecific data get type ('type' 'filter' 'sort')                                               // 745
		 *  @param {array} aiColumns Array of column indexes to get data from                                              // 746
		 *  @returns {array} Data array                                                                                    // 747
		 *  @memberof DataTable#oApi                                                                                       // 748
		 */                                                                                                                // 749
		function _fnGetRowData( oSettings, iRow, sSpecific, aiColumns )                                                    // 750
		{                                                                                                                  // 751
			var out = [];                                                                                                     // 752
			for ( var i=0, iLen=aiColumns.length ; i<iLen ; i++ )                                                             // 753
			{                                                                                                                 // 754
				out.push( _fnGetCellData( oSettings, iRow, aiColumns[i], sSpecific ) );                                          // 755
			}                                                                                                                 // 756
			return out;                                                                                                       // 757
		}                                                                                                                  // 758
		                                                                                                                   // 759
		                                                                                                                   // 760
		/**                                                                                                                // 761
		 * Get the data for a given cell from the internal cache, taking into account data mapping                         // 762
		 *  @param {object} oSettings dataTables settings object                                                           // 763
		 *  @param {int} iRow aoData row id                                                                                // 764
		 *  @param {int} iCol Column index                                                                                 // 765
		 *  @param {string} sSpecific data get type ('display', 'type' 'filter' 'sort')                                    // 766
		 *  @returns {*} Cell data                                                                                         // 767
		 *  @memberof DataTable#oApi                                                                                       // 768
		 */                                                                                                                // 769
		function _fnGetCellData( oSettings, iRow, iCol, sSpecific )                                                        // 770
		{                                                                                                                  // 771
			var sData;                                                                                                        // 772
			var oCol = oSettings.aoColumns[iCol];                                                                             // 773
			var oData = oSettings.aoData[iRow]._aData;                                                                        // 774
		                                                                                                                   // 775
			if ( (sData=oCol.fnGetData( oData, sSpecific )) === undefined )                                                   // 776
			{                                                                                                                 // 777
				if ( oSettings.iDrawError != oSettings.iDraw && oCol.sDefaultContent === null )                                  // 778
				{                                                                                                                // 779
					_fnLog( oSettings, 0, "Requested unknown parameter "+                                                           // 780
						(typeof oCol.mData=='function' ? '{mData function}' : "'"+oCol.mData+"'")+                                     // 781
						" from the data source for row "+iRow );                                                                       // 782
					oSettings.iDrawError = oSettings.iDraw;                                                                         // 783
				}                                                                                                                // 784
				return oCol.sDefaultContent;                                                                                     // 785
			}                                                                                                                 // 786
		                                                                                                                   // 787
			/* When the data source is null, we can use default column data */                                                // 788
			if ( sData === null && oCol.sDefaultContent !== null )                                                            // 789
			{                                                                                                                 // 790
				sData = oCol.sDefaultContent;                                                                                    // 791
			}                                                                                                                 // 792
			else if ( typeof sData === 'function' )                                                                           // 793
			{                                                                                                                 // 794
				/* If the data source is a function, then we run it and use the return */                                        // 795
				return sData();                                                                                                  // 796
			}                                                                                                                 // 797
		                                                                                                                   // 798
			if ( sSpecific == 'display' && sData === null )                                                                   // 799
			{                                                                                                                 // 800
				return '';                                                                                                       // 801
			}                                                                                                                 // 802
			return sData;                                                                                                     // 803
		}                                                                                                                  // 804
		                                                                                                                   // 805
		                                                                                                                   // 806
		/**                                                                                                                // 807
		 * Set the value for a specific cell, into the internal data cache                                                 // 808
		 *  @param {object} oSettings dataTables settings object                                                           // 809
		 *  @param {int} iRow aoData row id                                                                                // 810
		 *  @param {int} iCol Column index                                                                                 // 811
		 *  @param {*} val Value to set                                                                                    // 812
		 *  @memberof DataTable#oApi                                                                                       // 813
		 */                                                                                                                // 814
		function _fnSetCellData( oSettings, iRow, iCol, val )                                                              // 815
		{                                                                                                                  // 816
			var oCol = oSettings.aoColumns[iCol];                                                                             // 817
			var oData = oSettings.aoData[iRow]._aData;                                                                        // 818
		                                                                                                                   // 819
			oCol.fnSetData( oData, val );                                                                                     // 820
		}                                                                                                                  // 821
		                                                                                                                   // 822
		                                                                                                                   // 823
		// Private variable that is used to match array syntax in the data property object                                 // 824
		var __reArray = /\[.*?\]$/;                                                                                        // 825
		                                                                                                                   // 826
		/**                                                                                                                // 827
		 * Return a function that can be used to get data from a source object, taking                                     // 828
		 * into account the ability to use nested objects as a source                                                      // 829
		 *  @param {string|int|function} mSource The data source for the object                                            // 830
		 *  @returns {function} Data get function                                                                          // 831
		 *  @memberof DataTable#oApi                                                                                       // 832
		 */                                                                                                                // 833
		function _fnGetObjectDataFn( mSource )                                                                             // 834
		{                                                                                                                  // 835
			if ( mSource === null )                                                                                           // 836
			{                                                                                                                 // 837
				/* Give an empty string for rendering / sorting etc */                                                           // 838
				return function (data, type) {                                                                                   // 839
					return null;                                                                                                    // 840
				};                                                                                                               // 841
			}                                                                                                                 // 842
			else if ( typeof mSource === 'function' )                                                                         // 843
			{                                                                                                                 // 844
				return function (data, type, extra) {                                                                            // 845
					return mSource( data, type, extra );                                                                            // 846
				};                                                                                                               // 847
			}                                                                                                                 // 848
			else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1) )           // 849
			{                                                                                                                 // 850
				/* If there is a . in the source string then the data source is in a                                             // 851
				 * nested object so we loop over the data for each level to get the next                                         // 852
				 * level down. On each loop we test for undefined, and if found immediately                                      // 853
				 * return. This allows entire objects to be missing and sDefaultContent to                                       // 854
				 * be used if defined, rather than throwing an error                                                             // 855
				 */                                                                                                              // 856
				var fetchData = function (data, type, src) {                                                                     // 857
					var a = src.split('.');                                                                                         // 858
					var arrayNotation, out, innerSrc;                                                                               // 859
		                                                                                                                   // 860
					if ( src !== "" )                                                                                               // 861
					{                                                                                                               // 862
						for ( var i=0, iLen=a.length ; i<iLen ; i++ )                                                                  // 863
						{                                                                                                              // 864
							// Check if we are dealing with an array notation request                                                     // 865
							arrayNotation = a[i].match(__reArray);                                                                        // 866
		                                                                                                                   // 867
							if ( arrayNotation ) {                                                                                        // 868
								a[i] = a[i].replace(__reArray, '');                                                                          // 869
		                                                                                                                   // 870
								// Condition allows simply [] to be passed in                                                                // 871
								if ( a[i] !== "" ) {                                                                                         // 872
									data = data[ a[i] ];                                                                                        // 873
								}                                                                                                            // 874
								out = [];                                                                                                    // 875
								                                                                                                             // 876
								// Get the remainder of the nested object to get                                                             // 877
								a.splice( 0, i+1 );                                                                                          // 878
								innerSrc = a.join('.');                                                                                      // 879
		                                                                                                                   // 880
								// Traverse each entry in the array getting the properties requested                                         // 881
								for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {                                                           // 882
									out.push( fetchData( data[j], type, innerSrc ) );                                                           // 883
								}                                                                                                            // 884
		                                                                                                                   // 885
								// If a string is given in between the array notation indicators, that                                       // 886
								// is used to join the strings together, otherwise an array is returned                                      // 887
								var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);                                         // 888
								data = (join==="") ? out : out.join(join);                                                                   // 889
		                                                                                                                   // 890
								// The inner call to fetchData has already traversed through the remainder                                   // 891
								// of the source requested, so we exit from the loop                                                         // 892
								break;                                                                                                       // 893
							}                                                                                                             // 894
		                                                                                                                   // 895
							if ( data === null || data[ a[i] ] === undefined )                                                            // 896
							{                                                                                                             // 897
								return undefined;                                                                                            // 898
							}                                                                                                             // 899
							data = data[ a[i] ];                                                                                          // 900
						}                                                                                                              // 901
					}                                                                                                               // 902
		                                                                                                                   // 903
					return data;                                                                                                    // 904
				};                                                                                                               // 905
		                                                                                                                   // 906
				return function (data, type) {                                                                                   // 907
					return fetchData( data, type, mSource );                                                                        // 908
				};                                                                                                               // 909
			}                                                                                                                 // 910
			else                                                                                                              // 911
			{                                                                                                                 // 912
				/* Array or flat object mapping */                                                                               // 913
				return function (data, type) {                                                                                   // 914
					return data[mSource];	                                                                                          // 915
				};                                                                                                               // 916
			}                                                                                                                 // 917
		}                                                                                                                  // 918
		                                                                                                                   // 919
		                                                                                                                   // 920
		/**                                                                                                                // 921
		 * Return a function that can be used to set data from a source object, taking                                     // 922
		 * into account the ability to use nested objects as a source                                                      // 923
		 *  @param {string|int|function} mSource The data source for the object                                            // 924
		 *  @returns {function} Data set function                                                                          // 925
		 *  @memberof DataTable#oApi                                                                                       // 926
		 */                                                                                                                // 927
		function _fnSetObjectDataFn( mSource )                                                                             // 928
		{                                                                                                                  // 929
			if ( mSource === null )                                                                                           // 930
			{                                                                                                                 // 931
				/* Nothing to do when the data source is null */                                                                 // 932
				return function (data, val) {};                                                                                  // 933
			}                                                                                                                 // 934
			else if ( typeof mSource === 'function' )                                                                         // 935
			{                                                                                                                 // 936
				return function (data, val) {                                                                                    // 937
					mSource( data, 'set', val );                                                                                    // 938
				};                                                                                                               // 939
			}                                                                                                                 // 940
			else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1) )           // 941
			{                                                                                                                 // 942
				/* Like the get, we need to get data from a nested object */                                                     // 943
				var setData = function (data, val, src) {                                                                        // 944
					var a = src.split('.'), b;                                                                                      // 945
					var arrayNotation, o, innerSrc;                                                                                 // 946
		                                                                                                                   // 947
					for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )                                                                 // 948
					{                                                                                                               // 949
						// Check if we are dealing with an array notation request                                                      // 950
						arrayNotation = a[i].match(__reArray);                                                                         // 951
		                                                                                                                   // 952
						if ( arrayNotation )                                                                                           // 953
						{                                                                                                              // 954
							a[i] = a[i].replace(__reArray, '');                                                                           // 955
							data[ a[i] ] = [];                                                                                            // 956
							                                                                                                              // 957
							// Get the remainder of the nested object to set so we can recurse                                            // 958
							b = a.slice();                                                                                                // 959
							b.splice( 0, i+1 );                                                                                           // 960
							innerSrc = b.join('.');                                                                                       // 961
		                                                                                                                   // 962
							// Traverse each entry in the array setting the properties requested                                          // 963
							for ( var j=0, jLen=val.length ; j<jLen ; j++ )                                                               // 964
							{                                                                                                             // 965
								o = {};                                                                                                      // 966
								setData( o, val[j], innerSrc );                                                                              // 967
								data[ a[i] ].push( o );                                                                                      // 968
							}                                                                                                             // 969
		                                                                                                                   // 970
							// The inner call to setData has already traversed through the remainder                                      // 971
							// of the source and has set the data, thus we can exit here                                                  // 972
							return;                                                                                                       // 973
						}                                                                                                              // 974
		                                                                                                                   // 975
						// If the nested object doesn't currently exist - since we are                                                 // 976
						// trying to set the value - create it                                                                         // 977
						if ( data[ a[i] ] === null || data[ a[i] ] === undefined )                                                     // 978
						{                                                                                                              // 979
							data[ a[i] ] = {};                                                                                            // 980
						}                                                                                                              // 981
						data = data[ a[i] ];                                                                                           // 982
					}                                                                                                               // 983
		                                                                                                                   // 984
					// If array notation is used, we just want to strip it and use the property name                                // 985
					// and assign the value. If it isn't used, then we get the result we want anyway                                // 986
					data[ a[a.length-1].replace(__reArray, '') ] = val;                                                             // 987
				};                                                                                                               // 988
		                                                                                                                   // 989
				return function (data, val) {                                                                                    // 990
					return setData( data, val, mSource );                                                                           // 991
				};                                                                                                               // 992
			}                                                                                                                 // 993
			else                                                                                                              // 994
			{                                                                                                                 // 995
				/* Array or flat object mapping */                                                                               // 996
				return function (data, val) {                                                                                    // 997
					data[mSource] = val;	                                                                                           // 998
				};                                                                                                               // 999
			}                                                                                                                 // 1000
		}                                                                                                                  // 1001
		                                                                                                                   // 1002
		                                                                                                                   // 1003
		/**                                                                                                                // 1004
		 * Return an array with the full table data                                                                        // 1005
		 *  @param {object} oSettings dataTables settings object                                                           // 1006
		 *  @returns array {array} aData Master data array                                                                 // 1007
		 *  @memberof DataTable#oApi                                                                                       // 1008
		 */                                                                                                                // 1009
		function _fnGetDataMaster ( oSettings )                                                                            // 1010
		{                                                                                                                  // 1011
			var aData = [];                                                                                                   // 1012
			var iLen = oSettings.aoData.length;                                                                               // 1013
			for ( var i=0 ; i<iLen; i++ )                                                                                     // 1014
			{                                                                                                                 // 1015
				aData.push( oSettings.aoData[i]._aData );                                                                        // 1016
			}                                                                                                                 // 1017
			return aData;                                                                                                     // 1018
		}                                                                                                                  // 1019
		                                                                                                                   // 1020
		                                                                                                                   // 1021
		/**                                                                                                                // 1022
		 * Nuke the table                                                                                                  // 1023
		 *  @param {object} oSettings dataTables settings object                                                           // 1024
		 *  @memberof DataTable#oApi                                                                                       // 1025
		 */                                                                                                                // 1026
		function _fnClearTable( oSettings )                                                                                // 1027
		{                                                                                                                  // 1028
			oSettings.aoData.splice( 0, oSettings.aoData.length );                                                            // 1029
			oSettings.aiDisplayMaster.splice( 0, oSettings.aiDisplayMaster.length );                                          // 1030
			oSettings.aiDisplay.splice( 0, oSettings.aiDisplay.length );                                                      // 1031
			_fnCalculateEnd( oSettings );                                                                                     // 1032
		}                                                                                                                  // 1033
		                                                                                                                   // 1034
		                                                                                                                   // 1035
		 /**                                                                                                               // 1036
		 * Take an array of integers (index array) and remove a target integer (value - not                                // 1037
		 * the key!)                                                                                                       // 1038
		 *  @param {array} a Index array to target                                                                         // 1039
		 *  @param {int} iTarget value to find                                                                             // 1040
		 *  @memberof DataTable#oApi                                                                                       // 1041
		 */                                                                                                                // 1042
		function _fnDeleteIndex( a, iTarget )                                                                              // 1043
		{                                                                                                                  // 1044
			var iTargetIndex = -1;                                                                                            // 1045
			                                                                                                                  // 1046
			for ( var i=0, iLen=a.length ; i<iLen ; i++ )                                                                     // 1047
			{                                                                                                                 // 1048
				if ( a[i] == iTarget )                                                                                           // 1049
				{                                                                                                                // 1050
					iTargetIndex = i;                                                                                               // 1051
				}                                                                                                                // 1052
				else if ( a[i] > iTarget )                                                                                       // 1053
				{                                                                                                                // 1054
					a[i]--;                                                                                                         // 1055
				}                                                                                                                // 1056
			}                                                                                                                 // 1057
			                                                                                                                  // 1058
			if ( iTargetIndex != -1 )                                                                                         // 1059
			{                                                                                                                 // 1060
				a.splice( iTargetIndex, 1 );                                                                                     // 1061
			}                                                                                                                 // 1062
		}                                                                                                                  // 1063
		                                                                                                                   // 1064
		                                                                                                                   // 1065
		 /**                                                                                                               // 1066
		 * Call the developer defined fnRender function for a given cell (row/column) with                                 // 1067
		 * the required parameters and return the result.                                                                  // 1068
		 *  @param {object} oSettings dataTables settings object                                                           // 1069
		 *  @param {int} iRow aoData index for the row                                                                     // 1070
		 *  @param {int} iCol aoColumns index for the column                                                               // 1071
		 *  @returns {*} Return of the developer's fnRender function                                                       // 1072
		 *  @memberof DataTable#oApi                                                                                       // 1073
		 */                                                                                                                // 1074
		function _fnRender( oSettings, iRow, iCol )                                                                        // 1075
		{                                                                                                                  // 1076
			var oCol = oSettings.aoColumns[iCol];                                                                             // 1077
		                                                                                                                   // 1078
			return oCol.fnRender( {                                                                                           // 1079
				"iDataRow":    iRow,                                                                                             // 1080
				"iDataColumn": iCol,                                                                                             // 1081
				"oSettings":   oSettings,                                                                                        // 1082
				"aData":       oSettings.aoData[iRow]._aData,                                                                    // 1083
				"mDataProp":   oCol.mData                                                                                        // 1084
			}, _fnGetCellData(oSettings, iRow, iCol, 'display') );                                                            // 1085
		}                                                                                                                  // 1086
		/**                                                                                                                // 1087
		 * Create a new TR element (and it's TD children) for a row                                                        // 1088
		 *  @param {object} oSettings dataTables settings object                                                           // 1089
		 *  @param {int} iRow Row to consider                                                                              // 1090
		 *  @memberof DataTable#oApi                                                                                       // 1091
		 */                                                                                                                // 1092
		function _fnCreateTr ( oSettings, iRow )                                                                           // 1093
		{                                                                                                                  // 1094
			var oData = oSettings.aoData[iRow];                                                                               // 1095
			var nTd;                                                                                                          // 1096
		                                                                                                                   // 1097
			if ( oData.nTr === null )                                                                                         // 1098
			{                                                                                                                 // 1099
				oData.nTr = document.createElement('tr');                                                                        // 1100
		                                                                                                                   // 1101
				/* Use a private property on the node to allow reserve mapping from the node                                     // 1102
				 * to the aoData array for fast look up                                                                          // 1103
				 */                                                                                                              // 1104
				oData.nTr._DT_RowIndex = iRow;                                                                                   // 1105
		                                                                                                                   // 1106
				/* Special parameters can be given by the data source to be used on the row */                                   // 1107
				if ( oData._aData.DT_RowId )                                                                                     // 1108
				{                                                                                                                // 1109
					oData.nTr.id = oData._aData.DT_RowId;                                                                           // 1110
				}                                                                                                                // 1111
		                                                                                                                   // 1112
				if ( oData._aData.DT_RowClass )                                                                                  // 1113
				{                                                                                                                // 1114
					oData.nTr.className = oData._aData.DT_RowClass;                                                                 // 1115
				}                                                                                                                // 1116
		                                                                                                                   // 1117
				/* Process each column */                                                                                        // 1118
				for ( var i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                  // 1119
				{                                                                                                                // 1120
					var oCol = oSettings.aoColumns[i];                                                                              // 1121
					nTd = document.createElement( oCol.sCellType );                                                                 // 1122
		                                                                                                                   // 1123
					/* Render if needed - if bUseRendered is true then we already have the rendered                                 // 1124
					 * value in the data source - so can just use that                                                              // 1125
					 */                                                                                                             // 1126
					nTd.innerHTML = (typeof oCol.fnRender === 'function' && (!oCol.bUseRendered || oCol.mData === null)) ?          // 1127
						_fnRender( oSettings, iRow, i ) :                                                                              // 1128
						_fnGetCellData( oSettings, iRow, i, 'display' );                                                               // 1129
				                                                                                                                 // 1130
					/* Add user defined class */                                                                                    // 1131
					if ( oCol.sClass !== null )                                                                                     // 1132
					{                                                                                                               // 1133
						nTd.className = oCol.sClass;                                                                                   // 1134
					}                                                                                                               // 1135
					                                                                                                                // 1136
					if ( oCol.bVisible )                                                                                            // 1137
					{                                                                                                               // 1138
						oData.nTr.appendChild( nTd );                                                                                  // 1139
						oData._anHidden[i] = null;                                                                                     // 1140
					}                                                                                                               // 1141
					else                                                                                                            // 1142
					{                                                                                                               // 1143
						oData._anHidden[i] = nTd;                                                                                      // 1144
					}                                                                                                               // 1145
		                                                                                                                   // 1146
					if ( oCol.fnCreatedCell )                                                                                       // 1147
					{                                                                                                               // 1148
						oCol.fnCreatedCell.call( oSettings.oInstance,                                                                  // 1149
							nTd, _fnGetCellData( oSettings, iRow, i, 'display' ), oData._aData, iRow, i                                   // 1150
						);                                                                                                             // 1151
					}                                                                                                               // 1152
				}                                                                                                                // 1153
		                                                                                                                   // 1154
				_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [oData.nTr, oData._aData, iRow] );                     // 1155
			}                                                                                                                 // 1156
		}                                                                                                                  // 1157
		                                                                                                                   // 1158
		                                                                                                                   // 1159
		/**                                                                                                                // 1160
		 * Create the HTML header for the table                                                                            // 1161
		 *  @param {object} oSettings dataTables settings object                                                           // 1162
		 *  @memberof DataTable#oApi                                                                                       // 1163
		 */                                                                                                                // 1164
		function _fnBuildHead( oSettings )                                                                                 // 1165
		{                                                                                                                  // 1166
			var i, nTh, iLen, j, jLen;                                                                                        // 1167
			var iThs = $('th, td', oSettings.nTHead).length;                                                                  // 1168
			var iCorrector = 0;                                                                                               // 1169
			var jqChildren;                                                                                                   // 1170
			                                                                                                                  // 1171
			/* If there is a header in place - then use it - otherwise it's going to get nuked... */                          // 1172
			if ( iThs !== 0 )                                                                                                 // 1173
			{                                                                                                                 // 1174
				/* We've got a thead from the DOM, so remove hidden columns and apply width to vis cols */                       // 1175
				for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                      // 1176
				{                                                                                                                // 1177
					nTh = oSettings.aoColumns[i].nTh;                                                                               // 1178
					nTh.setAttribute('role', 'columnheader');                                                                       // 1179
					if ( oSettings.aoColumns[i].bSortable )                                                                         // 1180
					{                                                                                                               // 1181
						nTh.setAttribute('tabindex', oSettings.iTabIndex);                                                             // 1182
						nTh.setAttribute('aria-controls', oSettings.sTableId);                                                         // 1183
					}                                                                                                               // 1184
		                                                                                                                   // 1185
					if ( oSettings.aoColumns[i].sClass !== null )                                                                   // 1186
					{                                                                                                               // 1187
						$(nTh).addClass( oSettings.aoColumns[i].sClass );                                                              // 1188
					}                                                                                                               // 1189
					                                                                                                                // 1190
					/* Set the title of the column if it is user defined (not what was auto detected) */                            // 1191
					if ( oSettings.aoColumns[i].sTitle != nTh.innerHTML )                                                           // 1192
					{                                                                                                               // 1193
						nTh.innerHTML = oSettings.aoColumns[i].sTitle;                                                                 // 1194
					}                                                                                                               // 1195
				}                                                                                                                // 1196
			}                                                                                                                 // 1197
			else                                                                                                              // 1198
			{                                                                                                                 // 1199
				/* We don't have a header in the DOM - so we are going to have to create one */                                  // 1200
				var nTr = document.createElement( "tr" );                                                                        // 1201
				                                                                                                                 // 1202
				for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                      // 1203
				{                                                                                                                // 1204
					nTh = oSettings.aoColumns[i].nTh;                                                                               // 1205
					nTh.innerHTML = oSettings.aoColumns[i].sTitle;                                                                  // 1206
					nTh.setAttribute('tabindex', '0');                                                                              // 1207
					                                                                                                                // 1208
					if ( oSettings.aoColumns[i].sClass !== null )                                                                   // 1209
					{                                                                                                               // 1210
						$(nTh).addClass( oSettings.aoColumns[i].sClass );                                                              // 1211
					}                                                                                                               // 1212
					                                                                                                                // 1213
					nTr.appendChild( nTh );                                                                                         // 1214
				}                                                                                                                // 1215
				$(oSettings.nTHead).html( '' )[0].appendChild( nTr );                                                            // 1216
				_fnDetectHeader( oSettings.aoHeader, oSettings.nTHead );                                                         // 1217
			}                                                                                                                 // 1218
			                                                                                                                  // 1219
			/* ARIA role for the rows */	                                                                                     // 1220
			$(oSettings.nTHead).children('tr').attr('role', 'row');                                                           // 1221
			                                                                                                                  // 1222
			/* Add the extra markup needed by jQuery UI's themes */                                                           // 1223
			if ( oSettings.bJUI )                                                                                             // 1224
			{                                                                                                                 // 1225
				for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                      // 1226
				{                                                                                                                // 1227
					nTh = oSettings.aoColumns[i].nTh;                                                                               // 1228
					                                                                                                                // 1229
					var nDiv = document.createElement('div');                                                                       // 1230
					nDiv.className = oSettings.oClasses.sSortJUIWrapper;                                                            // 1231
					$(nTh).contents().appendTo(nDiv);                                                                               // 1232
					                                                                                                                // 1233
					var nSpan = document.createElement('span');                                                                     // 1234
					nSpan.className = oSettings.oClasses.sSortIcon;                                                                 // 1235
					nDiv.appendChild( nSpan );                                                                                      // 1236
					nTh.appendChild( nDiv );                                                                                        // 1237
				}                                                                                                                // 1238
			}                                                                                                                 // 1239
			                                                                                                                  // 1240
			if ( oSettings.oFeatures.bSort )                                                                                  // 1241
			{                                                                                                                 // 1242
				for ( i=0 ; i<oSettings.aoColumns.length ; i++ )                                                                 // 1243
				{                                                                                                                // 1244
					if ( oSettings.aoColumns[i].bSortable !== false )                                                               // 1245
					{                                                                                                               // 1246
						_fnSortAttachListener( oSettings, oSettings.aoColumns[i].nTh, i );                                             // 1247
					}                                                                                                               // 1248
					else                                                                                                            // 1249
					{                                                                                                               // 1250
						$(oSettings.aoColumns[i].nTh).addClass( oSettings.oClasses.sSortableNone );                                    // 1251
					}                                                                                                               // 1252
				}                                                                                                                // 1253
			}                                                                                                                 // 1254
			                                                                                                                  // 1255
			/* Deal with the footer - add classes if required */                                                              // 1256
			if ( oSettings.oClasses.sFooterTH !== "" )                                                                        // 1257
			{                                                                                                                 // 1258
				$(oSettings.nTFoot).children('tr').children('th').addClass( oSettings.oClasses.sFooterTH );                      // 1259
			}                                                                                                                 // 1260
			                                                                                                                  // 1261
			/* Cache the footer elements */                                                                                   // 1262
			if ( oSettings.nTFoot !== null )                                                                                  // 1263
			{                                                                                                                 // 1264
				var anCells = _fnGetUniqueThs( oSettings, null, oSettings.aoFooter );                                            // 1265
				for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                      // 1266
				{                                                                                                                // 1267
					if ( anCells[i] )                                                                                               // 1268
					{                                                                                                               // 1269
						oSettings.aoColumns[i].nTf = anCells[i];                                                                       // 1270
						if ( oSettings.aoColumns[i].sClass )                                                                           // 1271
						{                                                                                                              // 1272
							$(anCells[i]).addClass( oSettings.aoColumns[i].sClass );                                                      // 1273
						}                                                                                                              // 1274
					}                                                                                                               // 1275
				}                                                                                                                // 1276
			}                                                                                                                 // 1277
		}                                                                                                                  // 1278
		                                                                                                                   // 1279
		                                                                                                                   // 1280
		/**                                                                                                                // 1281
		 * Draw the header (or footer) element based on the column visibility states. The                                  // 1282
		 * methodology here is to use the layout array from _fnDetectHeader, modified for                                  // 1283
		 * the instantaneous column visibility, to construct the new layout. The grid is                                   // 1284
		 * traversed over cell at a time in a rows x columns grid fashion, although each                                   // 1285
		 * cell insert can cover multiple elements in the grid - which is tracks using the                                 // 1286
		 * aApplied array. Cell inserts in the grid will only occur where there isn't                                      // 1287
		 * already a cell in that position.                                                                                // 1288
		 *  @param {object} oSettings dataTables settings object                                                           // 1289
		 *  @param array {objects} aoSource Layout array from _fnDetectHeader                                              // 1290
		 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,                   // 1291
		 *  @memberof DataTable#oApi                                                                                       // 1292
		 */                                                                                                                // 1293
		function _fnDrawHead( oSettings, aoSource, bIncludeHidden )                                                        // 1294
		{                                                                                                                  // 1295
			var i, iLen, j, jLen, k, kLen, n, nLocalTr;                                                                       // 1296
			var aoLocal = [];                                                                                                 // 1297
			var aApplied = [];                                                                                                // 1298
			var iColumns = oSettings.aoColumns.length;                                                                        // 1299
			var iRowspan, iColspan;                                                                                           // 1300
		                                                                                                                   // 1301
			if (  bIncludeHidden === undefined )                                                                              // 1302
			{                                                                                                                 // 1303
				bIncludeHidden = false;                                                                                          // 1304
			}                                                                                                                 // 1305
		                                                                                                                   // 1306
			/* Make a copy of the master layout array, but without the visible columns in it */                               // 1307
			for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )                                                                  // 1308
			{                                                                                                                 // 1309
				aoLocal[i] = aoSource[i].slice();                                                                                // 1310
				aoLocal[i].nTr = aoSource[i].nTr;                                                                                // 1311
		                                                                                                                   // 1312
				/* Remove any columns which are currently hidden */                                                              // 1313
				for ( j=iColumns-1 ; j>=0 ; j-- )                                                                                // 1314
				{                                                                                                                // 1315
					if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )                                                      // 1316
					{                                                                                                               // 1317
						aoLocal[i].splice( j, 1 );                                                                                     // 1318
					}                                                                                                               // 1319
				}                                                                                                                // 1320
		                                                                                                                   // 1321
				/* Prep the applied array - it needs an element for each row */                                                  // 1322
				aApplied.push( [] );                                                                                             // 1323
			}                                                                                                                 // 1324
		                                                                                                                   // 1325
			for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )                                                                   // 1326
			{                                                                                                                 // 1327
				nLocalTr = aoLocal[i].nTr;                                                                                       // 1328
				                                                                                                                 // 1329
				/* All cells are going to be replaced, so empty out the row */                                                   // 1330
				if ( nLocalTr )                                                                                                  // 1331
				{                                                                                                                // 1332
					while( (n = nLocalTr.firstChild) )                                                                              // 1333
					{                                                                                                               // 1334
						nLocalTr.removeChild( n );                                                                                     // 1335
					}                                                                                                               // 1336
				}                                                                                                                // 1337
		                                                                                                                   // 1338
				for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )                                                               // 1339
				{                                                                                                                // 1340
					iRowspan = 1;                                                                                                   // 1341
					iColspan = 1;                                                                                                   // 1342
		                                                                                                                   // 1343
					/* Check to see if there is already a cell (row/colspan) covering our target                                    // 1344
					 * insert point. If there is, then there is nothing to do.                                                      // 1345
					 */                                                                                                             // 1346
					if ( aApplied[i][j] === undefined )                                                                             // 1347
					{                                                                                                               // 1348
						nLocalTr.appendChild( aoLocal[i][j].cell );                                                                    // 1349
						aApplied[i][j] = 1;                                                                                            // 1350
		                                                                                                                   // 1351
						/* Expand the cell to cover as many rows as needed */                                                          // 1352
						while ( aoLocal[i+iRowspan] !== undefined &&                                                                   // 1353
						        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )                                                    // 1354
						{                                                                                                              // 1355
							aApplied[i+iRowspan][j] = 1;                                                                                  // 1356
							iRowspan++;                                                                                                   // 1357
						}                                                                                                              // 1358
		                                                                                                                   // 1359
						/* Expand the cell to cover as many columns as needed */                                                       // 1360
						while ( aoLocal[i][j+iColspan] !== undefined &&                                                                // 1361
						        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )                                                    // 1362
						{                                                                                                              // 1363
							/* Must update the applied array over the rows for the columns */                                             // 1364
							for ( k=0 ; k<iRowspan ; k++ )                                                                                // 1365
							{                                                                                                             // 1366
								aApplied[i+k][j+iColspan] = 1;                                                                               // 1367
							}                                                                                                             // 1368
							iColspan++;                                                                                                   // 1369
						}                                                                                                              // 1370
		                                                                                                                   // 1371
						/* Do the actual expansion in the DOM */                                                                       // 1372
						aoLocal[i][j].cell.rowSpan = iRowspan;                                                                         // 1373
						aoLocal[i][j].cell.colSpan = iColspan;                                                                         // 1374
					}                                                                                                               // 1375
				}                                                                                                                // 1376
			}                                                                                                                 // 1377
		}                                                                                                                  // 1378
		                                                                                                                   // 1379
		                                                                                                                   // 1380
		/**                                                                                                                // 1381
		 * Insert the required TR nodes into the table for display                                                         // 1382
		 *  @param {object} oSettings dataTables settings object                                                           // 1383
		 *  @memberof DataTable#oApi                                                                                       // 1384
		 */                                                                                                                // 1385
		function _fnDraw( oSettings )                                                                                      // 1386
		{                                                                                                                  // 1387
			/* Provide a pre-callback function which can be used to cancel the draw is false is returned */                   // 1388
			var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );                         // 1389
			if ( $.inArray( false, aPreDraw ) !== -1 )                                                                        // 1390
			{                                                                                                                 // 1391
				_fnProcessingDisplay( oSettings, false );                                                                        // 1392
				return;                                                                                                          // 1393
			}                                                                                                                 // 1394
			                                                                                                                  // 1395
			var i, iLen, n;                                                                                                   // 1396
			var anRows = [];                                                                                                  // 1397
			var iRowCount = 0;                                                                                                // 1398
			var iStripes = oSettings.asStripeClasses.length;                                                                  // 1399
			var iOpenRows = oSettings.aoOpenRows.length;                                                                      // 1400
			                                                                                                                  // 1401
			oSettings.bDrawing = true;                                                                                        // 1402
			                                                                                                                  // 1403
			/* Check and see if we have an initial draw position from state saving */                                         // 1404
			if ( oSettings.iInitDisplayStart !== undefined && oSettings.iInitDisplayStart != -1 )                             // 1405
			{                                                                                                                 // 1406
				if ( oSettings.oFeatures.bServerSide )                                                                           // 1407
				{                                                                                                                // 1408
					oSettings._iDisplayStart = oSettings.iInitDisplayStart;                                                         // 1409
				}                                                                                                                // 1410
				else                                                                                                             // 1411
				{                                                                                                                // 1412
					oSettings._iDisplayStart = (oSettings.iInitDisplayStart >= oSettings.fnRecordsDisplay()) ?                      // 1413
						0 : oSettings.iInitDisplayStart;                                                                               // 1414
				}                                                                                                                // 1415
				oSettings.iInitDisplayStart = -1;                                                                                // 1416
				_fnCalculateEnd( oSettings );                                                                                    // 1417
			}                                                                                                                 // 1418
			                                                                                                                  // 1419
			/* Server-side processing draw intercept */                                                                       // 1420
			if ( oSettings.bDeferLoading )                                                                                    // 1421
			{                                                                                                                 // 1422
				oSettings.bDeferLoading = false;                                                                                 // 1423
				oSettings.iDraw++;                                                                                               // 1424
			}                                                                                                                 // 1425
			else if ( !oSettings.oFeatures.bServerSide )                                                                      // 1426
			{                                                                                                                 // 1427
				oSettings.iDraw++;                                                                                               // 1428
			}                                                                                                                 // 1429
			else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )                                                 // 1430
			{                                                                                                                 // 1431
				return;                                                                                                          // 1432
			}                                                                                                                 // 1433
			                                                                                                                  // 1434
			if ( oSettings.aiDisplay.length !== 0 )                                                                           // 1435
			{                                                                                                                 // 1436
				var iStart = oSettings._iDisplayStart;                                                                           // 1437
				var iEnd = oSettings._iDisplayEnd;                                                                               // 1438
				                                                                                                                 // 1439
				if ( oSettings.oFeatures.bServerSide )                                                                           // 1440
				{                                                                                                                // 1441
					iStart = 0;                                                                                                     // 1442
					iEnd = oSettings.aoData.length;                                                                                 // 1443
				}                                                                                                                // 1444
				                                                                                                                 // 1445
				for ( var j=iStart ; j<iEnd ; j++ )                                                                              // 1446
				{                                                                                                                // 1447
					var aoData = oSettings.aoData[ oSettings.aiDisplay[j] ];                                                        // 1448
					if ( aoData.nTr === null )                                                                                      // 1449
					{                                                                                                               // 1450
						_fnCreateTr( oSettings, oSettings.aiDisplay[j] );                                                              // 1451
					}                                                                                                               // 1452
		                                                                                                                   // 1453
					var nRow = aoData.nTr;                                                                                          // 1454
					                                                                                                                // 1455
					/* Remove the old striping classes and then add the new one */                                                  // 1456
					if ( iStripes !== 0 )                                                                                           // 1457
					{                                                                                                               // 1458
						var sStripe = oSettings.asStripeClasses[ iRowCount % iStripes ];                                               // 1459
						if ( aoData._sRowStripe != sStripe )                                                                           // 1460
						{                                                                                                              // 1461
							$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );                                                // 1462
							aoData._sRowStripe = sStripe;                                                                                 // 1463
						}                                                                                                              // 1464
					}                                                                                                               // 1465
					                                                                                                                // 1466
					/* Row callback functions - might want to manipulate the row */                                                 // 1467
					_fnCallbackFire( oSettings, 'aoRowCallback', null,                                                              // 1468
						[nRow, oSettings.aoData[ oSettings.aiDisplay[j] ]._aData, iRowCount, j] );                                     // 1469
					                                                                                                                // 1470
					anRows.push( nRow );                                                                                            // 1471
					iRowCount++;                                                                                                    // 1472
					                                                                                                                // 1473
					/* If there is an open row - and it is attached to this parent - attach it on redraw */                         // 1474
					if ( iOpenRows !== 0 )                                                                                          // 1475
					{                                                                                                               // 1476
						for ( var k=0 ; k<iOpenRows ; k++ )                                                                            // 1477
						{                                                                                                              // 1478
							if ( nRow == oSettings.aoOpenRows[k].nParent )                                                                // 1479
							{                                                                                                             // 1480
								anRows.push( oSettings.aoOpenRows[k].nTr );                                                                  // 1481
								break;                                                                                                       // 1482
							}                                                                                                             // 1483
						}                                                                                                              // 1484
					}                                                                                                               // 1485
				}                                                                                                                // 1486
			}                                                                                                                 // 1487
			else                                                                                                              // 1488
			{                                                                                                                 // 1489
				/* Table is empty - create a row with an empty message in it */                                                  // 1490
				anRows[ 0 ] = document.createElement( 'tr' );                                                                    // 1491
				                                                                                                                 // 1492
				if ( oSettings.asStripeClasses[0] )                                                                              // 1493
				{                                                                                                                // 1494
					anRows[ 0 ].className = oSettings.asStripeClasses[0];                                                           // 1495
				}                                                                                                                // 1496
		                                                                                                                   // 1497
				var oLang = oSettings.oLanguage;                                                                                 // 1498
				var sZero = oLang.sZeroRecords;                                                                                  // 1499
				if ( oSettings.iDraw == 1 && oSettings.sAjaxSource !== null && !oSettings.oFeatures.bServerSide )                // 1500
				{                                                                                                                // 1501
					sZero = oLang.sLoadingRecords;                                                                                  // 1502
				}                                                                                                                // 1503
				else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )                                                // 1504
				{                                                                                                                // 1505
					sZero = oLang.sEmptyTable;                                                                                      // 1506
				}                                                                                                                // 1507
		                                                                                                                   // 1508
				var nTd = document.createElement( 'td' );                                                                        // 1509
				nTd.setAttribute( 'valign', "top" );                                                                             // 1510
				nTd.colSpan = _fnVisbleColumns( oSettings );                                                                     // 1511
				nTd.className = oSettings.oClasses.sRowEmpty;                                                                    // 1512
				nTd.innerHTML = _fnInfoMacros( oSettings, sZero );                                                               // 1513
				                                                                                                                 // 1514
				anRows[ iRowCount ].appendChild( nTd );                                                                          // 1515
			}                                                                                                                 // 1516
			                                                                                                                  // 1517
			/* Header and footer callbacks */                                                                                 // 1518
			_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],                // 1519
				_fnGetDataMaster( oSettings ), oSettings._iDisplayStart, oSettings.fnDisplayEnd(), oSettings.aiDisplay ] );      // 1520
			                                                                                                                  // 1521
			_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],                // 1522
				_fnGetDataMaster( oSettings ), oSettings._iDisplayStart, oSettings.fnDisplayEnd(), oSettings.aiDisplay ] );      // 1523
			                                                                                                                  // 1524
			/*                                                                                                                // 1525
			 * Need to remove any old row from the display - note we can't just empty the tbody using                         // 1526
			 * $().html('') since this will unbind the jQuery event handlers (even although the node                          // 1527
			 * still exists!) - equally we can't use innerHTML, since IE throws an exception.                                 // 1528
			 */                                                                                                               // 1529
			var                                                                                                               // 1530
				nAddFrag = document.createDocumentFragment(),                                                                    // 1531
				nRemoveFrag = document.createDocumentFragment(),                                                                 // 1532
				nBodyPar, nTrs;                                                                                                  // 1533
			                                                                                                                  // 1534
			if ( oSettings.nTBody )                                                                                           // 1535
			{                                                                                                                 // 1536
				nBodyPar = oSettings.nTBody.parentNode;                                                                          // 1537
				nRemoveFrag.appendChild( oSettings.nTBody );                                                                     // 1538
				                                                                                                                 // 1539
				/* When doing infinite scrolling, only remove child rows when sorting, filtering or start                        // 1540
				 * up. When not infinite scroll, always do it.                                                                   // 1541
				 */                                                                                                              // 1542
				if ( !oSettings.oScroll.bInfinite || !oSettings._bInitComplete ||                                                // 1543
				 	oSettings.bSorted || oSettings.bFiltered )                                                                     // 1544
				{                                                                                                                // 1545
					while( (n = oSettings.nTBody.firstChild) )                                                                      // 1546
					{                                                                                                               // 1547
						oSettings.nTBody.removeChild( n );                                                                             // 1548
					}                                                                                                               // 1549
				}                                                                                                                // 1550
				                                                                                                                 // 1551
				/* Put the draw table into the dom */                                                                            // 1552
				for ( i=0, iLen=anRows.length ; i<iLen ; i++ )                                                                   // 1553
				{                                                                                                                // 1554
					nAddFrag.appendChild( anRows[i] );                                                                              // 1555
				}                                                                                                                // 1556
				                                                                                                                 // 1557
				oSettings.nTBody.appendChild( nAddFrag );                                                                        // 1558
				if ( nBodyPar !== null )                                                                                         // 1559
				{                                                                                                                // 1560
					nBodyPar.appendChild( oSettings.nTBody );                                                                       // 1561
				}                                                                                                                // 1562
			}                                                                                                                 // 1563
			                                                                                                                  // 1564
			/* Call all required callback functions for the end of a draw */                                                  // 1565
			_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );                                              // 1566
			                                                                                                                  // 1567
			/* Draw is complete, sorting and filtering must be as well */                                                     // 1568
			oSettings.bSorted = false;                                                                                        // 1569
			oSettings.bFiltered = false;                                                                                      // 1570
			oSettings.bDrawing = false;                                                                                       // 1571
			                                                                                                                  // 1572
			if ( oSettings.oFeatures.bServerSide )                                                                            // 1573
			{                                                                                                                 // 1574
				_fnProcessingDisplay( oSettings, false );                                                                        // 1575
				if ( !oSettings._bInitComplete )                                                                                 // 1576
				{                                                                                                                // 1577
					_fnInitComplete( oSettings );                                                                                   // 1578
				}                                                                                                                // 1579
			}                                                                                                                 // 1580
		}                                                                                                                  // 1581
		                                                                                                                   // 1582
		                                                                                                                   // 1583
		/**                                                                                                                // 1584
		 * Redraw the table - taking account of the various features which are enabled                                     // 1585
		 *  @param {object} oSettings dataTables settings object                                                           // 1586
		 *  @memberof DataTable#oApi                                                                                       // 1587
		 */                                                                                                                // 1588
		function _fnReDraw( oSettings )                                                                                    // 1589
		{                                                                                                                  // 1590
			if ( oSettings.oFeatures.bSort )                                                                                  // 1591
			{                                                                                                                 // 1592
				/* Sorting will refilter and draw for us */                                                                      // 1593
				_fnSort( oSettings, oSettings.oPreviousSearch );                                                                 // 1594
			}                                                                                                                 // 1595
			else if ( oSettings.oFeatures.bFilter )                                                                           // 1596
			{                                                                                                                 // 1597
				/* Filtering will redraw for us */                                                                               // 1598
				_fnFilterComplete( oSettings, oSettings.oPreviousSearch );                                                       // 1599
			}                                                                                                                 // 1600
			else                                                                                                              // 1601
			{                                                                                                                 // 1602
				_fnCalculateEnd( oSettings );                                                                                    // 1603
				_fnDraw( oSettings );                                                                                            // 1604
			}                                                                                                                 // 1605
		}                                                                                                                  // 1606
		                                                                                                                   // 1607
		                                                                                                                   // 1608
		/**                                                                                                                // 1609
		 * Add the options to the page HTML for the table                                                                  // 1610
		 *  @param {object} oSettings dataTables settings object                                                           // 1611
		 *  @memberof DataTable#oApi                                                                                       // 1612
		 */                                                                                                                // 1613
		function _fnAddOptionsHtml ( oSettings )                                                                           // 1614
		{                                                                                                                  // 1615
			/*                                                                                                                // 1616
			 * Create a temporary, empty, div which we can later on replace with what we have generated                       // 1617
			 * we do it this way to rendering the 'options' html offline - speed :-)                                          // 1618
			 */                                                                                                               // 1619
			var nHolding = $('<div></div>')[0];                                                                               // 1620
			oSettings.nTable.parentNode.insertBefore( nHolding, oSettings.nTable );                                           // 1621
			                                                                                                                  // 1622
			/*                                                                                                                // 1623
			 * All DataTables are wrapped in a div                                                                            // 1624
			 */                                                                                                               // 1625
			oSettings.nTableWrapper = $('<div id="'+oSettings.sTableId+'_wrapper" class="'+oSettings.oClasses.sWrapper+'" role="grid"></div>')[0];
			oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;                                                    // 1627
		                                                                                                                   // 1628
			/* Track where we want to insert the option */                                                                    // 1629
			var nInsertNode = oSettings.nTableWrapper;                                                                        // 1630
			                                                                                                                  // 1631
			/* Loop over the user set positioning and place the elements as needed */                                         // 1632
			var aDom = oSettings.sDom.split('');                                                                              // 1633
			var nTmp, iPushFeature, cOption, nNewNode, cNext, sAttr, j;                                                       // 1634
			for ( var i=0 ; i<aDom.length ; i++ )                                                                             // 1635
			{                                                                                                                 // 1636
				iPushFeature = 0;                                                                                                // 1637
				cOption = aDom[i];                                                                                               // 1638
				                                                                                                                 // 1639
				if ( cOption == '<' )                                                                                            // 1640
				{                                                                                                                // 1641
					/* New container div */                                                                                         // 1642
					nNewNode = $('<div></div>')[0];                                                                                 // 1643
					                                                                                                                // 1644
					/* Check to see if we should append an id and/or a class name to the container */                               // 1645
					cNext = aDom[i+1];                                                                                              // 1646
					if ( cNext == "'" || cNext == '"' )                                                                             // 1647
					{                                                                                                               // 1648
						sAttr = "";                                                                                                    // 1649
						j = 2;                                                                                                         // 1650
						while ( aDom[i+j] != cNext )                                                                                   // 1651
						{                                                                                                              // 1652
							sAttr += aDom[i+j];                                                                                           // 1653
							j++;                                                                                                          // 1654
						}                                                                                                              // 1655
						                                                                                                               // 1656
						/* Replace jQuery UI constants */                                                                              // 1657
						if ( sAttr == "H" )                                                                                            // 1658
						{                                                                                                              // 1659
							sAttr = oSettings.oClasses.sJUIHeader;                                                                        // 1660
						}                                                                                                              // 1661
						else if ( sAttr == "F" )                                                                                       // 1662
						{                                                                                                              // 1663
							sAttr = oSettings.oClasses.sJUIFooter;                                                                        // 1664
						}                                                                                                              // 1665
						                                                                                                               // 1666
						/* The attribute can be in the format of "#id.class", "#id" or "class" This logic                              // 1667
						 * breaks the string into parts and applies them as needed                                                     // 1668
						 */                                                                                                            // 1669
						if ( sAttr.indexOf('.') != -1 )                                                                                // 1670
						{                                                                                                              // 1671
							var aSplit = sAttr.split('.');                                                                                // 1672
							nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);                                                        // 1673
							nNewNode.className = aSplit[1];                                                                               // 1674
						}                                                                                                              // 1675
						else if ( sAttr.charAt(0) == "#" )                                                                             // 1676
						{                                                                                                              // 1677
							nNewNode.id = sAttr.substr(1, sAttr.length-1);                                                                // 1678
						}                                                                                                              // 1679
						else                                                                                                           // 1680
						{                                                                                                              // 1681
							nNewNode.className = sAttr;                                                                                   // 1682
						}                                                                                                              // 1683
						                                                                                                               // 1684
						i += j; /* Move along the position array */                                                                    // 1685
					}                                                                                                               // 1686
					                                                                                                                // 1687
					nInsertNode.appendChild( nNewNode );                                                                            // 1688
					nInsertNode = nNewNode;                                                                                         // 1689
				}                                                                                                                // 1690
				else if ( cOption == '>' )                                                                                       // 1691
				{                                                                                                                // 1692
					/* End container div */                                                                                         // 1693
					nInsertNode = nInsertNode.parentNode;                                                                           // 1694
				}                                                                                                                // 1695
				else if ( cOption == 'l' && oSettings.oFeatures.bPaginate && oSettings.oFeatures.bLengthChange )                 // 1696
				{                                                                                                                // 1697
					/* Length */                                                                                                    // 1698
					nTmp = _fnFeatureHtmlLength( oSettings );                                                                       // 1699
					iPushFeature = 1;                                                                                               // 1700
				}                                                                                                                // 1701
				else if ( cOption == 'f' && oSettings.oFeatures.bFilter )                                                        // 1702
				{                                                                                                                // 1703
					/* Filter */                                                                                                    // 1704
					nTmp = _fnFeatureHtmlFilter( oSettings );                                                                       // 1705
					iPushFeature = 1;                                                                                               // 1706
				}                                                                                                                // 1707
				else if ( cOption == 'r' && oSettings.oFeatures.bProcessing )                                                    // 1708
				{                                                                                                                // 1709
					/* pRocessing */                                                                                                // 1710
					nTmp = _fnFeatureHtmlProcessing( oSettings );                                                                   // 1711
					iPushFeature = 1;                                                                                               // 1712
				}                                                                                                                // 1713
				else if ( cOption == 't' )                                                                                       // 1714
				{                                                                                                                // 1715
					/* Table */                                                                                                     // 1716
					nTmp = _fnFeatureHtmlTable( oSettings );                                                                        // 1717
					iPushFeature = 1;                                                                                               // 1718
				}                                                                                                                // 1719
				else if ( cOption ==  'i' && oSettings.oFeatures.bInfo )                                                         // 1720
				{                                                                                                                // 1721
					/* Info */                                                                                                      // 1722
					nTmp = _fnFeatureHtmlInfo( oSettings );                                                                         // 1723
					iPushFeature = 1;                                                                                               // 1724
				}                                                                                                                // 1725
				else if ( cOption == 'p' && oSettings.oFeatures.bPaginate )                                                      // 1726
				{                                                                                                                // 1727
					/* Pagination */                                                                                                // 1728
					nTmp = _fnFeatureHtmlPaginate( oSettings );                                                                     // 1729
					iPushFeature = 1;                                                                                               // 1730
				}                                                                                                                // 1731
				else if ( DataTable.ext.aoFeatures.length !== 0 )                                                                // 1732
				{                                                                                                                // 1733
					/* Plug-in features */                                                                                          // 1734
					var aoFeatures = DataTable.ext.aoFeatures;                                                                      // 1735
					for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )                                                          // 1736
					{                                                                                                               // 1737
						if ( cOption == aoFeatures[k].cFeature )                                                                       // 1738
						{                                                                                                              // 1739
							nTmp = aoFeatures[k].fnInit( oSettings );                                                                     // 1740
							if ( nTmp )                                                                                                   // 1741
							{                                                                                                             // 1742
								iPushFeature = 1;                                                                                            // 1743
							}                                                                                                             // 1744
							break;                                                                                                        // 1745
						}                                                                                                              // 1746
					}                                                                                                               // 1747
				}                                                                                                                // 1748
				                                                                                                                 // 1749
				/* Add to the 2D features array */                                                                               // 1750
				if ( iPushFeature == 1 && nTmp !== null )                                                                        // 1751
				{                                                                                                                // 1752
					if ( typeof oSettings.aanFeatures[cOption] !== 'object' )                                                       // 1753
					{                                                                                                               // 1754
						oSettings.aanFeatures[cOption] = [];                                                                           // 1755
					}                                                                                                               // 1756
					oSettings.aanFeatures[cOption].push( nTmp );                                                                    // 1757
					nInsertNode.appendChild( nTmp );                                                                                // 1758
				}                                                                                                                // 1759
			}                                                                                                                 // 1760
			                                                                                                                  // 1761
			/* Built our DOM structure - replace the holding div with what we want */                                         // 1762
			nHolding.parentNode.replaceChild( oSettings.nTableWrapper, nHolding );                                            // 1763
		}                                                                                                                  // 1764
		                                                                                                                   // 1765
		                                                                                                                   // 1766
		/**                                                                                                                // 1767
		 * Use the DOM source to create up an array of header cells. The idea here is to                                   // 1768
		 * create a layout grid (array) of rows x columns, which contains a reference                                      // 1769
		 * to the cell that that point in the grid (regardless of col/rowspan), such that                                  // 1770
		 * any column / row could be removed and the new grid constructed                                                  // 1771
		 *  @param array {object} aLayout Array to store the calculated layout in                                          // 1772
		 *  @param {node} nThead The header/footer element for the table                                                   // 1773
		 *  @memberof DataTable#oApi                                                                                       // 1774
		 */                                                                                                                // 1775
		function _fnDetectHeader ( aLayout, nThead )                                                                       // 1776
		{                                                                                                                  // 1777
			var nTrs = $(nThead).children('tr');                                                                              // 1778
			var nTr, nCell;                                                                                                   // 1779
			var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;                                                // 1780
			var bUnique;                                                                                                      // 1781
			var fnShiftCol = function ( a, i, j ) {                                                                           // 1782
				var k = a[i];                                                                                                    // 1783
		                while ( k[j] ) {                                                                                   // 1784
					j++;                                                                                                            // 1785
				}                                                                                                                // 1786
				return j;                                                                                                        // 1787
			};                                                                                                                // 1788
		                                                                                                                   // 1789
			aLayout.splice( 0, aLayout.length );                                                                              // 1790
			                                                                                                                  // 1791
			/* We know how many rows there are in the layout - so prep it */                                                  // 1792
			for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )                                                                      // 1793
			{                                                                                                                 // 1794
				aLayout.push( [] );                                                                                              // 1795
			}                                                                                                                 // 1796
			                                                                                                                  // 1797
			/* Calculate a layout array */                                                                                    // 1798
			for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )                                                                      // 1799
			{                                                                                                                 // 1800
				nTr = nTrs[i];                                                                                                   // 1801
				iColumn = 0;                                                                                                     // 1802
				                                                                                                                 // 1803
				/* For every cell in the row... */                                                                               // 1804
				nCell = nTr.firstChild;                                                                                          // 1805
				while ( nCell ) {                                                                                                // 1806
					if ( nCell.nodeName.toUpperCase() == "TD" ||                                                                    // 1807
					     nCell.nodeName.toUpperCase() == "TH" )                                                                     // 1808
					{                                                                                                               // 1809
						/* Get the col and rowspan attributes from the DOM and sanitise them */                                        // 1810
						iColspan = nCell.getAttribute('colspan') * 1;                                                                  // 1811
						iRowspan = nCell.getAttribute('rowspan') * 1;                                                                  // 1812
						iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;                                         // 1813
						iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;                                         // 1814
		                                                                                                                   // 1815
						/* There might be colspan cells already in this row, so shift our target                                       // 1816
						 * accordingly                                                                                                 // 1817
						 */                                                                                                            // 1818
						iColShifted = fnShiftCol( aLayout, i, iColumn );                                                               // 1819
						                                                                                                               // 1820
						/* Cache calculation for unique columns */                                                                     // 1821
						bUnique = iColspan === 1 ? true : false;                                                                       // 1822
						                                                                                                               // 1823
						/* If there is col / rowspan, copy the information into the layout grid */                                     // 1824
						for ( l=0 ; l<iColspan ; l++ )                                                                                 // 1825
						{                                                                                                              // 1826
							for ( k=0 ; k<iRowspan ; k++ )                                                                                // 1827
							{                                                                                                             // 1828
								aLayout[i+k][iColShifted+l] = {                                                                              // 1829
									"cell": nCell,                                                                                              // 1830
									"unique": bUnique                                                                                           // 1831
								};                                                                                                           // 1832
								aLayout[i+k].nTr = nTr;                                                                                      // 1833
							}                                                                                                             // 1834
						}                                                                                                              // 1835
					}                                                                                                               // 1836
					nCell = nCell.nextSibling;                                                                                      // 1837
				}                                                                                                                // 1838
			}                                                                                                                 // 1839
		}                                                                                                                  // 1840
		                                                                                                                   // 1841
		                                                                                                                   // 1842
		/**                                                                                                                // 1843
		 * Get an array of unique th elements, one for each column                                                         // 1844
		 *  @param {object} oSettings dataTables settings object                                                           // 1845
		 *  @param {node} nHeader automatically detect the layout from this node - optional                                // 1846
		 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional                                      // 1847
		 *  @returns array {node} aReturn list of unique th's                                                              // 1848
		 *  @memberof DataTable#oApi                                                                                       // 1849
		 */                                                                                                                // 1850
		function _fnGetUniqueThs ( oSettings, nHeader, aLayout )                                                           // 1851
		{                                                                                                                  // 1852
			var aReturn = [];                                                                                                 // 1853
			if ( !aLayout )                                                                                                   // 1854
			{                                                                                                                 // 1855
				aLayout = oSettings.aoHeader;                                                                                    // 1856
				if ( nHeader )                                                                                                   // 1857
				{                                                                                                                // 1858
					aLayout = [];                                                                                                   // 1859
					_fnDetectHeader( aLayout, nHeader );                                                                            // 1860
				}                                                                                                                // 1861
			}                                                                                                                 // 1862
		                                                                                                                   // 1863
			for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )                                                               // 1864
			{                                                                                                                 // 1865
				for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )                                                           // 1866
				{                                                                                                                // 1867
					if ( aLayout[i][j].unique &&                                                                                    // 1868
						 (!aReturn[j] || !oSettings.bSortCellsTop) )                                                                   // 1869
					{                                                                                                               // 1870
						aReturn[j] = aLayout[i][j].cell;                                                                               // 1871
					}                                                                                                               // 1872
				}                                                                                                                // 1873
			}                                                                                                                 // 1874
			                                                                                                                  // 1875
			return aReturn;                                                                                                   // 1876
		}                                                                                                                  // 1877
		                                                                                                                   // 1878
		                                                                                                                   // 1879
		                                                                                                                   // 1880
		/**                                                                                                                // 1881
		 * Update the table using an Ajax call                                                                             // 1882
		 *  @param {object} oSettings dataTables settings object                                                           // 1883
		 *  @returns {boolean} Block the table drawing or not                                                              // 1884
		 *  @memberof DataTable#oApi                                                                                       // 1885
		 */                                                                                                                // 1886
		function _fnAjaxUpdate( oSettings )                                                                                // 1887
		{                                                                                                                  // 1888
			if ( oSettings.bAjaxDataGet )                                                                                     // 1889
			{                                                                                                                 // 1890
				oSettings.iDraw++;                                                                                               // 1891
				_fnProcessingDisplay( oSettings, true );                                                                         // 1892
				var iColumns = oSettings.aoColumns.length;                                                                       // 1893
				var aoData = _fnAjaxParameters( oSettings );                                                                     // 1894
				_fnServerParams( oSettings, aoData );                                                                            // 1895
				                                                                                                                 // 1896
				oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, aoData,                                 // 1897
					function(json) {                                                                                                // 1898
						_fnAjaxUpdateDraw( oSettings, json );                                                                          // 1899
					}, oSettings );                                                                                                 // 1900
				return false;                                                                                                    // 1901
			}                                                                                                                 // 1902
			else                                                                                                              // 1903
			{                                                                                                                 // 1904
				return true;                                                                                                     // 1905
			}                                                                                                                 // 1906
		}                                                                                                                  // 1907
		                                                                                                                   // 1908
		                                                                                                                   // 1909
		/**                                                                                                                // 1910
		 * Build up the parameters in an object needed for a server-side processing request                                // 1911
		 *  @param {object} oSettings dataTables settings object                                                           // 1912
		 *  @returns {bool} block the table drawing or not                                                                 // 1913
		 *  @memberof DataTable#oApi                                                                                       // 1914
		 */                                                                                                                // 1915
		function _fnAjaxParameters( oSettings )                                                                            // 1916
		{                                                                                                                  // 1917
			var iColumns = oSettings.aoColumns.length;                                                                        // 1918
			var aoData = [], mDataProp, aaSort, aDataSort;                                                                    // 1919
			var i, j;                                                                                                         // 1920
			                                                                                                                  // 1921
			aoData.push( { "name": "sEcho",          "value": oSettings.iDraw } );                                            // 1922
			aoData.push( { "name": "iColumns",       "value": iColumns } );                                                   // 1923
			aoData.push( { "name": "sColumns",       "value": _fnColumnOrdering(oSettings) } );                               // 1924
			aoData.push( { "name": "iDisplayStart",  "value": oSettings._iDisplayStart } );                                   // 1925
			aoData.push( { "name": "iDisplayLength", "value": oSettings.oFeatures.bPaginate !== false ?                       // 1926
				oSettings._iDisplayLength : -1 } );                                                                              // 1927
				                                                                                                                 // 1928
			for ( i=0 ; i<iColumns ; i++ )                                                                                    // 1929
			{                                                                                                                 // 1930
			  mDataProp = oSettings.aoColumns[i].mData;                                                                       // 1931
				aoData.push( { "name": "mDataProp_"+i, "value": typeof(mDataProp)==="function" ? 'function' : mDataProp } );     // 1932
			}                                                                                                                 // 1933
			                                                                                                                  // 1934
			/* Filtering */                                                                                                   // 1935
			if ( oSettings.oFeatures.bFilter !== false )                                                                      // 1936
			{                                                                                                                 // 1937
				aoData.push( { "name": "sSearch", "value": oSettings.oPreviousSearch.sSearch } );                                // 1938
				aoData.push( { "name": "bRegex",  "value": oSettings.oPreviousSearch.bRegex } );                                 // 1939
				for ( i=0 ; i<iColumns ; i++ )                                                                                   // 1940
				{                                                                                                                // 1941
					aoData.push( { "name": "sSearch_"+i,     "value": oSettings.aoPreSearchCols[i].sSearch } );                     // 1942
					aoData.push( { "name": "bRegex_"+i,      "value": oSettings.aoPreSearchCols[i].bRegex } );                      // 1943
					aoData.push( { "name": "bSearchable_"+i, "value": oSettings.aoColumns[i].bSearchable } );                       // 1944
				}                                                                                                                // 1945
			}                                                                                                                 // 1946
			                                                                                                                  // 1947
			/* Sorting */                                                                                                     // 1948
			if ( oSettings.oFeatures.bSort !== false )                                                                        // 1949
			{                                                                                                                 // 1950
				var iCounter = 0;                                                                                                // 1951
		                                                                                                                   // 1952
				aaSort = ( oSettings.aaSortingFixed !== null ) ?                                                                 // 1953
					oSettings.aaSortingFixed.concat( oSettings.aaSorting ) :                                                        // 1954
					oSettings.aaSorting.slice();                                                                                    // 1955
				                                                                                                                 // 1956
				for ( i=0 ; i<aaSort.length ; i++ )                                                                              // 1957
				{                                                                                                                // 1958
					aDataSort = oSettings.aoColumns[ aaSort[i][0] ].aDataSort;                                                      // 1959
					                                                                                                                // 1960
					for ( j=0 ; j<aDataSort.length ; j++ )                                                                          // 1961
					{                                                                                                               // 1962
						aoData.push( { "name": "iSortCol_"+iCounter,  "value": aDataSort[j] } );                                       // 1963
						aoData.push( { "name": "sSortDir_"+iCounter,  "value": aaSort[i][1] } );                                       // 1964
						iCounter++;                                                                                                    // 1965
					}                                                                                                               // 1966
				}                                                                                                                // 1967
				aoData.push( { "name": "iSortingCols",   "value": iCounter } );                                                  // 1968
				                                                                                                                 // 1969
				for ( i=0 ; i<iColumns ; i++ )                                                                                   // 1970
				{                                                                                                                // 1971
					aoData.push( { "name": "bSortable_"+i,  "value": oSettings.aoColumns[i].bSortable } );                          // 1972
				}                                                                                                                // 1973
			}                                                                                                                 // 1974
			                                                                                                                  // 1975
			return aoData;                                                                                                    // 1976
		}                                                                                                                  // 1977
		                                                                                                                   // 1978
		                                                                                                                   // 1979
		/**                                                                                                                // 1980
		 * Add Ajax parameters from plug-ins                                                                               // 1981
		 *  @param {object} oSettings dataTables settings object                                                           // 1982
		 *  @param array {objects} aoData name/value pairs to send to the server                                           // 1983
		 *  @memberof DataTable#oApi                                                                                       // 1984
		 */                                                                                                                // 1985
		function _fnServerParams( oSettings, aoData )                                                                      // 1986
		{                                                                                                                  // 1987
			_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [aoData] );                                         // 1988
		}                                                                                                                  // 1989
		                                                                                                                   // 1990
		                                                                                                                   // 1991
		/**                                                                                                                // 1992
		 * Data the data from the server (nuking the old) and redraw the table                                             // 1993
		 *  @param {object} oSettings dataTables settings object                                                           // 1994
		 *  @param {object} json json data return from the server.                                                         // 1995
		 *  @param {string} json.sEcho Tracking flag for DataTables to match requests                                      // 1996
		 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering                // 1997
		 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering             // 1998
		 *  @param {array} json.aaData The data to display on this page                                                    // 1999
		 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)                                       // 2000
		 *  @memberof DataTable#oApi                                                                                       // 2001
		 */                                                                                                                // 2002
		function _fnAjaxUpdateDraw ( oSettings, json )                                                                     // 2003
		{                                                                                                                  // 2004
			if ( json.sEcho !== undefined )                                                                                   // 2005
			{                                                                                                                 // 2006
				/* Protect against old returns over-writing a new one. Possible when you get                                     // 2007
				 * very fast interaction, and later queries are completed much faster                                            // 2008
				 */                                                                                                              // 2009
				if ( json.sEcho*1 < oSettings.iDraw )                                                                            // 2010
				{                                                                                                                // 2011
					return;                                                                                                         // 2012
				}                                                                                                                // 2013
				else                                                                                                             // 2014
				{                                                                                                                // 2015
					oSettings.iDraw = json.sEcho * 1;                                                                               // 2016
				}                                                                                                                // 2017
			}                                                                                                                 // 2018
			                                                                                                                  // 2019
			if ( !oSettings.oScroll.bInfinite ||                                                                              // 2020
				   (oSettings.oScroll.bInfinite && (oSettings.bSorted || oSettings.bFiltered)) )                                 // 2021
			{                                                                                                                 // 2022
				_fnClearTable( oSettings );                                                                                      // 2023
			}                                                                                                                 // 2024
			oSettings._iRecordsTotal = parseInt(json.iTotalRecords, 10);                                                      // 2025
			oSettings._iRecordsDisplay = parseInt(json.iTotalDisplayRecords, 10);                                             // 2026
			                                                                                                                  // 2027
			/* Determine if reordering is required */                                                                         // 2028
			var sOrdering = _fnColumnOrdering(oSettings);                                                                     // 2029
			var bReOrder = (json.sColumns !== undefined && sOrdering !== "" && json.sColumns != sOrdering );                  // 2030
			var aiIndex;                                                                                                      // 2031
			if ( bReOrder )                                                                                                   // 2032
			{                                                                                                                 // 2033
				aiIndex = _fnReOrderIndex( oSettings, json.sColumns );                                                           // 2034
			}                                                                                                                 // 2035
			                                                                                                                  // 2036
			var aData = _fnGetObjectDataFn( oSettings.sAjaxDataProp )( json );                                                // 2037
			for ( var i=0, iLen=aData.length ; i<iLen ; i++ )                                                                 // 2038
			{                                                                                                                 // 2039
				if ( bReOrder )                                                                                                  // 2040
				{                                                                                                                // 2041
					/* If we need to re-order, then create a new array with the correct order and add it */                         // 2042
					var aDataSorted = [];                                                                                           // 2043
					for ( var j=0, jLen=oSettings.aoColumns.length ; j<jLen ; j++ )                                                 // 2044
					{                                                                                                               // 2045
						aDataSorted.push( aData[i][ aiIndex[j] ] );                                                                    // 2046
					}                                                                                                               // 2047
					_fnAddData( oSettings, aDataSorted );                                                                           // 2048
				}                                                                                                                // 2049
				else                                                                                                             // 2050
				{                                                                                                                // 2051
					/* No re-order required, sever got it "right" - just straight add */                                            // 2052
					_fnAddData( oSettings, aData[i] );                                                                              // 2053
				}                                                                                                                // 2054
			}                                                                                                                 // 2055
			oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();                                                          // 2056
			                                                                                                                  // 2057
			oSettings.bAjaxDataGet = false;                                                                                   // 2058
			_fnDraw( oSettings );                                                                                             // 2059
			oSettings.bAjaxDataGet = true;                                                                                    // 2060
			_fnProcessingDisplay( oSettings, false );                                                                         // 2061
		}                                                                                                                  // 2062
		                                                                                                                   // 2063
		                                                                                                                   // 2064
		                                                                                                                   // 2065
		/**                                                                                                                // 2066
		 * Generate the node required for filtering text                                                                   // 2067
		 *  @returns {node} Filter control element                                                                         // 2068
		 *  @param {object} oSettings dataTables settings object                                                           // 2069
		 *  @memberof DataTable#oApi                                                                                       // 2070
		 */                                                                                                                // 2071
		function _fnFeatureHtmlFilter ( oSettings )                                                                        // 2072
		{                                                                                                                  // 2073
			var oPreviousSearch = oSettings.oPreviousSearch;                                                                  // 2074
			                                                                                                                  // 2075
			var sSearchStr = oSettings.oLanguage.sSearch;                                                                     // 2076
			sSearchStr = (sSearchStr.indexOf('_INPUT_') !== -1) ?                                                             // 2077
			  sSearchStr.replace('_INPUT_', '<input type="text" />') :                                                        // 2078
			  sSearchStr==="" ? '<input type="text" />' : sSearchStr+' <input type="text" />';                                // 2079
			                                                                                                                  // 2080
			var nFilter = document.createElement( 'div' );                                                                    // 2081
			nFilter.className = oSettings.oClasses.sFilter;                                                                   // 2082
			nFilter.innerHTML = '<label>'+sSearchStr+'</label>';                                                              // 2083
			if ( !oSettings.aanFeatures.f )                                                                                   // 2084
			{                                                                                                                 // 2085
				nFilter.id = oSettings.sTableId+'_filter';                                                                       // 2086
			}                                                                                                                 // 2087
			                                                                                                                  // 2088
			var jqFilter = $('input[type="text"]', nFilter);                                                                  // 2089
		                                                                                                                   // 2090
			// Store a reference to the input element, so other input elements could be                                       // 2091
			// added to the filter wrapper if needed (submit button for example)                                              // 2092
			nFilter._DT_Input = jqFilter[0];                                                                                  // 2093
		                                                                                                                   // 2094
			jqFilter.val( oPreviousSearch.sSearch.replace('"','&quot;') );                                                    // 2095
			jqFilter.bind( 'keyup.DT', function(e) {                                                                          // 2096
				/* Update all other filter input elements for the new display */                                                 // 2097
				var n = oSettings.aanFeatures.f;                                                                                 // 2098
				var val = this.value==="" ? "" : this.value; // mental IE8 fix :-(                                               // 2099
		                                                                                                                   // 2100
				for ( var i=0, iLen=n.length ; i<iLen ; i++ )                                                                    // 2101
				{                                                                                                                // 2102
					if ( n[i] != $(this).parents('div.dataTables_filter')[0] )                                                      // 2103
					{                                                                                                               // 2104
						$(n[i]._DT_Input).val( val );                                                                                  // 2105
					}                                                                                                               // 2106
				}                                                                                                                // 2107
				                                                                                                                 // 2108
				/* Now do the filter */                                                                                          // 2109
				if ( val != oPreviousSearch.sSearch )                                                                            // 2110
				{                                                                                                                // 2111
					_fnFilterComplete( oSettings, {                                                                                 // 2112
						"sSearch": val,                                                                                                // 2113
						"bRegex": oPreviousSearch.bRegex,                                                                              // 2114
						"bSmart": oPreviousSearch.bSmart ,                                                                             // 2115
						"bCaseInsensitive": oPreviousSearch.bCaseInsensitive                                                           // 2116
					} );                                                                                                            // 2117
				}                                                                                                                // 2118
			} );                                                                                                              // 2119
		                                                                                                                   // 2120
			jqFilter                                                                                                          // 2121
				.attr('aria-controls', oSettings.sTableId)                                                                       // 2122
				.bind( 'keypress.DT', function(e) {                                                                              // 2123
					/* Prevent form submission */                                                                                   // 2124
					if ( e.keyCode == 13 )                                                                                          // 2125
					{                                                                                                               // 2126
						return false;                                                                                                  // 2127
					}                                                                                                               // 2128
				}                                                                                                                // 2129
			);                                                                                                                // 2130
			                                                                                                                  // 2131
			return nFilter;                                                                                                   // 2132
		}                                                                                                                  // 2133
		                                                                                                                   // 2134
		                                                                                                                   // 2135
		/**                                                                                                                // 2136
		 * Filter the table using both the global filter and column based filtering                                        // 2137
		 *  @param {object} oSettings dataTables settings object                                                           // 2138
		 *  @param {object} oSearch search information                                                                     // 2139
		 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)                         // 2140
		 *  @memberof DataTable#oApi                                                                                       // 2141
		 */                                                                                                                // 2142
		function _fnFilterComplete ( oSettings, oInput, iForce )                                                           // 2143
		{                                                                                                                  // 2144
			var oPrevSearch = oSettings.oPreviousSearch;                                                                      // 2145
			var aoPrevSearch = oSettings.aoPreSearchCols;                                                                     // 2146
			var fnSaveFilter = function ( oFilter ) {                                                                         // 2147
				/* Save the filtering values */                                                                                  // 2148
				oPrevSearch.sSearch = oFilter.sSearch;                                                                           // 2149
				oPrevSearch.bRegex = oFilter.bRegex;                                                                             // 2150
				oPrevSearch.bSmart = oFilter.bSmart;                                                                             // 2151
				oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;                                                         // 2152
			};                                                                                                                // 2153
		                                                                                                                   // 2154
			/* In server-side processing all filtering is done by the server, so no point hanging around here */              // 2155
			if ( !oSettings.oFeatures.bServerSide )                                                                           // 2156
			{                                                                                                                 // 2157
				/* Global filter */                                                                                              // 2158
				_fnFilter( oSettings, oInput.sSearch, iForce, oInput.bRegex, oInput.bSmart, oInput.bCaseInsensitive );           // 2159
				fnSaveFilter( oInput );                                                                                          // 2160
		                                                                                                                   // 2161
				/* Now do the individual column filter */                                                                        // 2162
				for ( var i=0 ; i<oSettings.aoPreSearchCols.length ; i++ )                                                       // 2163
				{                                                                                                                // 2164
					_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, aoPrevSearch[i].bRegex,                                 // 2165
						aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );                                                    // 2166
				}                                                                                                                // 2167
				                                                                                                                 // 2168
				/* Custom filtering */                                                                                           // 2169
				_fnFilterCustom( oSettings );                                                                                    // 2170
			}                                                                                                                 // 2171
			else                                                                                                              // 2172
			{                                                                                                                 // 2173
				fnSaveFilter( oInput );                                                                                          // 2174
			}                                                                                                                 // 2175
			                                                                                                                  // 2176
			/* Tell the draw function we have been filtering */                                                               // 2177
			oSettings.bFiltered = true;                                                                                       // 2178
			$(oSettings.oInstance).trigger('filter', oSettings);                                                              // 2179
			                                                                                                                  // 2180
			/* Redraw the table */                                                                                            // 2181
			oSettings._iDisplayStart = 0;                                                                                     // 2182
			_fnCalculateEnd( oSettings );                                                                                     // 2183
			_fnDraw( oSettings );                                                                                             // 2184
			                                                                                                                  // 2185
			/* Rebuild search array 'offline' */                                                                              // 2186
			_fnBuildSearchArray( oSettings, 0 );                                                                              // 2187
		}                                                                                                                  // 2188
		                                                                                                                   // 2189
		                                                                                                                   // 2190
		/**                                                                                                                // 2191
		 * Apply custom filtering functions                                                                                // 2192
		 *  @param {object} oSettings dataTables settings object                                                           // 2193
		 *  @memberof DataTable#oApi                                                                                       // 2194
		 */                                                                                                                // 2195
		function _fnFilterCustom( oSettings )                                                                              // 2196
		{                                                                                                                  // 2197
			var afnFilters = DataTable.ext.afnFiltering;                                                                      // 2198
			var aiFilterColumns = _fnGetColumns( oSettings, 'bSearchable' );                                                  // 2199
		                                                                                                                   // 2200
			for ( var i=0, iLen=afnFilters.length ; i<iLen ; i++ )                                                            // 2201
			{                                                                                                                 // 2202
				var iCorrector = 0;                                                                                              // 2203
				for ( var j=0, jLen=oSettings.aiDisplay.length ; j<jLen ; j++ )                                                  // 2204
				{                                                                                                                // 2205
					var iDisIndex = oSettings.aiDisplay[j-iCorrector];                                                              // 2206
					var bTest = afnFilters[i](                                                                                      // 2207
						oSettings,                                                                                                     // 2208
						_fnGetRowData( oSettings, iDisIndex, 'filter', aiFilterColumns ),                                              // 2209
						iDisIndex                                                                                                      // 2210
					);                                                                                                              // 2211
					                                                                                                                // 2212
					/* Check if we should use this row based on the filtering function */                                           // 2213
					if ( !bTest )                                                                                                   // 2214
					{                                                                                                               // 2215
						oSettings.aiDisplay.splice( j-iCorrector, 1 );                                                                 // 2216
						iCorrector++;                                                                                                  // 2217
					}                                                                                                               // 2218
				}                                                                                                                // 2219
			}                                                                                                                 // 2220
		}                                                                                                                  // 2221
		                                                                                                                   // 2222
		                                                                                                                   // 2223
		/**                                                                                                                // 2224
		 * Filter the table on a per-column basis                                                                          // 2225
		 *  @param {object} oSettings dataTables settings object                                                           // 2226
		 *  @param {string} sInput string to filter on                                                                     // 2227
		 *  @param {int} iColumn column to filter                                                                          // 2228
		 *  @param {bool} bRegex treat search string as a regular expression or not                                        // 2229
		 *  @param {bool} bSmart use smart filtering or not                                                                // 2230
		 *  @param {bool} bCaseInsensitive Do case insenstive matching or not                                              // 2231
		 *  @memberof DataTable#oApi                                                                                       // 2232
		 */                                                                                                                // 2233
		function _fnFilterColumn ( oSettings, sInput, iColumn, bRegex, bSmart, bCaseInsensitive )                          // 2234
		{                                                                                                                  // 2235
			if ( sInput === "" )                                                                                              // 2236
			{                                                                                                                 // 2237
				return;                                                                                                          // 2238
			}                                                                                                                 // 2239
			                                                                                                                  // 2240
			var iIndexCorrector = 0;                                                                                          // 2241
			var rpSearch = _fnFilterCreateSearch( sInput, bRegex, bSmart, bCaseInsensitive );                                 // 2242
			                                                                                                                  // 2243
			for ( var i=oSettings.aiDisplay.length-1 ; i>=0 ; i-- )                                                           // 2244
			{                                                                                                                 // 2245
				var sData = _fnDataToSearch( _fnGetCellData( oSettings, oSettings.aiDisplay[i], iColumn, 'filter' ),             // 2246
					oSettings.aoColumns[iColumn].sType );                                                                           // 2247
				if ( ! rpSearch.test( sData ) )                                                                                  // 2248
				{                                                                                                                // 2249
					oSettings.aiDisplay.splice( i, 1 );                                                                             // 2250
					iIndexCorrector++;                                                                                              // 2251
				}                                                                                                                // 2252
			}                                                                                                                 // 2253
		}                                                                                                                  // 2254
		                                                                                                                   // 2255
		                                                                                                                   // 2256
		/**                                                                                                                // 2257
		 * Filter the data table based on user input and draw the table                                                    // 2258
		 *  @param {object} oSettings dataTables settings object                                                           // 2259
		 *  @param {string} sInput string to filter on                                                                     // 2260
		 *  @param {int} iForce optional - force a research of the master array (1) or not (undefined or 0)                // 2261
		 *  @param {bool} bRegex treat as a regular expression or not                                                      // 2262
		 *  @param {bool} bSmart perform smart filtering or not                                                            // 2263
		 *  @param {bool} bCaseInsensitive Do case insenstive matching or not                                              // 2264
		 *  @memberof DataTable#oApi                                                                                       // 2265
		 */                                                                                                                // 2266
		function _fnFilter( oSettings, sInput, iForce, bRegex, bSmart, bCaseInsensitive )                                  // 2267
		{                                                                                                                  // 2268
			var i;                                                                                                            // 2269
			var rpSearch = _fnFilterCreateSearch( sInput, bRegex, bSmart, bCaseInsensitive );                                 // 2270
			var oPrevSearch = oSettings.oPreviousSearch;                                                                      // 2271
			                                                                                                                  // 2272
			/* Check if we are forcing or not - optional parameter */                                                         // 2273
			if ( !iForce )                                                                                                    // 2274
			{                                                                                                                 // 2275
				iForce = 0;                                                                                                      // 2276
			}                                                                                                                 // 2277
			                                                                                                                  // 2278
			/* Need to take account of custom filtering functions - always filter */                                          // 2279
			if ( DataTable.ext.afnFiltering.length !== 0 )                                                                    // 2280
			{                                                                                                                 // 2281
				iForce = 1;                                                                                                      // 2282
			}                                                                                                                 // 2283
			                                                                                                                  // 2284
			/*                                                                                                                // 2285
			 * If the input is blank - we want the full data set                                                              // 2286
			 */                                                                                                               // 2287
			if ( sInput.length <= 0 )                                                                                         // 2288
			{                                                                                                                 // 2289
				oSettings.aiDisplay.splice( 0, oSettings.aiDisplay.length);                                                      // 2290
				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();                                                         // 2291
			}                                                                                                                 // 2292
			else                                                                                                              // 2293
			{                                                                                                                 // 2294
				/*                                                                                                               // 2295
				 * We are starting a new search or the new search string is smaller                                              // 2296
				 * then the old one (i.e. delete). Search from the master array                                                  // 2297
			 	 */                                                                                                             // 2298
				if ( oSettings.aiDisplay.length == oSettings.aiDisplayMaster.length ||                                           // 2299
					   oPrevSearch.sSearch.length > sInput.length || iForce == 1 ||                                                 // 2300
					   sInput.indexOf(oPrevSearch.sSearch) !== 0 )                                                                  // 2301
				{                                                                                                                // 2302
					/* Nuke the old display array - we are going to rebuild it */                                                   // 2303
					oSettings.aiDisplay.splice( 0, oSettings.aiDisplay.length);                                                     // 2304
					                                                                                                                // 2305
					/* Force a rebuild of the search array */                                                                       // 2306
					_fnBuildSearchArray( oSettings, 1 );                                                                            // 2307
					                                                                                                                // 2308
					/* Search through all records to populate the search array                                                      // 2309
					 * The the oSettings.aiDisplayMaster and asDataSearch arrays have 1 to 1                                        // 2310
					 * mapping                                                                                                      // 2311
					 */                                                                                                             // 2312
					for ( i=0 ; i<oSettings.aiDisplayMaster.length ; i++ )                                                          // 2313
					{                                                                                                               // 2314
						if ( rpSearch.test(oSettings.asDataSearch[i]) )                                                                // 2315
						{                                                                                                              // 2316
							oSettings.aiDisplay.push( oSettings.aiDisplayMaster[i] );                                                     // 2317
						}                                                                                                              // 2318
					}                                                                                                               // 2319
			  }                                                                                                               // 2320
			  else                                                                                                            // 2321
				{                                                                                                                // 2322
			  	/* Using old search array - refine it - do it this way for speed                                               // 2323
			  	 * Don't have to search the whole master array again                                                           // 2324
					 */                                                                                                             // 2325
			  	var iIndexCorrector = 0;                                                                                       // 2326
			  	                                                                                                               // 2327
			  	/* Search the current results */                                                                               // 2328
			  	for ( i=0 ; i<oSettings.asDataSearch.length ; i++ )                                                            // 2329
					{                                                                                                               // 2330
			  		if ( ! rpSearch.test(oSettings.asDataSearch[i]) )                                                             // 2331
						{                                                                                                              // 2332
			  			oSettings.aiDisplay.splice( i-iIndexCorrector, 1 );                                                          // 2333
			  			iIndexCorrector++;                                                                                           // 2334
			  		}                                                                                                             // 2335
			  	}                                                                                                              // 2336
			  }                                                                                                               // 2337
			}                                                                                                                 // 2338
		}                                                                                                                  // 2339
		                                                                                                                   // 2340
		                                                                                                                   // 2341
		/**                                                                                                                // 2342
		 * Create an array which can be quickly search through                                                             // 2343
		 *  @param {object} oSettings dataTables settings object                                                           // 2344
		 *  @param {int} iMaster use the master data array - optional                                                      // 2345
		 *  @memberof DataTable#oApi                                                                                       // 2346
		 */                                                                                                                // 2347
		function _fnBuildSearchArray ( oSettings, iMaster )                                                                // 2348
		{                                                                                                                  // 2349
			if ( !oSettings.oFeatures.bServerSide )                                                                           // 2350
			{                                                                                                                 // 2351
				/* Clear out the old data */                                                                                     // 2352
				oSettings.asDataSearch = [];                                                                                     // 2353
		                                                                                                                   // 2354
				var aiFilterColumns = _fnGetColumns( oSettings, 'bSearchable' );                                                 // 2355
				var aiIndex = (iMaster===1) ?                                                                                    // 2356
				 	oSettings.aiDisplayMaster :                                                                                    // 2357
				 	oSettings.aiDisplay;                                                                                           // 2358
				                                                                                                                 // 2359
				for ( var i=0, iLen=aiIndex.length ; i<iLen ; i++ )                                                              // 2360
				{                                                                                                                // 2361
					oSettings.asDataSearch[i] = _fnBuildSearchRow(                                                                  // 2362
						oSettings,                                                                                                     // 2363
						_fnGetRowData( oSettings, aiIndex[i], 'filter', aiFilterColumns )                                              // 2364
					);                                                                                                              // 2365
				}                                                                                                                // 2366
			}                                                                                                                 // 2367
		}                                                                                                                  // 2368
		                                                                                                                   // 2369
		                                                                                                                   // 2370
		/**                                                                                                                // 2371
		 * Create a searchable string from a single data row                                                               // 2372
		 *  @param {object} oSettings dataTables settings object                                                           // 2373
		 *  @param {array} aData Row data array to use for the data to search                                              // 2374
		 *  @memberof DataTable#oApi                                                                                       // 2375
		 */                                                                                                                // 2376
		function _fnBuildSearchRow( oSettings, aData )                                                                     // 2377
		{                                                                                                                  // 2378
			var sSearch = aData.join('  ');                                                                                   // 2379
			                                                                                                                  // 2380
			/* If it looks like there is an HTML entity in the string, attempt to decode it */                                // 2381
			if ( sSearch.indexOf('&') !== -1 )                                                                                // 2382
			{                                                                                                                 // 2383
				sSearch = $('<div>').html(sSearch).text();                                                                       // 2384
			}                                                                                                                 // 2385
			                                                                                                                  // 2386
			// Strip newline characters                                                                                       // 2387
			return sSearch.replace( /[\n\r]/g, " " );                                                                         // 2388
		}                                                                                                                  // 2389
		                                                                                                                   // 2390
		/**                                                                                                                // 2391
		 * Build a regular expression object suitable for searching a table                                                // 2392
		 *  @param {string} sSearch string to search for                                                                   // 2393
		 *  @param {bool} bRegex treat as a regular expression or not                                                      // 2394
		 *  @param {bool} bSmart perform smart filtering or not                                                            // 2395
		 *  @param {bool} bCaseInsensitive Do case insensitive matching or not                                             // 2396
		 *  @returns {RegExp} constructed object                                                                           // 2397
		 *  @memberof DataTable#oApi                                                                                       // 2398
		 */                                                                                                                // 2399
		function _fnFilterCreateSearch( sSearch, bRegex, bSmart, bCaseInsensitive )                                        // 2400
		{                                                                                                                  // 2401
			var asSearch, sRegExpString;                                                                                      // 2402
			                                                                                                                  // 2403
			if ( bSmart )                                                                                                     // 2404
			{                                                                                                                 // 2405
				/* Generate the regular expression to use. Something along the lines of:                                         // 2406
				 * ^(?=.*?\bone\b)(?=.*?\btwo\b)(?=.*?\bthree\b).*$                                                              // 2407
				 */                                                                                                              // 2408
				asSearch = bRegex ? sSearch.split( ' ' ) : _fnEscapeRegex( sSearch ).split( ' ' );                               // 2409
				sRegExpString = '^(?=.*?'+asSearch.join( ')(?=.*?' )+').*$';                                                     // 2410
				return new RegExp( sRegExpString, bCaseInsensitive ? "i" : "" );                                                 // 2411
			}                                                                                                                 // 2412
			else                                                                                                              // 2413
			{                                                                                                                 // 2414
				sSearch = bRegex ? sSearch : _fnEscapeRegex( sSearch );                                                          // 2415
				return new RegExp( sSearch, bCaseInsensitive ? "i" : "" );                                                       // 2416
			}                                                                                                                 // 2417
		}                                                                                                                  // 2418
		                                                                                                                   // 2419
		                                                                                                                   // 2420
		/**                                                                                                                // 2421
		 * Convert raw data into something that the user can search on                                                     // 2422
		 *  @param {string} sData data to be modified                                                                      // 2423
		 *  @param {string} sType data type                                                                                // 2424
		 *  @returns {string} search string                                                                                // 2425
		 *  @memberof DataTable#oApi                                                                                       // 2426
		 */                                                                                                                // 2427
		function _fnDataToSearch ( sData, sType )                                                                          // 2428
		{                                                                                                                  // 2429
			if ( typeof DataTable.ext.ofnSearch[sType] === "function" )                                                       // 2430
			{                                                                                                                 // 2431
				return DataTable.ext.ofnSearch[sType]( sData );                                                                  // 2432
			}                                                                                                                 // 2433
			else if ( sData === null )                                                                                        // 2434
			{                                                                                                                 // 2435
				return '';                                                                                                       // 2436
			}                                                                                                                 // 2437
			else if ( sType == "html" )                                                                                       // 2438
			{                                                                                                                 // 2439
				return sData.replace(/[\r\n]/g," ").replace( /<.*?>/g, "" );                                                     // 2440
			}                                                                                                                 // 2441
			else if ( typeof sData === "string" )                                                                             // 2442
			{                                                                                                                 // 2443
				return sData.replace(/[\r\n]/g," ");                                                                             // 2444
			}                                                                                                                 // 2445
			return sData;                                                                                                     // 2446
		}                                                                                                                  // 2447
		                                                                                                                   // 2448
		                                                                                                                   // 2449
		/**                                                                                                                // 2450
		 * scape a string such that it can be used in a regular expression                                                 // 2451
		 *  @param {string} sVal string to escape                                                                          // 2452
		 *  @returns {string} escaped string                                                                               // 2453
		 *  @memberof DataTable#oApi                                                                                       // 2454
		 */                                                                                                                // 2455
		function _fnEscapeRegex ( sVal )                                                                                   // 2456
		{                                                                                                                  // 2457
			var acEscape = [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ];               // 2458
			var reReplace = new RegExp( '(\\' + acEscape.join('|\\') + ')', 'g' );                                            // 2459
			return sVal.replace(reReplace, '\\$1');                                                                           // 2460
		}                                                                                                                  // 2461
		                                                                                                                   // 2462
		                                                                                                                   // 2463
		/**                                                                                                                // 2464
		 * Generate the node required for the info display                                                                 // 2465
		 *  @param {object} oSettings dataTables settings object                                                           // 2466
		 *  @returns {node} Information element                                                                            // 2467
		 *  @memberof DataTable#oApi                                                                                       // 2468
		 */                                                                                                                // 2469
		function _fnFeatureHtmlInfo ( oSettings )                                                                          // 2470
		{                                                                                                                  // 2471
			var nInfo = document.createElement( 'div' );                                                                      // 2472
			nInfo.className = oSettings.oClasses.sInfo;                                                                       // 2473
			                                                                                                                  // 2474
			/* Actions that are to be taken once only for this feature */                                                     // 2475
			if ( !oSettings.aanFeatures.i )                                                                                   // 2476
			{                                                                                                                 // 2477
				/* Add draw callback */                                                                                          // 2478
				oSettings.aoDrawCallback.push( {                                                                                 // 2479
					"fn": _fnUpdateInfo,                                                                                            // 2480
					"sName": "information"                                                                                          // 2481
				} );                                                                                                             // 2482
				                                                                                                                 // 2483
				/* Add id */                                                                                                     // 2484
				nInfo.id = oSettings.sTableId+'_info';                                                                           // 2485
			}                                                                                                                 // 2486
			oSettings.nTable.setAttribute( 'aria-describedby', oSettings.sTableId+'_info' );                                  // 2487
			                                                                                                                  // 2488
			return nInfo;                                                                                                     // 2489
		}                                                                                                                  // 2490
		                                                                                                                   // 2491
		                                                                                                                   // 2492
		/**                                                                                                                // 2493
		 * Update the information elements in the display                                                                  // 2494
		 *  @param {object} oSettings dataTables settings object                                                           // 2495
		 *  @memberof DataTable#oApi                                                                                       // 2496
		 */                                                                                                                // 2497
		function _fnUpdateInfo ( oSettings )                                                                               // 2498
		{                                                                                                                  // 2499
			/* Show information about the table */                                                                            // 2500
			if ( !oSettings.oFeatures.bInfo || oSettings.aanFeatures.i.length === 0 )                                         // 2501
			{                                                                                                                 // 2502
				return;                                                                                                          // 2503
			}                                                                                                                 // 2504
			                                                                                                                  // 2505
			var                                                                                                               // 2506
				oLang = oSettings.oLanguage,                                                                                     // 2507
				iStart = oSettings._iDisplayStart+1,                                                                             // 2508
				iEnd = oSettings.fnDisplayEnd(),                                                                                 // 2509
				iMax = oSettings.fnRecordsTotal(),                                                                               // 2510
				iTotal = oSettings.fnRecordsDisplay(),                                                                           // 2511
				sOut;                                                                                                            // 2512
			                                                                                                                  // 2513
			if ( iTotal === 0 )                                                                                               // 2514
			{                                                                                                                 // 2515
				/* Empty record set */                                                                                           // 2516
				sOut = oLang.sInfoEmpty;                                                                                         // 2517
			}                                                                                                                 // 2518
			else {                                                                                                            // 2519
				/* Normal record set */                                                                                          // 2520
				sOut = oLang.sInfo;                                                                                              // 2521
			}                                                                                                                 // 2522
		                                                                                                                   // 2523
			if ( iTotal != iMax )                                                                                             // 2524
			{                                                                                                                 // 2525
				/* Record set after filtering */                                                                                 // 2526
				sOut += ' ' + oLang.sInfoFiltered;                                                                               // 2527
			}                                                                                                                 // 2528
		                                                                                                                   // 2529
			// Convert the macros                                                                                             // 2530
			sOut += oLang.sInfoPostFix;                                                                                       // 2531
			sOut = _fnInfoMacros( oSettings, sOut );                                                                          // 2532
			                                                                                                                  // 2533
			if ( oLang.fnInfoCallback !== null )                                                                              // 2534
			{                                                                                                                 // 2535
				sOut = oLang.fnInfoCallback.call( oSettings.oInstance,                                                           // 2536
					oSettings, iStart, iEnd, iMax, iTotal, sOut );                                                                  // 2537
			}                                                                                                                 // 2538
			                                                                                                                  // 2539
			var n = oSettings.aanFeatures.i;                                                                                  // 2540
			for ( var i=0, iLen=n.length ; i<iLen ; i++ )                                                                     // 2541
			{                                                                                                                 // 2542
				$(n[i]).html( sOut );                                                                                            // 2543
			}                                                                                                                 // 2544
		}                                                                                                                  // 2545
		                                                                                                                   // 2546
		                                                                                                                   // 2547
		function _fnInfoMacros ( oSettings, str )                                                                          // 2548
		{                                                                                                                  // 2549
			var                                                                                                               // 2550
				iStart = oSettings._iDisplayStart+1,                                                                             // 2551
				sStart = oSettings.fnFormatNumber( iStart ),                                                                     // 2552
				iEnd = oSettings.fnDisplayEnd(),                                                                                 // 2553
				sEnd = oSettings.fnFormatNumber( iEnd ),                                                                         // 2554
				iTotal = oSettings.fnRecordsDisplay(),                                                                           // 2555
				sTotal = oSettings.fnFormatNumber( iTotal ),                                                                     // 2556
				iMax = oSettings.fnRecordsTotal(),                                                                               // 2557
				sMax = oSettings.fnFormatNumber( iMax );                                                                         // 2558
		                                                                                                                   // 2559
			// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only                              // 2560
			// internally                                                                                                     // 2561
			if ( oSettings.oScroll.bInfinite )                                                                                // 2562
			{                                                                                                                 // 2563
				sStart = oSettings.fnFormatNumber( 1 );                                                                          // 2564
			}                                                                                                                 // 2565
		                                                                                                                   // 2566
			return str.                                                                                                       // 2567
				replace(/_START_/g, sStart).                                                                                     // 2568
				replace(/_END_/g,   sEnd).                                                                                       // 2569
				replace(/_TOTAL_/g, sTotal).                                                                                     // 2570
				replace(/_MAX_/g,   sMax);                                                                                       // 2571
		}                                                                                                                  // 2572
		                                                                                                                   // 2573
		                                                                                                                   // 2574
		                                                                                                                   // 2575
		/**                                                                                                                // 2576
		 * Draw the table for the first time, adding all required features                                                 // 2577
		 *  @param {object} oSettings dataTables settings object                                                           // 2578
		 *  @memberof DataTable#oApi                                                                                       // 2579
		 */                                                                                                                // 2580
		function _fnInitialise ( oSettings )                                                                               // 2581
		{                                                                                                                  // 2582
			var i, iLen, iAjaxStart=oSettings.iInitDisplayStart;                                                              // 2583
			                                                                                                                  // 2584
			/* Ensure that the table data is fully initialised */                                                             // 2585
			if ( oSettings.bInitialised === false )                                                                           // 2586
			{                                                                                                                 // 2587
				setTimeout( function(){ _fnInitialise( oSettings ); }, 200 );                                                    // 2588
				return;                                                                                                          // 2589
			}                                                                                                                 // 2590
			                                                                                                                  // 2591
			/* Show the display HTML options */                                                                               // 2592
			_fnAddOptionsHtml( oSettings );                                                                                   // 2593
			                                                                                                                  // 2594
			/* Build and draw the header / footer for the table */                                                            // 2595
			_fnBuildHead( oSettings );                                                                                        // 2596
			_fnDrawHead( oSettings, oSettings.aoHeader );                                                                     // 2597
			if ( oSettings.nTFoot )                                                                                           // 2598
			{                                                                                                                 // 2599
				_fnDrawHead( oSettings, oSettings.aoFooter );                                                                    // 2600
			}                                                                                                                 // 2601
		                                                                                                                   // 2602
			/* Okay to show that something is going on now */                                                                 // 2603
			_fnProcessingDisplay( oSettings, true );                                                                          // 2604
			                                                                                                                  // 2605
			/* Calculate sizes for columns */                                                                                 // 2606
			if ( oSettings.oFeatures.bAutoWidth )                                                                             // 2607
			{                                                                                                                 // 2608
				_fnCalculateColumnWidths( oSettings );                                                                           // 2609
			}                                                                                                                 // 2610
			                                                                                                                  // 2611
			for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                       // 2612
			{                                                                                                                 // 2613
				if ( oSettings.aoColumns[i].sWidth !== null )                                                                    // 2614
				{                                                                                                                // 2615
					oSettings.aoColumns[i].nTh.style.width = _fnStringToCss( oSettings.aoColumns[i].sWidth );                       // 2616
				}                                                                                                                // 2617
			}                                                                                                                 // 2618
			                                                                                                                  // 2619
			/* If there is default sorting required - let's do it. The sort function will do the                              // 2620
			 * drawing for us. Otherwise we draw the table regardless of the Ajax source - this allows                        // 2621
			 * the table to look initialised for Ajax sourcing data (show 'loading' message possibly)                         // 2622
			 */                                                                                                               // 2623
			if ( oSettings.oFeatures.bSort )                                                                                  // 2624
			{                                                                                                                 // 2625
				_fnSort( oSettings );                                                                                            // 2626
			}                                                                                                                 // 2627
			else if ( oSettings.oFeatures.bFilter )                                                                           // 2628
			{                                                                                                                 // 2629
				_fnFilterComplete( oSettings, oSettings.oPreviousSearch );                                                       // 2630
			}                                                                                                                 // 2631
			else                                                                                                              // 2632
			{                                                                                                                 // 2633
				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();                                                         // 2634
				_fnCalculateEnd( oSettings );                                                                                    // 2635
				_fnDraw( oSettings );                                                                                            // 2636
			}                                                                                                                 // 2637
			                                                                                                                  // 2638
			/* if there is an ajax source load the data */                                                                    // 2639
			if ( oSettings.sAjaxSource !== null && !oSettings.oFeatures.bServerSide )                                         // 2640
			{                                                                                                                 // 2641
				var aoData = [];                                                                                                 // 2642
				_fnServerParams( oSettings, aoData );                                                                            // 2643
				oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, aoData, function(json) {                // 2644
					var aData = (oSettings.sAjaxDataProp !== "") ?                                                                  // 2645
					 	_fnGetObjectDataFn( oSettings.sAjaxDataProp )(json) : json;                                                   // 2646
		                                                                                                                   // 2647
					/* Got the data - add it to the table */                                                                        // 2648
					for ( i=0 ; i<aData.length ; i++ )                                                                              // 2649
					{                                                                                                               // 2650
						_fnAddData( oSettings, aData[i] );                                                                             // 2651
					}                                                                                                               // 2652
					                                                                                                                // 2653
					/* Reset the init display for cookie saving. We've already done a filter, and                                   // 2654
					 * therefore cleared it before. So we need to make it appear 'fresh'                                            // 2655
					 */                                                                                                             // 2656
					oSettings.iInitDisplayStart = iAjaxStart;                                                                       // 2657
					                                                                                                                // 2658
					if ( oSettings.oFeatures.bSort )                                                                                // 2659
					{                                                                                                               // 2660
						_fnSort( oSettings );                                                                                          // 2661
					}                                                                                                               // 2662
					else                                                                                                            // 2663
					{                                                                                                               // 2664
						oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();                                                       // 2665
						_fnCalculateEnd( oSettings );                                                                                  // 2666
						_fnDraw( oSettings );                                                                                          // 2667
					}                                                                                                               // 2668
					                                                                                                                // 2669
					_fnProcessingDisplay( oSettings, false );                                                                       // 2670
					_fnInitComplete( oSettings, json );                                                                             // 2671
				}, oSettings );                                                                                                  // 2672
				return;                                                                                                          // 2673
			}                                                                                                                 // 2674
			                                                                                                                  // 2675
			/* Server-side processing initialisation complete is done at the end of _fnDraw */                                // 2676
			if ( !oSettings.oFeatures.bServerSide )                                                                           // 2677
			{                                                                                                                 // 2678
				_fnProcessingDisplay( oSettings, false );                                                                        // 2679
				_fnInitComplete( oSettings );                                                                                    // 2680
			}                                                                                                                 // 2681
		}                                                                                                                  // 2682
		                                                                                                                   // 2683
		                                                                                                                   // 2684
		/**                                                                                                                // 2685
		 * Draw the table for the first time, adding all required features                                                 // 2686
		 *  @param {object} oSettings dataTables settings object                                                           // 2687
		 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source                     // 2688
		 *    with client-side processing (optional)                                                                       // 2689
		 *  @memberof DataTable#oApi                                                                                       // 2690
		 */                                                                                                                // 2691
		function _fnInitComplete ( oSettings, json )                                                                       // 2692
		{                                                                                                                  // 2693
			oSettings._bInitComplete = true;                                                                                  // 2694
			_fnCallbackFire( oSettings, 'aoInitComplete', 'init', [oSettings, json] );                                        // 2695
		}                                                                                                                  // 2696
		                                                                                                                   // 2697
		                                                                                                                   // 2698
		/**                                                                                                                // 2699
		 * Language compatibility - when certain options are given, and others aren't, we                                  // 2700
		 * need to duplicate the values over, in order to provide backwards compatibility                                  // 2701
		 * with older language files.                                                                                      // 2702
		 *  @param {object} oSettings dataTables settings object                                                           // 2703
		 *  @memberof DataTable#oApi                                                                                       // 2704
		 */                                                                                                                // 2705
		function _fnLanguageCompat( oLanguage )                                                                            // 2706
		{                                                                                                                  // 2707
			var oDefaults = DataTable.defaults.oLanguage;                                                                     // 2708
		                                                                                                                   // 2709
			/* Backwards compatibility - if there is no sEmptyTable given, then use the same as                               // 2710
			 * sZeroRecords - assuming that is given.                                                                         // 2711
			 */                                                                                                               // 2712
			if ( !oLanguage.sEmptyTable && oLanguage.sZeroRecords &&                                                          // 2713
				oDefaults.sEmptyTable === "No data available in table" )                                                         // 2714
			{                                                                                                                 // 2715
				_fnMap( oLanguage, oLanguage, 'sZeroRecords', 'sEmptyTable' );                                                   // 2716
			}                                                                                                                 // 2717
		                                                                                                                   // 2718
			/* Likewise with loading records */                                                                               // 2719
			if ( !oLanguage.sLoadingRecords && oLanguage.sZeroRecords &&                                                      // 2720
				oDefaults.sLoadingRecords === "Loading..." )                                                                     // 2721
			{                                                                                                                 // 2722
				_fnMap( oLanguage, oLanguage, 'sZeroRecords', 'sLoadingRecords' );                                               // 2723
			}                                                                                                                 // 2724
		}                                                                                                                  // 2725
		                                                                                                                   // 2726
		                                                                                                                   // 2727
		                                                                                                                   // 2728
		/**                                                                                                                // 2729
		 * Generate the node required for user display length changing                                                     // 2730
		 *  @param {object} oSettings dataTables settings object                                                           // 2731
		 *  @returns {node} Display length feature node                                                                    // 2732
		 *  @memberof DataTable#oApi                                                                                       // 2733
		 */                                                                                                                // 2734
		function _fnFeatureHtmlLength ( oSettings )                                                                        // 2735
		{                                                                                                                  // 2736
			if ( oSettings.oScroll.bInfinite )                                                                                // 2737
			{                                                                                                                 // 2738
				return null;                                                                                                     // 2739
			}                                                                                                                 // 2740
			                                                                                                                  // 2741
			/* This can be overruled by not using the _MENU_ var/macro in the language variable */                            // 2742
			var sName = 'name="'+oSettings.sTableId+'_length"';                                                               // 2743
			var sStdMenu = '<select size="1" '+sName+'>';                                                                     // 2744
			var i, iLen;                                                                                                      // 2745
			var aLengthMenu = oSettings.aLengthMenu;                                                                          // 2746
			                                                                                                                  // 2747
			if ( aLengthMenu.length == 2 && typeof aLengthMenu[0] === 'object' &&                                             // 2748
					typeof aLengthMenu[1] === 'object' )                                                                            // 2749
			{                                                                                                                 // 2750
				for ( i=0, iLen=aLengthMenu[0].length ; i<iLen ; i++ )                                                           // 2751
				{                                                                                                                // 2752
					sStdMenu += '<option value="'+aLengthMenu[0][i]+'">'+aLengthMenu[1][i]+'</option>';                             // 2753
				}                                                                                                                // 2754
			}                                                                                                                 // 2755
			else                                                                                                              // 2756
			{                                                                                                                 // 2757
				for ( i=0, iLen=aLengthMenu.length ; i<iLen ; i++ )                                                              // 2758
				{                                                                                                                // 2759
					sStdMenu += '<option value="'+aLengthMenu[i]+'">'+aLengthMenu[i]+'</option>';                                   // 2760
				}                                                                                                                // 2761
			}                                                                                                                 // 2762
			sStdMenu += '</select>';                                                                                          // 2763
			                                                                                                                  // 2764
			var nLength = document.createElement( 'div' );                                                                    // 2765
			if ( !oSettings.aanFeatures.l )                                                                                   // 2766
			{                                                                                                                 // 2767
				nLength.id = oSettings.sTableId+'_length';                                                                       // 2768
			}                                                                                                                 // 2769
			nLength.className = oSettings.oClasses.sLength;                                                                   // 2770
			nLength.innerHTML = '<label>'+oSettings.oLanguage.sLengthMenu.replace( '_MENU_', sStdMenu )+'</label>';           // 2771
			                                                                                                                  // 2772
			/*                                                                                                                // 2773
			 * Set the length to the current display length - thanks to Andrea Pavlovic for this fix,                         // 2774
			 * and Stefan Skopnik for fixing the fix!                                                                         // 2775
			 */                                                                                                               // 2776
			$('select option[value="'+oSettings._iDisplayLength+'"]', nLength).attr("selected", true);                        // 2777
			                                                                                                                  // 2778
			$('select', nLength).bind( 'change.DT', function(e) {                                                             // 2779
				var iVal = $(this).val();                                                                                        // 2780
				                                                                                                                 // 2781
				/* Update all other length options for the new display */                                                        // 2782
				var n = oSettings.aanFeatures.l;                                                                                 // 2783
				for ( i=0, iLen=n.length ; i<iLen ; i++ )                                                                        // 2784
				{                                                                                                                // 2785
					if ( n[i] != this.parentNode )                                                                                  // 2786
					{                                                                                                               // 2787
						$('select', n[i]).val( iVal );                                                                                 // 2788
					}                                                                                                               // 2789
				}                                                                                                                // 2790
				                                                                                                                 // 2791
				/* Redraw the table */                                                                                           // 2792
				oSettings._iDisplayLength = parseInt(iVal, 10);                                                                  // 2793
				_fnCalculateEnd( oSettings );                                                                                    // 2794
				                                                                                                                 // 2795
				/* If we have space to show extra rows (backing up from the end point - then do so */                            // 2796
				if ( oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay() )                                                  // 2797
				{                                                                                                                // 2798
					oSettings._iDisplayStart = oSettings.fnDisplayEnd() - oSettings._iDisplayLength;                                // 2799
					if ( oSettings._iDisplayStart < 0 )                                                                             // 2800
					{                                                                                                               // 2801
						oSettings._iDisplayStart = 0;                                                                                  // 2802
					}                                                                                                               // 2803
				}                                                                                                                // 2804
				                                                                                                                 // 2805
				if ( oSettings._iDisplayLength == -1 )                                                                           // 2806
				{                                                                                                                // 2807
					oSettings._iDisplayStart = 0;                                                                                   // 2808
				}                                                                                                                // 2809
				                                                                                                                 // 2810
				_fnDraw( oSettings );                                                                                            // 2811
			} );                                                                                                              // 2812
		                                                                                                                   // 2813
		                                                                                                                   // 2814
			$('select', nLength).attr('aria-controls', oSettings.sTableId);                                                   // 2815
			                                                                                                                  // 2816
			return nLength;                                                                                                   // 2817
		}                                                                                                                  // 2818
		                                                                                                                   // 2819
		                                                                                                                   // 2820
		/**                                                                                                                // 2821
		 * Recalculate the end point based on the start point                                                              // 2822
		 *  @param {object} oSettings dataTables settings object                                                           // 2823
		 *  @memberof DataTable#oApi                                                                                       // 2824
		 */                                                                                                                // 2825
		function _fnCalculateEnd( oSettings )                                                                              // 2826
		{                                                                                                                  // 2827
			if ( oSettings.oFeatures.bPaginate === false )                                                                    // 2828
			{                                                                                                                 // 2829
				oSettings._iDisplayEnd = oSettings.aiDisplay.length;                                                             // 2830
			}                                                                                                                 // 2831
			else                                                                                                              // 2832
			{                                                                                                                 // 2833
				/* Set the end point of the display - based on how many elements there are                                       // 2834
				 * still to display                                                                                              // 2835
				 */                                                                                                              // 2836
				if ( oSettings._iDisplayStart + oSettings._iDisplayLength > oSettings.aiDisplay.length ||                        // 2837
					   oSettings._iDisplayLength == -1 )                                                                            // 2838
				{                                                                                                                // 2839
					oSettings._iDisplayEnd = oSettings.aiDisplay.length;                                                            // 2840
				}                                                                                                                // 2841
				else                                                                                                             // 2842
				{                                                                                                                // 2843
					oSettings._iDisplayEnd = oSettings._iDisplayStart + oSettings._iDisplayLength;                                  // 2844
				}                                                                                                                // 2845
			}                                                                                                                 // 2846
		}                                                                                                                  // 2847
		                                                                                                                   // 2848
		                                                                                                                   // 2849
		                                                                                                                   // 2850
		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                       // 2851
		 * Note that most of the paging logic is done in                                                                   // 2852
		 * DataTable.ext.oPagination                                                                                       // 2853
		 */                                                                                                                // 2854
		                                                                                                                   // 2855
		/**                                                                                                                // 2856
		 * Generate the node required for default pagination                                                               // 2857
		 *  @param {object} oSettings dataTables settings object                                                           // 2858
		 *  @returns {node} Pagination feature node                                                                        // 2859
		 *  @memberof DataTable#oApi                                                                                       // 2860
		 */                                                                                                                // 2861
		function _fnFeatureHtmlPaginate ( oSettings )                                                                      // 2862
		{                                                                                                                  // 2863
			if ( oSettings.oScroll.bInfinite )                                                                                // 2864
			{                                                                                                                 // 2865
				return null;                                                                                                     // 2866
			}                                                                                                                 // 2867
			                                                                                                                  // 2868
			var nPaginate = document.createElement( 'div' );                                                                  // 2869
			nPaginate.className = oSettings.oClasses.sPaging+oSettings.sPaginationType;                                       // 2870
			                                                                                                                  // 2871
			DataTable.ext.oPagination[ oSettings.sPaginationType ].fnInit( oSettings, nPaginate,                              // 2872
				function( oSettings ) {                                                                                          // 2873
					_fnCalculateEnd( oSettings );                                                                                   // 2874
					_fnDraw( oSettings );                                                                                           // 2875
				}                                                                                                                // 2876
			);                                                                                                                // 2877
			                                                                                                                  // 2878
			/* Add a draw callback for the pagination on first instance, to update the paging display */                      // 2879
			if ( !oSettings.aanFeatures.p )                                                                                   // 2880
			{                                                                                                                 // 2881
				oSettings.aoDrawCallback.push( {                                                                                 // 2882
					"fn": function( oSettings ) {                                                                                   // 2883
						DataTable.ext.oPagination[ oSettings.sPaginationType ].fnUpdate( oSettings, function( oSettings ) {            // 2884
							_fnCalculateEnd( oSettings );                                                                                 // 2885
							_fnDraw( oSettings );                                                                                         // 2886
						} );                                                                                                           // 2887
					},                                                                                                              // 2888
					"sName": "pagination"                                                                                           // 2889
				} );                                                                                                             // 2890
			}                                                                                                                 // 2891
			return nPaginate;                                                                                                 // 2892
		}                                                                                                                  // 2893
		                                                                                                                   // 2894
		                                                                                                                   // 2895
		/**                                                                                                                // 2896
		 * Alter the display settings to change the page                                                                   // 2897
		 *  @param {object} oSettings dataTables settings object                                                           // 2898
		 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"                       // 2899
		 *    or page number to jump to (integer)                                                                          // 2900
		 *  @returns {bool} true page has changed, false - no change (no effect) eg 'first' on page 1                      // 2901
		 *  @memberof DataTable#oApi                                                                                       // 2902
		 */                                                                                                                // 2903
		function _fnPageChange ( oSettings, mAction )                                                                      // 2904
		{                                                                                                                  // 2905
			var iOldStart = oSettings._iDisplayStart;                                                                         // 2906
			                                                                                                                  // 2907
			if ( typeof mAction === "number" )                                                                                // 2908
			{                                                                                                                 // 2909
				oSettings._iDisplayStart = mAction * oSettings._iDisplayLength;                                                  // 2910
				if ( oSettings._iDisplayStart > oSettings.fnRecordsDisplay() )                                                   // 2911
				{                                                                                                                // 2912
					oSettings._iDisplayStart = 0;                                                                                   // 2913
				}                                                                                                                // 2914
			}                                                                                                                 // 2915
			else if ( mAction == "first" )                                                                                    // 2916
			{                                                                                                                 // 2917
				oSettings._iDisplayStart = 0;                                                                                    // 2918
			}                                                                                                                 // 2919
			else if ( mAction == "previous" )                                                                                 // 2920
			{                                                                                                                 // 2921
				oSettings._iDisplayStart = oSettings._iDisplayLength>=0 ?                                                        // 2922
					oSettings._iDisplayStart - oSettings._iDisplayLength :                                                          // 2923
					0;                                                                                                              // 2924
				                                                                                                                 // 2925
				/* Correct for under-run */                                                                                      // 2926
				if ( oSettings._iDisplayStart < 0 )                                                                              // 2927
				{                                                                                                                // 2928
				  oSettings._iDisplayStart = 0;                                                                                  // 2929
				}                                                                                                                // 2930
			}                                                                                                                 // 2931
			else if ( mAction == "next" )                                                                                     // 2932
			{                                                                                                                 // 2933
				if ( oSettings._iDisplayLength >= 0 )                                                                            // 2934
				{                                                                                                                // 2935
					/* Make sure we are not over running the display array */                                                       // 2936
					if ( oSettings._iDisplayStart + oSettings._iDisplayLength < oSettings.fnRecordsDisplay() )                      // 2937
					{                                                                                                               // 2938
						oSettings._iDisplayStart += oSettings._iDisplayLength;                                                         // 2939
					}                                                                                                               // 2940
				}                                                                                                                // 2941
				else                                                                                                             // 2942
				{                                                                                                                // 2943
					oSettings._iDisplayStart = 0;                                                                                   // 2944
				}                                                                                                                // 2945
			}                                                                                                                 // 2946
			else if ( mAction == "last" )                                                                                     // 2947
			{                                                                                                                 // 2948
				if ( oSettings._iDisplayLength >= 0 )                                                                            // 2949
				{                                                                                                                // 2950
					var iPages = parseInt( (oSettings.fnRecordsDisplay()-1) / oSettings._iDisplayLength, 10 ) + 1;                  // 2951
					oSettings._iDisplayStart = (iPages-1) * oSettings._iDisplayLength;                                              // 2952
				}                                                                                                                // 2953
				else                                                                                                             // 2954
				{                                                                                                                // 2955
					oSettings._iDisplayStart = 0;                                                                                   // 2956
				}                                                                                                                // 2957
			}                                                                                                                 // 2958
			else                                                                                                              // 2959
			{                                                                                                                 // 2960
				_fnLog( oSettings, 0, "Unknown paging action: "+mAction );                                                       // 2961
			}                                                                                                                 // 2962
			$(oSettings.oInstance).trigger('page', oSettings);                                                                // 2963
			                                                                                                                  // 2964
			return iOldStart != oSettings._iDisplayStart;                                                                     // 2965
		}                                                                                                                  // 2966
		                                                                                                                   // 2967
		                                                                                                                   // 2968
		                                                                                                                   // 2969
		/**                                                                                                                // 2970
		 * Generate the node required for the processing node                                                              // 2971
		 *  @param {object} oSettings dataTables settings object                                                           // 2972
		 *  @returns {node} Processing element                                                                             // 2973
		 *  @memberof DataTable#oApi                                                                                       // 2974
		 */                                                                                                                // 2975
		function _fnFeatureHtmlProcessing ( oSettings )                                                                    // 2976
		{                                                                                                                  // 2977
			var nProcessing = document.createElement( 'div' );                                                                // 2978
			                                                                                                                  // 2979
			if ( !oSettings.aanFeatures.r )                                                                                   // 2980
			{                                                                                                                 // 2981
				nProcessing.id = oSettings.sTableId+'_processing';                                                               // 2982
			}                                                                                                                 // 2983
			nProcessing.innerHTML = oSettings.oLanguage.sProcessing;                                                          // 2984
			nProcessing.className = oSettings.oClasses.sProcessing;                                                           // 2985
			oSettings.nTable.parentNode.insertBefore( nProcessing, oSettings.nTable );                                        // 2986
			                                                                                                                  // 2987
			return nProcessing;                                                                                               // 2988
		}                                                                                                                  // 2989
		                                                                                                                   // 2990
		                                                                                                                   // 2991
		/**                                                                                                                // 2992
		 * Display or hide the processing indicator                                                                        // 2993
		 *  @param {object} oSettings dataTables settings object                                                           // 2994
		 *  @param {bool} bShow Show the processing indicator (true) or not (false)                                        // 2995
		 *  @memberof DataTable#oApi                                                                                       // 2996
		 */                                                                                                                // 2997
		function _fnProcessingDisplay ( oSettings, bShow )                                                                 // 2998
		{                                                                                                                  // 2999
			if ( oSettings.oFeatures.bProcessing )                                                                            // 3000
			{                                                                                                                 // 3001
				var an = oSettings.aanFeatures.r;                                                                                // 3002
				for ( var i=0, iLen=an.length ; i<iLen ; i++ )                                                                   // 3003
				{                                                                                                                // 3004
					an[i].style.visibility = bShow ? "visible" : "hidden";                                                          // 3005
				}                                                                                                                // 3006
			}                                                                                                                 // 3007
		                                                                                                                   // 3008
			$(oSettings.oInstance).trigger('processing', [oSettings, bShow]);                                                 // 3009
		}                                                                                                                  // 3010
		                                                                                                                   // 3011
		/**                                                                                                                // 3012
		 * Add any control elements for the table - specifically scrolling                                                 // 3013
		 *  @param {object} oSettings dataTables settings object                                                           // 3014
		 *  @returns {node} Node to add to the DOM                                                                         // 3015
		 *  @memberof DataTable#oApi                                                                                       // 3016
		 */                                                                                                                // 3017
		function _fnFeatureHtmlTable ( oSettings )                                                                         // 3018
		{                                                                                                                  // 3019
			/* Check if scrolling is enabled or not - if not then leave the DOM unaltered */                                  // 3020
			if ( oSettings.oScroll.sX === "" && oSettings.oScroll.sY === "" )                                                 // 3021
			{                                                                                                                 // 3022
				return oSettings.nTable;                                                                                         // 3023
			}                                                                                                                 // 3024
			                                                                                                                  // 3025
			/*                                                                                                                // 3026
			 * The HTML structure that we want to generate in this function is:                                               // 3027
			 *  div - nScroller                                                                                               // 3028
			 *    div - nScrollHead                                                                                           // 3029
			 *      div - nScrollHeadInner                                                                                    // 3030
			 *        table - nScrollHeadTable                                                                                // 3031
			 *          thead - nThead                                                                                        // 3032
			 *    div - nScrollBody                                                                                           // 3033
			 *      table - oSettings.nTable                                                                                  // 3034
			 *        thead - nTheadSize                                                                                      // 3035
			 *        tbody - nTbody                                                                                          // 3036
			 *    div - nScrollFoot                                                                                           // 3037
			 *      div - nScrollFootInner                                                                                    // 3038
			 *        table - nScrollFootTable                                                                                // 3039
			 *          tfoot - nTfoot                                                                                        // 3040
			 */                                                                                                               // 3041
			var                                                                                                               // 3042
			 	nScroller = document.createElement('div'),                                                                      // 3043
			 	nScrollHead = document.createElement('div'),                                                                    // 3044
			 	nScrollHeadInner = document.createElement('div'),                                                               // 3045
			 	nScrollBody = document.createElement('div'),                                                                    // 3046
			 	nScrollFoot = document.createElement('div'),                                                                    // 3047
			 	nScrollFootInner = document.createElement('div'),                                                               // 3048
			 	nScrollHeadTable = oSettings.nTable.cloneNode(false),                                                           // 3049
			 	nScrollFootTable = oSettings.nTable.cloneNode(false),                                                           // 3050
				nThead = oSettings.nTable.getElementsByTagName('thead')[0],                                                      // 3051
			 	nTfoot = oSettings.nTable.getElementsByTagName('tfoot').length === 0 ? null :                                   // 3052
					oSettings.nTable.getElementsByTagName('tfoot')[0],                                                              // 3053
				oClasses = oSettings.oClasses;                                                                                   // 3054
			                                                                                                                  // 3055
			nScrollHead.appendChild( nScrollHeadInner );                                                                      // 3056
			nScrollFoot.appendChild( nScrollFootInner );                                                                      // 3057
			nScrollBody.appendChild( oSettings.nTable );                                                                      // 3058
			nScroller.appendChild( nScrollHead );                                                                             // 3059
			nScroller.appendChild( nScrollBody );                                                                             // 3060
			nScrollHeadInner.appendChild( nScrollHeadTable );                                                                 // 3061
			nScrollHeadTable.appendChild( nThead );                                                                           // 3062
			if ( nTfoot !== null )                                                                                            // 3063
			{                                                                                                                 // 3064
				nScroller.appendChild( nScrollFoot );                                                                            // 3065
				nScrollFootInner.appendChild( nScrollFootTable );                                                                // 3066
				nScrollFootTable.appendChild( nTfoot );                                                                          // 3067
			}                                                                                                                 // 3068
			                                                                                                                  // 3069
			nScroller.className = oClasses.sScrollWrapper;                                                                    // 3070
			nScrollHead.className = oClasses.sScrollHead;                                                                     // 3071
			nScrollHeadInner.className = oClasses.sScrollHeadInner;                                                           // 3072
			nScrollBody.className = oClasses.sScrollBody;                                                                     // 3073
			nScrollFoot.className = oClasses.sScrollFoot;                                                                     // 3074
			nScrollFootInner.className = oClasses.sScrollFootInner;                                                           // 3075
			                                                                                                                  // 3076
			if ( oSettings.oScroll.bAutoCss )                                                                                 // 3077
			{                                                                                                                 // 3078
				nScrollHead.style.overflow = "hidden";                                                                           // 3079
				nScrollHead.style.position = "relative";                                                                         // 3080
				nScrollFoot.style.overflow = "hidden";                                                                           // 3081
				nScrollBody.style.overflow = "auto";                                                                             // 3082
			}                                                                                                                 // 3083
			                                                                                                                  // 3084
			nScrollHead.style.border = "0";                                                                                   // 3085
			nScrollHead.style.width = "100%";                                                                                 // 3086
			nScrollFoot.style.border = "0";                                                                                   // 3087
			nScrollHeadInner.style.width = oSettings.oScroll.sXInner !== "" ?                                                 // 3088
				oSettings.oScroll.sXInner : "100%"; /* will be overwritten */                                                    // 3089
			                                                                                                                  // 3090
			/* Modify attributes to respect the clones */                                                                     // 3091
			nScrollHeadTable.removeAttribute('id');                                                                           // 3092
			nScrollHeadTable.style.marginLeft = "0";                                                                          // 3093
			oSettings.nTable.style.marginLeft = "0";                                                                          // 3094
			if ( nTfoot !== null )                                                                                            // 3095
			{                                                                                                                 // 3096
				nScrollFootTable.removeAttribute('id');                                                                          // 3097
				nScrollFootTable.style.marginLeft = "0";                                                                         // 3098
			}                                                                                                                 // 3099
			                                                                                                                  // 3100
			/* Move caption elements from the body to the header, footer or leave where it is                                 // 3101
			 * depending on the configuration. Note that the DTD says there can be only one caption */                        // 3102
			var nCaption = $(oSettings.nTable).children('caption');                                                           // 3103
			if ( nCaption.length > 0 )                                                                                        // 3104
			{                                                                                                                 // 3105
				nCaption = nCaption[0];                                                                                          // 3106
				if ( nCaption._captionSide === "top" )                                                                           // 3107
				{                                                                                                                // 3108
					nScrollHeadTable.appendChild( nCaption );                                                                       // 3109
				}                                                                                                                // 3110
				else if ( nCaption._captionSide === "bottom" && nTfoot )                                                         // 3111
				{                                                                                                                // 3112
					nScrollFootTable.appendChild( nCaption );                                                                       // 3113
				}                                                                                                                // 3114
			}                                                                                                                 // 3115
			                                                                                                                  // 3116
			/*                                                                                                                // 3117
			 * Sizing                                                                                                         // 3118
			 */                                                                                                               // 3119
			/* When x-scrolling add the width and a scroller to move the header with the body */                              // 3120
			if ( oSettings.oScroll.sX !== "" )                                                                                // 3121
			{                                                                                                                 // 3122
				nScrollHead.style.width = _fnStringToCss( oSettings.oScroll.sX );                                                // 3123
				nScrollBody.style.width = _fnStringToCss( oSettings.oScroll.sX );                                                // 3124
				                                                                                                                 // 3125
				if ( nTfoot !== null )                                                                                           // 3126
				{                                                                                                                // 3127
					nScrollFoot.style.width = _fnStringToCss( oSettings.oScroll.sX );	                                              // 3128
				}                                                                                                                // 3129
				                                                                                                                 // 3130
				/* When the body is scrolled, then we also want to scroll the headers */                                         // 3131
				$(nScrollBody).scroll( function (e) {                                                                            // 3132
					nScrollHead.scrollLeft = this.scrollLeft;                                                                       // 3133
					                                                                                                                // 3134
					if ( nTfoot !== null )                                                                                          // 3135
					{                                                                                                               // 3136
						nScrollFoot.scrollLeft = this.scrollLeft;                                                                      // 3137
					}                                                                                                               // 3138
				} );                                                                                                             // 3139
			}                                                                                                                 // 3140
			                                                                                                                  // 3141
			/* When yscrolling, add the height */                                                                             // 3142
			if ( oSettings.oScroll.sY !== "" )                                                                                // 3143
			{                                                                                                                 // 3144
				nScrollBody.style.height = _fnStringToCss( oSettings.oScroll.sY );                                               // 3145
			}                                                                                                                 // 3146
			                                                                                                                  // 3147
			/* Redraw - align columns across the tables */                                                                    // 3148
			oSettings.aoDrawCallback.push( {                                                                                  // 3149
				"fn": _fnScrollDraw,                                                                                             // 3150
				"sName": "scrolling"                                                                                             // 3151
			} );                                                                                                              // 3152
			                                                                                                                  // 3153
			/* Infinite scrolling event handlers */                                                                           // 3154
			if ( oSettings.oScroll.bInfinite )                                                                                // 3155
			{                                                                                                                 // 3156
				$(nScrollBody).scroll( function() {                                                                              // 3157
					/* Use a blocker to stop scrolling from loading more data while other data is still loading */                  // 3158
					if ( !oSettings.bDrawing && $(this).scrollTop() !== 0 )                                                         // 3159
					{                                                                                                               // 3160
						/* Check if we should load the next data set */                                                                // 3161
						if ( $(this).scrollTop() + $(this).height() >                                                                  // 3162
							$(oSettings.nTable).height() - oSettings.oScroll.iLoadGap )                                                   // 3163
						{                                                                                                              // 3164
							/* Only do the redraw if we have to - we might be at the end of the data */                                   // 3165
							if ( oSettings.fnDisplayEnd() < oSettings.fnRecordsDisplay() )                                                // 3166
							{                                                                                                             // 3167
								_fnPageChange( oSettings, 'next' );                                                                          // 3168
								_fnCalculateEnd( oSettings );                                                                                // 3169
								_fnDraw( oSettings );                                                                                        // 3170
							}                                                                                                             // 3171
						}                                                                                                              // 3172
					}                                                                                                               // 3173
				} );                                                                                                             // 3174
			}                                                                                                                 // 3175
			                                                                                                                  // 3176
			oSettings.nScrollHead = nScrollHead;                                                                              // 3177
			oSettings.nScrollFoot = nScrollFoot;                                                                              // 3178
			                                                                                                                  // 3179
			return nScroller;                                                                                                 // 3180
		}                                                                                                                  // 3181
		                                                                                                                   // 3182
		                                                                                                                   // 3183
		/**                                                                                                                // 3184
		 * Update the various tables for resizing. It's a bit of a pig this function, but                                  // 3185
		 * basically the idea to:                                                                                          // 3186
		 *   1. Re-create the table inside the scrolling div                                                               // 3187
		 *   2. Take live measurements from the DOM                                                                        // 3188
		 *   3. Apply the measurements                                                                                     // 3189
		 *   4. Clean up                                                                                                   // 3190
		 *  @param {object} o dataTables settings object                                                                   // 3191
		 *  @returns {node} Node to add to the DOM                                                                         // 3192
		 *  @memberof DataTable#oApi                                                                                       // 3193
		 */                                                                                                                // 3194
		function _fnScrollDraw ( o )                                                                                       // 3195
		{                                                                                                                  // 3196
			var                                                                                                               // 3197
				nScrollHeadInner = o.nScrollHead.getElementsByTagName('div')[0],                                                 // 3198
				nScrollHeadTable = nScrollHeadInner.getElementsByTagName('table')[0],                                            // 3199
				nScrollBody = o.nTable.parentNode,                                                                               // 3200
				i, iLen, j, jLen, anHeadToSize, anHeadSizers, anFootSizers, anFootToSize, oStyle, iVis,                          // 3201
				nTheadSize, nTfootSize,                                                                                          // 3202
				iWidth, aApplied=[], aAppliedFooter=[], iSanityWidth,                                                            // 3203
				nScrollFootInner = (o.nTFoot !== null) ? o.nScrollFoot.getElementsByTagName('div')[0] : null,                    // 3204
				nScrollFootTable = (o.nTFoot !== null) ? nScrollFootInner.getElementsByTagName('table')[0] : null,               // 3205
				ie67 = o.oBrowser.bScrollOversize,                                                                               // 3206
				zeroOut = function(nSizer) {                                                                                     // 3207
					oStyle = nSizer.style;                                                                                          // 3208
					oStyle.paddingTop = "0";                                                                                        // 3209
					oStyle.paddingBottom = "0";                                                                                     // 3210
					oStyle.borderTopWidth = "0";                                                                                    // 3211
					oStyle.borderBottomWidth = "0";                                                                                 // 3212
					oStyle.height = 0;                                                                                              // 3213
				};                                                                                                               // 3214
			                                                                                                                  // 3215
			/*                                                                                                                // 3216
			 * 1. Re-create the table inside the scrolling div                                                                // 3217
			 */                                                                                                               // 3218
			                                                                                                                  // 3219
			/* Remove the old minimised thead and tfoot elements in the inner table */                                        // 3220
			$(o.nTable).children('thead, tfoot').remove();                                                                    // 3221
		                                                                                                                   // 3222
			/* Clone the current header and footer elements and then place it into the inner table */                         // 3223
			nTheadSize = $(o.nTHead).clone()[0];                                                                              // 3224
			o.nTable.insertBefore( nTheadSize, o.nTable.childNodes[0] );                                                      // 3225
			anHeadToSize = o.nTHead.getElementsByTagName('tr');                                                               // 3226
			anHeadSizers = nTheadSize.getElementsByTagName('tr');                                                             // 3227
			                                                                                                                  // 3228
			if ( o.nTFoot !== null )                                                                                          // 3229
			{                                                                                                                 // 3230
				nTfootSize = $(o.nTFoot).clone()[0];                                                                             // 3231
				o.nTable.insertBefore( nTfootSize, o.nTable.childNodes[1] );                                                     // 3232
				anFootToSize = o.nTFoot.getElementsByTagName('tr');                                                              // 3233
				anFootSizers = nTfootSize.getElementsByTagName('tr');                                                            // 3234
			}                                                                                                                 // 3235
			                                                                                                                  // 3236
			/*                                                                                                                // 3237
			 * 2. Take live measurements from the DOM - do not alter the DOM itself!                                          // 3238
			 */                                                                                                               // 3239
			                                                                                                                  // 3240
			/* Remove old sizing and apply the calculated column widths                                                       // 3241
			 * Get the unique column headers in the newly created (cloned) header. We want to apply the                       // 3242
			 * calculated sizes to this header                                                                                // 3243
			 */                                                                                                               // 3244
			if ( o.oScroll.sX === "" )                                                                                        // 3245
			{                                                                                                                 // 3246
				nScrollBody.style.width = '100%';                                                                                // 3247
				nScrollHeadInner.parentNode.style.width = '100%';                                                                // 3248
			}                                                                                                                 // 3249
			                                                                                                                  // 3250
			var nThs = _fnGetUniqueThs( o, nTheadSize );                                                                      // 3251
			for ( i=0, iLen=nThs.length ; i<iLen ; i++ )                                                                      // 3252
			{                                                                                                                 // 3253
				iVis = _fnVisibleToColumnIndex( o, i );                                                                          // 3254
				nThs[i].style.width = o.aoColumns[iVis].sWidth;                                                                  // 3255
			}                                                                                                                 // 3256
			                                                                                                                  // 3257
			if ( o.nTFoot !== null )                                                                                          // 3258
			{                                                                                                                 // 3259
				_fnApplyToChildren( function(n) {                                                                                // 3260
					n.style.width = "";                                                                                             // 3261
				}, anFootSizers );                                                                                               // 3262
			}                                                                                                                 // 3263
		                                                                                                                   // 3264
			// If scroll collapse is enabled, when we put the headers back into the body for sizing, we                       // 3265
			// will end up forcing the scrollbar to appear, making our measurements wrong for when we                         // 3266
			// then hide it (end of this function), so add the header height to the body scroller.                            // 3267
			if ( o.oScroll.bCollapse && o.oScroll.sY !== "" )                                                                 // 3268
			{                                                                                                                 // 3269
				nScrollBody.style.height = (nScrollBody.offsetHeight + o.nTHead.offsetHeight)+"px";                              // 3270
			}                                                                                                                 // 3271
			                                                                                                                  // 3272
			/* Size the table as a whole */                                                                                   // 3273
			iSanityWidth = $(o.nTable).outerWidth();                                                                          // 3274
			if ( o.oScroll.sX === "" )                                                                                        // 3275
			{                                                                                                                 // 3276
				/* No x scrolling */                                                                                             // 3277
				o.nTable.style.width = "100%";                                                                                   // 3278
				                                                                                                                 // 3279
				/* I know this is rubbish - but IE7 will make the width of the table when 100% include                           // 3280
				 * the scrollbar - which is shouldn't. When there is a scrollbar we need to take this                            // 3281
				 * into account.                                                                                                 // 3282
				 */                                                                                                              // 3283
				if ( ie67 && ($('tbody', nScrollBody).height() > nScrollBody.offsetHeight ||                                     // 3284
					$(nScrollBody).css('overflow-y') == "scroll")  )                                                                // 3285
				{                                                                                                                // 3286
					o.nTable.style.width = _fnStringToCss( $(o.nTable).outerWidth() - o.oScroll.iBarWidth);                         // 3287
				}                                                                                                                // 3288
			}                                                                                                                 // 3289
			else                                                                                                              // 3290
			{                                                                                                                 // 3291
				if ( o.oScroll.sXInner !== "" )                                                                                  // 3292
				{                                                                                                                // 3293
					/* x scroll inner has been given - use it */                                                                    // 3294
					o.nTable.style.width = _fnStringToCss(o.oScroll.sXInner);                                                       // 3295
				}                                                                                                                // 3296
				else if ( iSanityWidth == $(nScrollBody).width() &&                                                              // 3297
				   $(nScrollBody).height() < $(o.nTable).height() )                                                              // 3298
				{                                                                                                                // 3299
					/* There is y-scrolling - try to take account of the y scroll bar */                                            // 3300
					o.nTable.style.width = _fnStringToCss( iSanityWidth-o.oScroll.iBarWidth );                                      // 3301
					if ( $(o.nTable).outerWidth() > iSanityWidth-o.oScroll.iBarWidth )                                              // 3302
					{                                                                                                               // 3303
						/* Not possible to take account of it */                                                                       // 3304
						o.nTable.style.width = _fnStringToCss( iSanityWidth );                                                         // 3305
					}                                                                                                               // 3306
				}                                                                                                                // 3307
				else                                                                                                             // 3308
				{                                                                                                                // 3309
					/* All else fails */                                                                                            // 3310
					o.nTable.style.width = _fnStringToCss( iSanityWidth );                                                          // 3311
				}                                                                                                                // 3312
			}                                                                                                                 // 3313
			                                                                                                                  // 3314
			/* Recalculate the sanity width - now that we've applied the required width, before it was                        // 3315
			 * a temporary variable. This is required because the column width calculation is done                            // 3316
			 * before this table DOM is created.                                                                              // 3317
			 */                                                                                                               // 3318
			iSanityWidth = $(o.nTable).outerWidth();                                                                          // 3319
			                                                                                                                  // 3320
			/* We want the hidden header to have zero height, so remove padding and borders. Then                             // 3321
			 * set the width based on the real headers                                                                        // 3322
			 */                                                                                                               // 3323
			                                                                                                                  // 3324
			// Apply all styles in one pass. Invalidates layout only once because we don't read any                           // 3325
			// DOM properties.                                                                                                // 3326
			_fnApplyToChildren( zeroOut, anHeadSizers );                                                                      // 3327
			                                                                                                                  // 3328
			// Read all widths in next pass. Forces layout only once because we do not change                                 // 3329
			// any DOM properties.                                                                                            // 3330
			_fnApplyToChildren( function(nSizer) {                                                                            // 3331
				aApplied.push( _fnStringToCss( $(nSizer).width() ) );                                                            // 3332
			}, anHeadSizers );                                                                                                // 3333
			                                                                                                                  // 3334
			// Apply all widths in final pass. Invalidates layout only once because we do not                                 // 3335
			// read any DOM properties.                                                                                       // 3336
			_fnApplyToChildren( function(nToSize, i) {                                                                        // 3337
				nToSize.style.width = aApplied[i];                                                                               // 3338
			}, anHeadToSize );                                                                                                // 3339
		                                                                                                                   // 3340
			$(anHeadSizers).height(0);                                                                                        // 3341
			                                                                                                                  // 3342
			/* Same again with the footer if we have one */                                                                   // 3343
			if ( o.nTFoot !== null )                                                                                          // 3344
			{                                                                                                                 // 3345
				_fnApplyToChildren( zeroOut, anFootSizers );                                                                     // 3346
				                                                                                                                 // 3347
				_fnApplyToChildren( function(nSizer) {                                                                           // 3348
					aAppliedFooter.push( _fnStringToCss( $(nSizer).width() ) );                                                     // 3349
				}, anFootSizers );                                                                                               // 3350
				                                                                                                                 // 3351
				_fnApplyToChildren( function(nToSize, i) {                                                                       // 3352
					nToSize.style.width = aAppliedFooter[i];                                                                        // 3353
				}, anFootToSize );                                                                                               // 3354
		                                                                                                                   // 3355
				$(anFootSizers).height(0);                                                                                       // 3356
			}                                                                                                                 // 3357
			                                                                                                                  // 3358
			/*                                                                                                                // 3359
			 * 3. Apply the measurements                                                                                      // 3360
			 */                                                                                                               // 3361
			                                                                                                                  // 3362
			/* "Hide" the header and footer that we used for the sizing. We want to also fix their width                      // 3363
			 * to what they currently are                                                                                     // 3364
			 */                                                                                                               // 3365
			_fnApplyToChildren( function(nSizer, i) {                                                                         // 3366
				nSizer.innerHTML = "";                                                                                           // 3367
				nSizer.style.width = aApplied[i];                                                                                // 3368
			}, anHeadSizers );                                                                                                // 3369
			                                                                                                                  // 3370
			if ( o.nTFoot !== null )                                                                                          // 3371
			{                                                                                                                 // 3372
				_fnApplyToChildren( function(nSizer, i) {                                                                        // 3373
					nSizer.innerHTML = "";                                                                                          // 3374
					nSizer.style.width = aAppliedFooter[i];                                                                         // 3375
				}, anFootSizers );                                                                                               // 3376
			}                                                                                                                 // 3377
			                                                                                                                  // 3378
			/* Sanity check that the table is of a sensible width. If not then we are going to get                            // 3379
			 * misalignment - try to prevent this by not allowing the table to shrink below its min width                     // 3380
			 */                                                                                                               // 3381
			if ( $(o.nTable).outerWidth() < iSanityWidth )                                                                    // 3382
			{                                                                                                                 // 3383
				/* The min width depends upon if we have a vertical scrollbar visible or not */                                  // 3384
				var iCorrection = ((nScrollBody.scrollHeight > nScrollBody.offsetHeight ||                                       // 3385
					$(nScrollBody).css('overflow-y') == "scroll")) ?                                                                // 3386
						iSanityWidth+o.oScroll.iBarWidth : iSanityWidth;                                                               // 3387
				                                                                                                                 // 3388
				/* IE6/7 are a law unto themselves... */                                                                         // 3389
				if ( ie67 && (nScrollBody.scrollHeight >                                                                         // 3390
					nScrollBody.offsetHeight || $(nScrollBody).css('overflow-y') == "scroll")  )                                    // 3391
				{                                                                                                                // 3392
					o.nTable.style.width = _fnStringToCss( iCorrection-o.oScroll.iBarWidth );                                       // 3393
				}                                                                                                                // 3394
				                                                                                                                 // 3395
				/* Apply the calculated minimum width to the table wrappers */                                                   // 3396
				nScrollBody.style.width = _fnStringToCss( iCorrection );                                                         // 3397
				o.nScrollHead.style.width = _fnStringToCss( iCorrection );                                                       // 3398
				                                                                                                                 // 3399
				if ( o.nTFoot !== null )                                                                                         // 3400
				{                                                                                                                // 3401
					o.nScrollFoot.style.width = _fnStringToCss( iCorrection );                                                      // 3402
				}                                                                                                                // 3403
				                                                                                                                 // 3404
				/* And give the user a warning that we've stopped the table getting too small */                                 // 3405
				if ( o.oScroll.sX === "" )                                                                                       // 3406
				{                                                                                                                // 3407
					_fnLog( o, 1, "The table cannot fit into the current element which will cause column"+                          // 3408
						" misalignment. The table has been drawn at its minimum possible width." );                                    // 3409
				}                                                                                                                // 3410
				else if ( o.oScroll.sXInner !== "" )                                                                             // 3411
				{                                                                                                                // 3412
					_fnLog( o, 1, "The table cannot fit into the current element which will cause column"+                          // 3413
						" misalignment. Increase the sScrollXInner value or remove it to allow automatic"+                             // 3414
						" calculation" );                                                                                              // 3415
				}                                                                                                                // 3416
			}                                                                                                                 // 3417
			else                                                                                                              // 3418
			{                                                                                                                 // 3419
				nScrollBody.style.width = _fnStringToCss( '100%' );                                                              // 3420
				o.nScrollHead.style.width = _fnStringToCss( '100%' );                                                            // 3421
				                                                                                                                 // 3422
				if ( o.nTFoot !== null )                                                                                         // 3423
				{                                                                                                                // 3424
					o.nScrollFoot.style.width = _fnStringToCss( '100%' );                                                           // 3425
				}                                                                                                                // 3426
			}                                                                                                                 // 3427
			                                                                                                                  // 3428
			                                                                                                                  // 3429
			/*                                                                                                                // 3430
			 * 4. Clean up                                                                                                    // 3431
			 */                                                                                                               // 3432
			if ( o.oScroll.sY === "" )                                                                                        // 3433
			{                                                                                                                 // 3434
				/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting                             // 3435
				 * the scrollbar height from the visible display, rather than adding it on. We need to                           // 3436
				 * set the height in order to sort this. Don't want to do it in any other browsers.                              // 3437
				 */                                                                                                              // 3438
				if ( ie67 )                                                                                                      // 3439
				{                                                                                                                // 3440
					nScrollBody.style.height = _fnStringToCss( o.nTable.offsetHeight+o.oScroll.iBarWidth );                         // 3441
				}                                                                                                                // 3442
			}                                                                                                                 // 3443
			                                                                                                                  // 3444
			if ( o.oScroll.sY !== "" && o.oScroll.bCollapse )                                                                 // 3445
			{                                                                                                                 // 3446
				nScrollBody.style.height = _fnStringToCss( o.oScroll.sY );                                                       // 3447
				                                                                                                                 // 3448
				var iExtra = (o.oScroll.sX !== "" && o.nTable.offsetWidth > nScrollBody.offsetWidth) ?                           // 3449
				 	o.oScroll.iBarWidth : 0;                                                                                       // 3450
				if ( o.nTable.offsetHeight < nScrollBody.offsetHeight )                                                          // 3451
				{                                                                                                                // 3452
					nScrollBody.style.height = _fnStringToCss( o.nTable.offsetHeight+iExtra );                                      // 3453
				}                                                                                                                // 3454
			}                                                                                                                 // 3455
			                                                                                                                  // 3456
			/* Finally set the width's of the header and footer tables */                                                     // 3457
			var iOuterWidth = $(o.nTable).outerWidth();                                                                       // 3458
			nScrollHeadTable.style.width = _fnStringToCss( iOuterWidth );                                                     // 3459
			nScrollHeadInner.style.width = _fnStringToCss( iOuterWidth );                                                     // 3460
		                                                                                                                   // 3461
			// Figure out if there are scrollbar present - if so then we need a the header and footer to                      // 3462
			// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)                               // 3463
			var bScrolling = $(o.nTable).height() > nScrollBody.clientHeight || $(nScrollBody).css('overflow-y') == "scroll"; // 3464
			nScrollHeadInner.style.paddingRight = bScrolling ? o.oScroll.iBarWidth+"px" : "0px";                              // 3465
			                                                                                                                  // 3466
			if ( o.nTFoot !== null )                                                                                          // 3467
			{                                                                                                                 // 3468
				nScrollFootTable.style.width = _fnStringToCss( iOuterWidth );                                                    // 3469
				nScrollFootInner.style.width = _fnStringToCss( iOuterWidth );                                                    // 3470
				nScrollFootInner.style.paddingRight = bScrolling ? o.oScroll.iBarWidth+"px" : "0px";                             // 3471
			}                                                                                                                 // 3472
		                                                                                                                   // 3473
			/* Adjust the position of the header in case we loose the y-scrollbar */                                          // 3474
			$(nScrollBody).scroll();                                                                                          // 3475
			                                                                                                                  // 3476
			/* If sorting or filtering has occurred, jump the scrolling back to the top */                                    // 3477
			if ( o.bSorted || o.bFiltered )                                                                                   // 3478
			{                                                                                                                 // 3479
				nScrollBody.scrollTop = 0;                                                                                       // 3480
			}                                                                                                                 // 3481
		}                                                                                                                  // 3482
		                                                                                                                   // 3483
		                                                                                                                   // 3484
		/**                                                                                                                // 3485
		 * Apply a given function to the display child nodes of an element array (typically                                // 3486
		 * TD children of TR rows                                                                                          // 3487
		 *  @param {function} fn Method to apply to the objects                                                            // 3488
		 *  @param array {nodes} an1 List of elements to look through for display children                                 // 3489
		 *  @param array {nodes} an2 Another list (identical structure to the first) - optional                            // 3490
		 *  @memberof DataTable#oApi                                                                                       // 3491
		 */                                                                                                                // 3492
		function _fnApplyToChildren( fn, an1, an2 )                                                                        // 3493
		{                                                                                                                  // 3494
			var index=0, i=0, iLen=an1.length;                                                                                // 3495
			var nNode1, nNode2;                                                                                               // 3496
		                                                                                                                   // 3497
			while ( i < iLen )                                                                                                // 3498
			{                                                                                                                 // 3499
				nNode1 = an1[i].firstChild;                                                                                      // 3500
				nNode2 = an2 ? an2[i].firstChild : null;                                                                         // 3501
				while ( nNode1 )                                                                                                 // 3502
				{                                                                                                                // 3503
					if ( nNode1.nodeType === 1 )                                                                                    // 3504
					{                                                                                                               // 3505
						if ( an2 )                                                                                                     // 3506
						{                                                                                                              // 3507
							fn( nNode1, nNode2, index );                                                                                  // 3508
						}                                                                                                              // 3509
						else                                                                                                           // 3510
						{                                                                                                              // 3511
							fn( nNode1, index );                                                                                          // 3512
						}                                                                                                              // 3513
						index++;                                                                                                       // 3514
					}                                                                                                               // 3515
					nNode1 = nNode1.nextSibling;                                                                                    // 3516
					nNode2 = an2 ? nNode2.nextSibling : null;                                                                       // 3517
				}                                                                                                                // 3518
				i++;                                                                                                             // 3519
			}                                                                                                                 // 3520
		}                                                                                                                  // 3521
		                                                                                                                   // 3522
		/**                                                                                                                // 3523
		 * Convert a CSS unit width to pixels (e.g. 2em)                                                                   // 3524
		 *  @param {string} sWidth width to be converted                                                                   // 3525
		 *  @param {node} nParent parent to get the with for (required for relative widths) - optional                     // 3526
		 *  @returns {int} iWidth width in pixels                                                                          // 3527
		 *  @memberof DataTable#oApi                                                                                       // 3528
		 */                                                                                                                // 3529
		function _fnConvertToWidth ( sWidth, nParent )                                                                     // 3530
		{                                                                                                                  // 3531
			if ( !sWidth || sWidth === null || sWidth === '' )                                                                // 3532
			{                                                                                                                 // 3533
				return 0;                                                                                                        // 3534
			}                                                                                                                 // 3535
			                                                                                                                  // 3536
			if ( !nParent )                                                                                                   // 3537
			{                                                                                                                 // 3538
				nParent = document.body;                                                                                         // 3539
			}                                                                                                                 // 3540
			                                                                                                                  // 3541
			var iWidth;                                                                                                       // 3542
			var nTmp = document.createElement( "div" );                                                                       // 3543
			nTmp.style.width = _fnStringToCss( sWidth );                                                                      // 3544
			                                                                                                                  // 3545
			nParent.appendChild( nTmp );                                                                                      // 3546
			iWidth = nTmp.offsetWidth;                                                                                        // 3547
			nParent.removeChild( nTmp );                                                                                      // 3548
			                                                                                                                  // 3549
			return ( iWidth );                                                                                                // 3550
		}                                                                                                                  // 3551
		                                                                                                                   // 3552
		                                                                                                                   // 3553
		/**                                                                                                                // 3554
		 * Calculate the width of columns for the table                                                                    // 3555
		 *  @param {object} oSettings dataTables settings object                                                           // 3556
		 *  @memberof DataTable#oApi                                                                                       // 3557
		 */                                                                                                                // 3558
		function _fnCalculateColumnWidths ( oSettings )                                                                    // 3559
		{                                                                                                                  // 3560
			var iTableWidth = oSettings.nTable.offsetWidth;                                                                   // 3561
			var iUserInputs = 0;                                                                                              // 3562
			var iTmpWidth;                                                                                                    // 3563
			var iVisibleColumns = 0;                                                                                          // 3564
			var iColums = oSettings.aoColumns.length;                                                                         // 3565
			var i, iIndex, iCorrector, iWidth;                                                                                // 3566
			var oHeaders = $('th', oSettings.nTHead);                                                                         // 3567
			var widthAttr = oSettings.nTable.getAttribute('width');                                                           // 3568
			var nWrapper = oSettings.nTable.parentNode;                                                                       // 3569
			                                                                                                                  // 3570
			/* Convert any user input sizes into pixel sizes */                                                               // 3571
			for ( i=0 ; i<iColums ; i++ )                                                                                     // 3572
			{                                                                                                                 // 3573
				if ( oSettings.aoColumns[i].bVisible )                                                                           // 3574
				{                                                                                                                // 3575
					iVisibleColumns++;                                                                                              // 3576
					                                                                                                                // 3577
					if ( oSettings.aoColumns[i].sWidth !== null )                                                                   // 3578
					{                                                                                                               // 3579
						iTmpWidth = _fnConvertToWidth( oSettings.aoColumns[i].sWidthOrig,                                              // 3580
							nWrapper );                                                                                                   // 3581
						if ( iTmpWidth !== null )                                                                                      // 3582
						{                                                                                                              // 3583
							oSettings.aoColumns[i].sWidth = _fnStringToCss( iTmpWidth );                                                  // 3584
						}                                                                                                              // 3585
							                                                                                                              // 3586
						iUserInputs++;                                                                                                 // 3587
					}                                                                                                               // 3588
				}                                                                                                                // 3589
			}                                                                                                                 // 3590
			                                                                                                                  // 3591
			/* If the number of columns in the DOM equals the number that we have to process in                               // 3592
			 * DataTables, then we can use the offsets that are created by the web-browser. No custom                         // 3593
			 * sizes can be set in order for this to happen, nor scrolling used                                               // 3594
			 */                                                                                                               // 3595
			if ( iColums == oHeaders.length && iUserInputs === 0 && iVisibleColumns == iColums &&                             // 3596
				oSettings.oScroll.sX === "" && oSettings.oScroll.sY === "" )                                                     // 3597
			{                                                                                                                 // 3598
				for ( i=0 ; i<oSettings.aoColumns.length ; i++ )                                                                 // 3599
				{                                                                                                                // 3600
					iTmpWidth = $(oHeaders[i]).width();                                                                             // 3601
					if ( iTmpWidth !== null )                                                                                       // 3602
					{                                                                                                               // 3603
						oSettings.aoColumns[i].sWidth = _fnStringToCss( iTmpWidth );                                                   // 3604
					}                                                                                                               // 3605
				}                                                                                                                // 3606
			}                                                                                                                 // 3607
			else                                                                                                              // 3608
			{                                                                                                                 // 3609
				/* Otherwise we are going to have to do some calculations to get the width of each column.                       // 3610
				 * Construct a 1 row table with the widest node in the data, and any user defined widths,                        // 3611
				 * then insert it into the DOM and allow the browser to do all the hard work of                                  // 3612
				 * calculating table widths.                                                                                     // 3613
				 */                                                                                                              // 3614
				var                                                                                                              // 3615
					nCalcTmp = oSettings.nTable.cloneNode( false ),                                                                 // 3616
					nTheadClone = oSettings.nTHead.cloneNode(true),                                                                 // 3617
					nBody = document.createElement( 'tbody' ),                                                                      // 3618
					nTr = document.createElement( 'tr' ),                                                                           // 3619
					nDivSizing;                                                                                                     // 3620
				                                                                                                                 // 3621
				nCalcTmp.removeAttribute( "id" );                                                                                // 3622
				nCalcTmp.appendChild( nTheadClone );                                                                             // 3623
				if ( oSettings.nTFoot !== null )                                                                                 // 3624
				{                                                                                                                // 3625
					nCalcTmp.appendChild( oSettings.nTFoot.cloneNode(true) );                                                       // 3626
					_fnApplyToChildren( function(n) {                                                                               // 3627
						n.style.width = "";                                                                                            // 3628
					}, nCalcTmp.getElementsByTagName('tr') );                                                                       // 3629
				}                                                                                                                // 3630
				                                                                                                                 // 3631
				nCalcTmp.appendChild( nBody );                                                                                   // 3632
				nBody.appendChild( nTr );                                                                                        // 3633
				                                                                                                                 // 3634
				/* Remove any sizing that was previously applied by the styles */                                                // 3635
				var jqColSizing = $('thead th', nCalcTmp);                                                                       // 3636
				if ( jqColSizing.length === 0 )                                                                                  // 3637
				{                                                                                                                // 3638
					jqColSizing = $('tbody tr:eq(0)>td', nCalcTmp);                                                                 // 3639
				}                                                                                                                // 3640
		                                                                                                                   // 3641
				/* Apply custom sizing to the cloned header */                                                                   // 3642
				var nThs = _fnGetUniqueThs( oSettings, nTheadClone );                                                            // 3643
				iCorrector = 0;                                                                                                  // 3644
				for ( i=0 ; i<iColums ; i++ )                                                                                    // 3645
				{                                                                                                                // 3646
					var oColumn = oSettings.aoColumns[i];                                                                           // 3647
					if ( oColumn.bVisible && oColumn.sWidthOrig !== null && oColumn.sWidthOrig !== "" )                             // 3648
					{                                                                                                               // 3649
						nThs[i-iCorrector].style.width = _fnStringToCss( oColumn.sWidthOrig );                                         // 3650
					}                                                                                                               // 3651
					else if ( oColumn.bVisible )                                                                                    // 3652
					{                                                                                                               // 3653
						nThs[i-iCorrector].style.width = "";                                                                           // 3654
					}                                                                                                               // 3655
					else                                                                                                            // 3656
					{                                                                                                               // 3657
						iCorrector++;                                                                                                  // 3658
					}                                                                                                               // 3659
				}                                                                                                                // 3660
		                                                                                                                   // 3661
				/* Find the biggest td for each column and put it into the table */                                              // 3662
				for ( i=0 ; i<iColums ; i++ )                                                                                    // 3663
				{                                                                                                                // 3664
					if ( oSettings.aoColumns[i].bVisible )                                                                          // 3665
					{                                                                                                               // 3666
						var nTd = _fnGetWidestNode( oSettings, i );                                                                    // 3667
						if ( nTd !== null )                                                                                            // 3668
						{                                                                                                              // 3669
							nTd = nTd.cloneNode(true);                                                                                    // 3670
							if ( oSettings.aoColumns[i].sContentPadding !== "" )                                                          // 3671
							{                                                                                                             // 3672
								nTd.innerHTML += oSettings.aoColumns[i].sContentPadding;                                                     // 3673
							}                                                                                                             // 3674
							nTr.appendChild( nTd );                                                                                       // 3675
						}                                                                                                              // 3676
					}                                                                                                               // 3677
				}                                                                                                                // 3678
				                                                                                                                 // 3679
				/* Build the table and 'display' it */                                                                           // 3680
				nWrapper.appendChild( nCalcTmp );                                                                                // 3681
				                                                                                                                 // 3682
				/* When scrolling (X or Y) we want to set the width of the table as appropriate. However,                        // 3683
				 * when not scrolling leave the table width as it is. This results in slightly different,                        // 3684
				 * but I think correct behaviour                                                                                 // 3685
				 */                                                                                                              // 3686
				if ( oSettings.oScroll.sX !== "" && oSettings.oScroll.sXInner !== "" )                                           // 3687
				{                                                                                                                // 3688
					nCalcTmp.style.width = _fnStringToCss(oSettings.oScroll.sXInner);                                               // 3689
				}                                                                                                                // 3690
				else if ( oSettings.oScroll.sX !== "" )                                                                          // 3691
				{                                                                                                                // 3692
					nCalcTmp.style.width = "";                                                                                      // 3693
					if ( $(nCalcTmp).width() < nWrapper.offsetWidth )                                                               // 3694
					{                                                                                                               // 3695
						nCalcTmp.style.width = _fnStringToCss( nWrapper.offsetWidth );                                                 // 3696
					}                                                                                                               // 3697
				}                                                                                                                // 3698
				else if ( oSettings.oScroll.sY !== "" )                                                                          // 3699
				{                                                                                                                // 3700
					nCalcTmp.style.width = _fnStringToCss( nWrapper.offsetWidth );                                                  // 3701
				}                                                                                                                // 3702
				else if ( widthAttr )                                                                                            // 3703
				{                                                                                                                // 3704
					nCalcTmp.style.width = _fnStringToCss( widthAttr );                                                             // 3705
				}                                                                                                                // 3706
				nCalcTmp.style.visibility = "hidden";                                                                            // 3707
				                                                                                                                 // 3708
				/* Scrolling considerations */                                                                                   // 3709
				_fnScrollingWidthAdjust( oSettings, nCalcTmp );                                                                  // 3710
				                                                                                                                 // 3711
				/* Read the width's calculated by the browser and store them for use by the caller. We                           // 3712
				 * first of all try to use the elements in the body, but it is possible that there are                           // 3713
				 * no elements there, under which circumstances we use the header elements                                       // 3714
				 */                                                                                                              // 3715
				var oNodes = $("tbody tr:eq(0)", nCalcTmp).children();                                                           // 3716
				if ( oNodes.length === 0 )                                                                                       // 3717
				{                                                                                                                // 3718
					oNodes = _fnGetUniqueThs( oSettings, $('thead', nCalcTmp)[0] );                                                 // 3719
				}                                                                                                                // 3720
		                                                                                                                   // 3721
				/* Browsers need a bit of a hand when a width is assigned to any columns when                                    // 3722
				 * x-scrolling as they tend to collapse the table to the min-width, even if                                      // 3723
				 * we sent the column widths. So we need to keep track of what the table width                                   // 3724
				 * should be by summing the user given values, and the automatic values                                          // 3725
				 */                                                                                                              // 3726
				if ( oSettings.oScroll.sX !== "" )                                                                               // 3727
				{                                                                                                                // 3728
					var iTotal = 0;                                                                                                 // 3729
					iCorrector = 0;                                                                                                 // 3730
					for ( i=0 ; i<oSettings.aoColumns.length ; i++ )                                                                // 3731
					{                                                                                                               // 3732
						if ( oSettings.aoColumns[i].bVisible )                                                                         // 3733
						{                                                                                                              // 3734
							if ( oSettings.aoColumns[i].sWidthOrig === null )                                                             // 3735
							{                                                                                                             // 3736
								iTotal += $(oNodes[iCorrector]).outerWidth();                                                                // 3737
							}                                                                                                             // 3738
							else                                                                                                          // 3739
							{                                                                                                             // 3740
								iTotal += parseInt(oSettings.aoColumns[i].sWidth.replace('px',''), 10) +                                     // 3741
									($(oNodes[iCorrector]).outerWidth() - $(oNodes[iCorrector]).width());                                       // 3742
							}                                                                                                             // 3743
							iCorrector++;                                                                                                 // 3744
						}                                                                                                              // 3745
					}                                                                                                               // 3746
					                                                                                                                // 3747
					nCalcTmp.style.width = _fnStringToCss( iTotal );                                                                // 3748
					oSettings.nTable.style.width = _fnStringToCss( iTotal );                                                        // 3749
				}                                                                                                                // 3750
		                                                                                                                   // 3751
				iCorrector = 0;                                                                                                  // 3752
				for ( i=0 ; i<oSettings.aoColumns.length ; i++ )                                                                 // 3753
				{                                                                                                                // 3754
					if ( oSettings.aoColumns[i].bVisible )                                                                          // 3755
					{                                                                                                               // 3756
						iWidth = $(oNodes[iCorrector]).width();                                                                        // 3757
						if ( iWidth !== null && iWidth > 0 )                                                                           // 3758
						{                                                                                                              // 3759
							oSettings.aoColumns[i].sWidth = _fnStringToCss( iWidth );                                                     // 3760
						}                                                                                                              // 3761
						iCorrector++;                                                                                                  // 3762
					}                                                                                                               // 3763
				}                                                                                                                // 3764
		                                                                                                                   // 3765
				var cssWidth = $(nCalcTmp).css('width');                                                                         // 3766
				oSettings.nTable.style.width = (cssWidth.indexOf('%') !== -1) ?                                                  // 3767
				    cssWidth : _fnStringToCss( $(nCalcTmp).outerWidth() );                                                       // 3768
				nCalcTmp.parentNode.removeChild( nCalcTmp );                                                                     // 3769
			}                                                                                                                 // 3770
		                                                                                                                   // 3771
			if ( widthAttr )                                                                                                  // 3772
			{                                                                                                                 // 3773
				oSettings.nTable.style.width = _fnStringToCss( widthAttr );                                                      // 3774
			}                                                                                                                 // 3775
		}                                                                                                                  // 3776
		                                                                                                                   // 3777
		                                                                                                                   // 3778
		/**                                                                                                                // 3779
		 * Adjust a table's width to take account of scrolling                                                             // 3780
		 *  @param {object} oSettings dataTables settings object                                                           // 3781
		 *  @param {node} n table node                                                                                     // 3782
		 *  @memberof DataTable#oApi                                                                                       // 3783
		 */                                                                                                                // 3784
		function _fnScrollingWidthAdjust ( oSettings, n )                                                                  // 3785
		{                                                                                                                  // 3786
			if ( oSettings.oScroll.sX === "" && oSettings.oScroll.sY !== "" )                                                 // 3787
			{                                                                                                                 // 3788
				/* When y-scrolling only, we want to remove the width of the scroll bar so the table                             // 3789
				 * + scroll bar will fit into the area avaialble.                                                                // 3790
				 */                                                                                                              // 3791
				var iOrigWidth = $(n).width();                                                                                   // 3792
				n.style.width = _fnStringToCss( $(n).outerWidth()-oSettings.oScroll.iBarWidth );                                 // 3793
			}                                                                                                                 // 3794
			else if ( oSettings.oScroll.sX !== "" )                                                                           // 3795
			{                                                                                                                 // 3796
				/* When x-scrolling both ways, fix the table at it's current size, without adjusting */                          // 3797
				n.style.width = _fnStringToCss( $(n).outerWidth() );                                                             // 3798
			}                                                                                                                 // 3799
		}                                                                                                                  // 3800
		                                                                                                                   // 3801
		                                                                                                                   // 3802
		/**                                                                                                                // 3803
		 * Get the widest node                                                                                             // 3804
		 *  @param {object} oSettings dataTables settings object                                                           // 3805
		 *  @param {int} iCol column of interest                                                                           // 3806
		 *  @returns {node} widest table node                                                                              // 3807
		 *  @memberof DataTable#oApi                                                                                       // 3808
		 */                                                                                                                // 3809
		function _fnGetWidestNode( oSettings, iCol )                                                                       // 3810
		{                                                                                                                  // 3811
			var iMaxIndex = _fnGetMaxLenString( oSettings, iCol );                                                            // 3812
			if ( iMaxIndex < 0 )                                                                                              // 3813
			{                                                                                                                 // 3814
				return null;                                                                                                     // 3815
			}                                                                                                                 // 3816
		                                                                                                                   // 3817
			if ( oSettings.aoData[iMaxIndex].nTr === null )                                                                   // 3818
			{                                                                                                                 // 3819
				var n = document.createElement('td');                                                                            // 3820
				n.innerHTML = _fnGetCellData( oSettings, iMaxIndex, iCol, '' );                                                  // 3821
				return n;                                                                                                        // 3822
			}                                                                                                                 // 3823
			return _fnGetTdNodes(oSettings, iMaxIndex)[iCol];                                                                 // 3824
		}                                                                                                                  // 3825
		                                                                                                                   // 3826
		                                                                                                                   // 3827
		/**                                                                                                                // 3828
		 * Get the maximum strlen for each data column                                                                     // 3829
		 *  @param {object} oSettings dataTables settings object                                                           // 3830
		 *  @param {int} iCol column of interest                                                                           // 3831
		 *  @returns {string} max string length for each column                                                            // 3832
		 *  @memberof DataTable#oApi                                                                                       // 3833
		 */                                                                                                                // 3834
		function _fnGetMaxLenString( oSettings, iCol )                                                                     // 3835
		{                                                                                                                  // 3836
			var iMax = -1;                                                                                                    // 3837
			var iMaxIndex = -1;                                                                                               // 3838
			                                                                                                                  // 3839
			for ( var i=0 ; i<oSettings.aoData.length ; i++ )                                                                 // 3840
			{                                                                                                                 // 3841
				var s = _fnGetCellData( oSettings, i, iCol, 'display' )+"";                                                      // 3842
				s = s.replace( /<.*?>/g, "" );                                                                                   // 3843
				if ( s.length > iMax )                                                                                           // 3844
				{                                                                                                                // 3845
					iMax = s.length;                                                                                                // 3846
					iMaxIndex = i;                                                                                                  // 3847
				}                                                                                                                // 3848
			}                                                                                                                 // 3849
			                                                                                                                  // 3850
			return iMaxIndex;                                                                                                 // 3851
		}                                                                                                                  // 3852
		                                                                                                                   // 3853
		                                                                                                                   // 3854
		/**                                                                                                                // 3855
		 * Append a CSS unit (only if required) to a string                                                                // 3856
		 *  @param {array} aArray1 first array                                                                             // 3857
		 *  @param {array} aArray2 second array                                                                            // 3858
		 *  @returns {int} 0 if match, 1 if length is different, 2 if no match                                             // 3859
		 *  @memberof DataTable#oApi                                                                                       // 3860
		 */                                                                                                                // 3861
		function _fnStringToCss( s )                                                                                       // 3862
		{                                                                                                                  // 3863
			if ( s === null )                                                                                                 // 3864
			{                                                                                                                 // 3865
				return "0px";                                                                                                    // 3866
			}                                                                                                                 // 3867
			                                                                                                                  // 3868
			if ( typeof s == 'number' )                                                                                       // 3869
			{                                                                                                                 // 3870
				if ( s < 0 )                                                                                                     // 3871
				{                                                                                                                // 3872
					return "0px";                                                                                                   // 3873
				}                                                                                                                // 3874
				return s+"px";                                                                                                   // 3875
			}                                                                                                                 // 3876
			                                                                                                                  // 3877
			/* Check if the last character is not 0-9 */                                                                      // 3878
			var c = s.charCodeAt( s.length-1 );                                                                               // 3879
			if (c < 0x30 || c > 0x39)                                                                                         // 3880
			{                                                                                                                 // 3881
				return s;                                                                                                        // 3882
			}                                                                                                                 // 3883
			return s+"px";                                                                                                    // 3884
		}                                                                                                                  // 3885
		                                                                                                                   // 3886
		                                                                                                                   // 3887
		/**                                                                                                                // 3888
		 * Get the width of a scroll bar in this browser being used                                                        // 3889
		 *  @returns {int} width in pixels                                                                                 // 3890
		 *  @memberof DataTable#oApi                                                                                       // 3891
		 */                                                                                                                // 3892
		function _fnScrollBarWidth ()                                                                                      // 3893
		{                                                                                                                  // 3894
			var inner = document.createElement('p');                                                                          // 3895
			var style = inner.style;                                                                                          // 3896
			style.width = "100%";                                                                                             // 3897
			style.height = "200px";                                                                                           // 3898
			style.padding = "0px";                                                                                            // 3899
			                                                                                                                  // 3900
			var outer = document.createElement('div');                                                                        // 3901
			style = outer.style;                                                                                              // 3902
			style.position = "absolute";                                                                                      // 3903
			style.top = "0px";                                                                                                // 3904
			style.left = "0px";                                                                                               // 3905
			style.visibility = "hidden";                                                                                      // 3906
			style.width = "200px";                                                                                            // 3907
			style.height = "150px";                                                                                           // 3908
			style.padding = "0px";                                                                                            // 3909
			style.overflow = "hidden";                                                                                        // 3910
			outer.appendChild(inner);                                                                                         // 3911
			                                                                                                                  // 3912
			document.body.appendChild(outer);                                                                                 // 3913
			var w1 = inner.offsetWidth;                                                                                       // 3914
			outer.style.overflow = 'scroll';                                                                                  // 3915
			var w2 = inner.offsetWidth;                                                                                       // 3916
			if ( w1 == w2 )                                                                                                   // 3917
			{                                                                                                                 // 3918
				w2 = outer.clientWidth;                                                                                          // 3919
			}                                                                                                                 // 3920
			                                                                                                                  // 3921
			document.body.removeChild(outer);                                                                                 // 3922
			return (w1 - w2);                                                                                                 // 3923
		}                                                                                                                  // 3924
		                                                                                                                   // 3925
		/**                                                                                                                // 3926
		 * Change the order of the table                                                                                   // 3927
		 *  @param {object} oSettings dataTables settings object                                                           // 3928
		 *  @param {bool} bApplyClasses optional - should we apply classes or not                                          // 3929
		 *  @memberof DataTable#oApi                                                                                       // 3930
		 */                                                                                                                // 3931
		function _fnSort ( oSettings, bApplyClasses )                                                                      // 3932
		{                                                                                                                  // 3933
			var                                                                                                               // 3934
				i, iLen, j, jLen, k, kLen,                                                                                       // 3935
				sDataType, nTh,                                                                                                  // 3936
				aaSort = [],                                                                                                     // 3937
			 	aiOrig = [],                                                                                                    // 3938
				oSort = DataTable.ext.oSort,                                                                                     // 3939
				aoData = oSettings.aoData,                                                                                       // 3940
				aoColumns = oSettings.aoColumns,                                                                                 // 3941
				oAria = oSettings.oLanguage.oAria;                                                                               // 3942
			                                                                                                                  // 3943
			/* No sorting required if server-side or no sorting array */                                                      // 3944
			if ( !oSettings.oFeatures.bServerSide &&                                                                          // 3945
				(oSettings.aaSorting.length !== 0 || oSettings.aaSortingFixed !== null) )                                        // 3946
			{                                                                                                                 // 3947
				aaSort = ( oSettings.aaSortingFixed !== null ) ?                                                                 // 3948
					oSettings.aaSortingFixed.concat( oSettings.aaSorting ) :                                                        // 3949
					oSettings.aaSorting.slice();                                                                                    // 3950
				                                                                                                                 // 3951
				/* If there is a sorting data type, and a function belonging to it, then we need to                              // 3952
				 * get the data from the developer's function and apply it for this column                                       // 3953
				 */                                                                                                              // 3954
				for ( i=0 ; i<aaSort.length ; i++ )                                                                              // 3955
				{                                                                                                                // 3956
					var iColumn = aaSort[i][0];                                                                                     // 3957
					var iVisColumn = _fnColumnIndexToVisible( oSettings, iColumn );                                                 // 3958
					sDataType = oSettings.aoColumns[ iColumn ].sSortDataType;                                                       // 3959
					if ( DataTable.ext.afnSortData[sDataType] )                                                                     // 3960
					{                                                                                                               // 3961
						var aData = DataTable.ext.afnSortData[sDataType].call(                                                         // 3962
							oSettings.oInstance, oSettings, iColumn, iVisColumn                                                           // 3963
						);                                                                                                             // 3964
						if ( aData.length === aoData.length )                                                                          // 3965
						{                                                                                                              // 3966
							for ( j=0, jLen=aoData.length ; j<jLen ; j++ )                                                                // 3967
							{                                                                                                             // 3968
								_fnSetCellData( oSettings, j, iColumn, aData[j] );                                                           // 3969
							}                                                                                                             // 3970
						}                                                                                                              // 3971
						else                                                                                                           // 3972
						{                                                                                                              // 3973
							_fnLog( oSettings, 0, "Returned data sort array (col "+iColumn+") is the wrong length" );                     // 3974
						}                                                                                                              // 3975
					}                                                                                                               // 3976
				}                                                                                                                // 3977
				                                                                                                                 // 3978
				/* Create a value - key array of the current row positions such that we can use their                            // 3979
				 * current position during the sort, if values match, in order to perform stable sorting                         // 3980
				 */                                                                                                              // 3981
				for ( i=0, iLen=oSettings.aiDisplayMaster.length ; i<iLen ; i++ )                                                // 3982
				{                                                                                                                // 3983
					aiOrig[ oSettings.aiDisplayMaster[i] ] = i;                                                                     // 3984
				}                                                                                                                // 3985
		                                                                                                                   // 3986
				/* Build an internal data array which is specific to the sort, so we can get and prep                            // 3987
				 * the data to be sorted only once, rather than needing to do it every time the sorting                          // 3988
				 * function runs. This make the sorting function a very simple comparison                                        // 3989
				 */                                                                                                              // 3990
				var iSortLen = aaSort.length;                                                                                    // 3991
				var fnSortFormat, aDataSort;                                                                                     // 3992
				for ( i=0, iLen=aoData.length ; i<iLen ; i++ )                                                                   // 3993
				{                                                                                                                // 3994
					for ( j=0 ; j<iSortLen ; j++ )                                                                                  // 3995
					{                                                                                                               // 3996
						aDataSort = aoColumns[ aaSort[j][0] ].aDataSort;                                                               // 3997
		                                                                                                                   // 3998
						for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )                                                              // 3999
						{                                                                                                              // 4000
							sDataType = aoColumns[ aDataSort[k] ].sType;                                                                  // 4001
							fnSortFormat = oSort[ (sDataType ? sDataType : 'string')+"-pre" ];                                            // 4002
							                                                                                                              // 4003
							aoData[i]._aSortData[ aDataSort[k] ] = fnSortFormat ?                                                         // 4004
								fnSortFormat( _fnGetCellData( oSettings, i, aDataSort[k], 'sort' ) ) :                                       // 4005
								_fnGetCellData( oSettings, i, aDataSort[k], 'sort' );                                                        // 4006
						}                                                                                                              // 4007
					}                                                                                                               // 4008
				}                                                                                                                // 4009
				                                                                                                                 // 4010
				/* Do the sort - here we want multi-column sorting based on a given data source (column)                         // 4011
				 * and sorting function (from oSort) in a certain direction. It's reasonably complex to                          // 4012
				 * follow on it's own, but this is what we want (example two column sorting):                                    // 4013
				 *  fnLocalSorting = function(a,b){                                                                              // 4014
				 *  	var iTest;                                                                                                  // 4015
				 *  	iTest = oSort['string-asc']('data11', 'data12');                                                            // 4016
				 *  	if (iTest !== 0)                                                                                            // 4017
				 *  		return iTest;                                                                                              // 4018
				 *    iTest = oSort['numeric-desc']('data21', 'data22');                                                         // 4019
				 *    if (iTest !== 0)                                                                                           // 4020
				 *  		return iTest;                                                                                              // 4021
				 *  	return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );                                                        // 4022
				 *  }                                                                                                            // 4023
				 * Basically we have a test for each sorting column, if the data in that column is equal,                        // 4024
				 * test the next column. If all columns match, then we use a numeric sort on the row                             // 4025
				 * positions in the original data array to provide a stable sort.                                                // 4026
				 */                                                                                                              // 4027
				oSettings.aiDisplayMaster.sort( function ( a, b ) {                                                              // 4028
					var k, l, lLen, iTest, aDataSort, sDataType;                                                                    // 4029
					for ( k=0 ; k<iSortLen ; k++ )                                                                                  // 4030
					{                                                                                                               // 4031
						aDataSort = aoColumns[ aaSort[k][0] ].aDataSort;                                                               // 4032
		                                                                                                                   // 4033
						for ( l=0, lLen=aDataSort.length ; l<lLen ; l++ )                                                              // 4034
						{                                                                                                              // 4035
							sDataType = aoColumns[ aDataSort[l] ].sType;                                                                  // 4036
							                                                                                                              // 4037
							iTest = oSort[ (sDataType ? sDataType : 'string')+"-"+aaSort[k][1] ](                                         // 4038
								aoData[a]._aSortData[ aDataSort[l] ],                                                                        // 4039
								aoData[b]._aSortData[ aDataSort[l] ]                                                                         // 4040
							);                                                                                                            // 4041
						                                                                                                               // 4042
							if ( iTest !== 0 )                                                                                            // 4043
							{                                                                                                             // 4044
								return iTest;                                                                                                // 4045
							}                                                                                                             // 4046
						}                                                                                                              // 4047
					}                                                                                                               // 4048
					                                                                                                                // 4049
					return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );                                                            // 4050
				} );                                                                                                             // 4051
			}                                                                                                                 // 4052
			                                                                                                                  // 4053
			/* Alter the sorting classes to take account of the changes */                                                    // 4054
			if ( (bApplyClasses === undefined || bApplyClasses) && !oSettings.oFeatures.bDeferRender )                        // 4055
			{                                                                                                                 // 4056
				_fnSortingClasses( oSettings );                                                                                  // 4057
			}                                                                                                                 // 4058
		                                                                                                                   // 4059
			for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                       // 4060
			{                                                                                                                 // 4061
				var sTitle = aoColumns[i].sTitle.replace( /<.*?>/g, "" );                                                        // 4062
				nTh = aoColumns[i].nTh;                                                                                          // 4063
				nTh.removeAttribute('aria-sort');                                                                                // 4064
				nTh.removeAttribute('aria-label');                                                                               // 4065
				                                                                                                                 // 4066
				/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */                      // 4067
				if ( aoColumns[i].bSortable )                                                                                    // 4068
				{                                                                                                                // 4069
					if ( aaSort.length > 0 && aaSort[0][0] == i )                                                                   // 4070
					{                                                                                                               // 4071
						nTh.setAttribute('aria-sort', aaSort[0][1]=="asc" ? "ascending" : "descending" );                              // 4072
						                                                                                                               // 4073
						var nextSort = (aoColumns[i].asSorting[ aaSort[0][2]+1 ]) ?                                                    // 4074
							aoColumns[i].asSorting[ aaSort[0][2]+1 ] : aoColumns[i].asSorting[0];                                         // 4075
						nTh.setAttribute('aria-label', sTitle+                                                                         // 4076
							(nextSort=="asc" ? oAria.sSortAscending : oAria.sSortDescending) );                                           // 4077
					}                                                                                                               // 4078
					else                                                                                                            // 4079
					{                                                                                                               // 4080
						nTh.setAttribute('aria-label', sTitle+                                                                         // 4081
							(aoColumns[i].asSorting[0]=="asc" ? oAria.sSortAscending : oAria.sSortDescending) );                          // 4082
					}                                                                                                               // 4083
				}                                                                                                                // 4084
				else                                                                                                             // 4085
				{                                                                                                                // 4086
					nTh.setAttribute('aria-label', sTitle);                                                                         // 4087
				}                                                                                                                // 4088
			}                                                                                                                 // 4089
			                                                                                                                  // 4090
			/* Tell the draw function that we have sorted the data */                                                         // 4091
			oSettings.bSorted = true;                                                                                         // 4092
			$(oSettings.oInstance).trigger('sort', oSettings);                                                                // 4093
			                                                                                                                  // 4094
			/* Copy the master data into the draw array and re-draw */                                                        // 4095
			if ( oSettings.oFeatures.bFilter )                                                                                // 4096
			{                                                                                                                 // 4097
				/* _fnFilter() will redraw the table for us */                                                                   // 4098
				_fnFilterComplete( oSettings, oSettings.oPreviousSearch, 1 );                                                    // 4099
			}                                                                                                                 // 4100
			else                                                                                                              // 4101
			{                                                                                                                 // 4102
				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();                                                         // 4103
				oSettings._iDisplayStart = 0; /* reset display back to page 0 */                                                 // 4104
				_fnCalculateEnd( oSettings );                                                                                    // 4105
				_fnDraw( oSettings );                                                                                            // 4106
			}                                                                                                                 // 4107
		}                                                                                                                  // 4108
		                                                                                                                   // 4109
		                                                                                                                   // 4110
		/**                                                                                                                // 4111
		 * Attach a sort handler (click) to a node                                                                         // 4112
		 *  @param {object} oSettings dataTables settings object                                                           // 4113
		 *  @param {node} nNode node to attach the handler to                                                              // 4114
		 *  @param {int} iDataIndex column sorting index                                                                   // 4115
		 *  @param {function} [fnCallback] callback function                                                               // 4116
		 *  @memberof DataTable#oApi                                                                                       // 4117
		 */                                                                                                                // 4118
		function _fnSortAttachListener ( oSettings, nNode, iDataIndex, fnCallback )                                        // 4119
		{                                                                                                                  // 4120
			_fnBindAction( nNode, {}, function (e) {                                                                          // 4121
				/* If the column is not sortable - don't to anything */                                                          // 4122
				if ( oSettings.aoColumns[iDataIndex].bSortable === false )                                                       // 4123
				{                                                                                                                // 4124
					return;                                                                                                         // 4125
				}                                                                                                                // 4126
				                                                                                                                 // 4127
				/*                                                                                                               // 4128
				 * This is a little bit odd I admit... I declare a temporary function inside the scope of                        // 4129
				 * _fnBuildHead and the click handler in order that the code presented here can be used                          // 4130
				 * twice - once for when bProcessing is enabled, and another time for when it is                                 // 4131
				 * disabled, as we need to perform slightly different actions.                                                   // 4132
				 *   Basically the issue here is that the Javascript engine in modern browsers don't                             // 4133
				 * appear to allow the rendering engine to update the display while it is still executing                        // 4134
				 * it's thread (well - it does but only after long intervals). This means that the                               // 4135
				 * 'processing' display doesn't appear for a table sort. To break the js thread up a bit                         // 4136
				 * I force an execution break by using setTimeout - but this breaks the expected                                 // 4137
				 * thread continuation for the end-developer's point of view (their code would execute                           // 4138
				 * too early), so we only do it when we absolutely have to.                                                      // 4139
				 */                                                                                                              // 4140
				var fnInnerSorting = function () {                                                                               // 4141
					var iColumn, iNextSort;                                                                                         // 4142
					                                                                                                                // 4143
					/* If the shift key is pressed then we are multiple column sorting */                                           // 4144
					if ( e.shiftKey )                                                                                               // 4145
					{                                                                                                               // 4146
						/* Are we already doing some kind of sort on this column? */                                                   // 4147
						var bFound = false;                                                                                            // 4148
						for ( var i=0 ; i<oSettings.aaSorting.length ; i++ )                                                           // 4149
						{                                                                                                              // 4150
							if ( oSettings.aaSorting[i][0] == iDataIndex )                                                                // 4151
							{                                                                                                             // 4152
								bFound = true;                                                                                               // 4153
								iColumn = oSettings.aaSorting[i][0];                                                                         // 4154
								iNextSort = oSettings.aaSorting[i][2]+1;                                                                     // 4155
								                                                                                                             // 4156
								if ( !oSettings.aoColumns[iColumn].asSorting[iNextSort] )                                                    // 4157
								{                                                                                                            // 4158
									/* Reached the end of the sorting options, remove from multi-col sort */                                    // 4159
									oSettings.aaSorting.splice( i, 1 );                                                                         // 4160
								}                                                                                                            // 4161
								else                                                                                                         // 4162
								{                                                                                                            // 4163
									/* Move onto next sorting direction */                                                                      // 4164
									oSettings.aaSorting[i][1] = oSettings.aoColumns[iColumn].asSorting[iNextSort];                              // 4165
									oSettings.aaSorting[i][2] = iNextSort;                                                                      // 4166
								}                                                                                                            // 4167
								break;                                                                                                       // 4168
							}                                                                                                             // 4169
						}                                                                                                              // 4170
						                                                                                                               // 4171
						/* No sort yet - add it in */                                                                                  // 4172
						if ( bFound === false )                                                                                        // 4173
						{                                                                                                              // 4174
							oSettings.aaSorting.push( [ iDataIndex,                                                                       // 4175
								oSettings.aoColumns[iDataIndex].asSorting[0], 0 ] );                                                         // 4176
						}                                                                                                              // 4177
					}                                                                                                               // 4178
					else                                                                                                            // 4179
					{                                                                                                               // 4180
						/* If no shift key then single column sort */                                                                  // 4181
						if ( oSettings.aaSorting.length == 1 && oSettings.aaSorting[0][0] == iDataIndex )                              // 4182
						{                                                                                                              // 4183
							iColumn = oSettings.aaSorting[0][0];                                                                          // 4184
							iNextSort = oSettings.aaSorting[0][2]+1;                                                                      // 4185
							if ( !oSettings.aoColumns[iColumn].asSorting[iNextSort] )                                                     // 4186
							{                                                                                                             // 4187
								iNextSort = 0;                                                                                               // 4188
							}                                                                                                             // 4189
							oSettings.aaSorting[0][1] = oSettings.aoColumns[iColumn].asSorting[iNextSort];                                // 4190
							oSettings.aaSorting[0][2] = iNextSort;                                                                        // 4191
						}                                                                                                              // 4192
						else                                                                                                           // 4193
						{                                                                                                              // 4194
							oSettings.aaSorting.splice( 0, oSettings.aaSorting.length );                                                  // 4195
							oSettings.aaSorting.push( [ iDataIndex,                                                                       // 4196
								oSettings.aoColumns[iDataIndex].asSorting[0], 0 ] );                                                         // 4197
						}                                                                                                              // 4198
					}                                                                                                               // 4199
					                                                                                                                // 4200
					/* Run the sort */                                                                                              // 4201
					_fnSort( oSettings );                                                                                           // 4202
				}; /* /fnInnerSorting */                                                                                         // 4203
				                                                                                                                 // 4204
				if ( !oSettings.oFeatures.bProcessing )                                                                          // 4205
				{                                                                                                                // 4206
					fnInnerSorting();                                                                                               // 4207
				}                                                                                                                // 4208
				else                                                                                                             // 4209
				{                                                                                                                // 4210
					_fnProcessingDisplay( oSettings, true );                                                                        // 4211
					setTimeout( function() {                                                                                        // 4212
						fnInnerSorting();                                                                                              // 4213
						if ( !oSettings.oFeatures.bServerSide )                                                                        // 4214
						{                                                                                                              // 4215
							_fnProcessingDisplay( oSettings, false );                                                                     // 4216
						}                                                                                                              // 4217
					}, 0 );                                                                                                         // 4218
				}                                                                                                                // 4219
				                                                                                                                 // 4220
				/* Call the user specified callback function - used for async user interaction */                                // 4221
				if ( typeof fnCallback == 'function' )                                                                           // 4222
				{                                                                                                                // 4223
					fnCallback( oSettings );                                                                                        // 4224
				}                                                                                                                // 4225
			} );                                                                                                              // 4226
		}                                                                                                                  // 4227
		                                                                                                                   // 4228
		                                                                                                                   // 4229
		/**                                                                                                                // 4230
		 * Set the sorting classes on the header, Note: it is safe to call this function                                   // 4231
		 * when bSort and bSortClasses are false                                                                           // 4232
		 *  @param {object} oSettings dataTables settings object                                                           // 4233
		 *  @memberof DataTable#oApi                                                                                       // 4234
		 */                                                                                                                // 4235
		function _fnSortingClasses( oSettings )                                                                            // 4236
		{                                                                                                                  // 4237
			var i, iLen, j, jLen, iFound;                                                                                     // 4238
			var aaSort, sClass;                                                                                               // 4239
			var iColumns = oSettings.aoColumns.length;                                                                        // 4240
			var oClasses = oSettings.oClasses;                                                                                // 4241
			                                                                                                                  // 4242
			for ( i=0 ; i<iColumns ; i++ )                                                                                    // 4243
			{                                                                                                                 // 4244
				if ( oSettings.aoColumns[i].bSortable )                                                                          // 4245
				{                                                                                                                // 4246
					$(oSettings.aoColumns[i].nTh).removeClass( oClasses.sSortAsc +" "+ oClasses.sSortDesc +                         // 4247
						" "+ oSettings.aoColumns[i].sSortingClass );                                                                   // 4248
				}                                                                                                                // 4249
			}                                                                                                                 // 4250
			                                                                                                                  // 4251
			if ( oSettings.aaSortingFixed !== null )                                                                          // 4252
			{                                                                                                                 // 4253
				aaSort = oSettings.aaSortingFixed.concat( oSettings.aaSorting );                                                 // 4254
			}                                                                                                                 // 4255
			else                                                                                                              // 4256
			{                                                                                                                 // 4257
				aaSort = oSettings.aaSorting.slice();                                                                            // 4258
			}                                                                                                                 // 4259
			                                                                                                                  // 4260
			/* Apply the required classes to the header */                                                                    // 4261
			for ( i=0 ; i<oSettings.aoColumns.length ; i++ )                                                                  // 4262
			{                                                                                                                 // 4263
				if ( oSettings.aoColumns[i].bSortable )                                                                          // 4264
				{                                                                                                                // 4265
					sClass = oSettings.aoColumns[i].sSortingClass;                                                                  // 4266
					iFound = -1;                                                                                                    // 4267
					for ( j=0 ; j<aaSort.length ; j++ )                                                                             // 4268
					{                                                                                                               // 4269
						if ( aaSort[j][0] == i )                                                                                       // 4270
						{                                                                                                              // 4271
							sClass = ( aaSort[j][1] == "asc" ) ?                                                                          // 4272
								oClasses.sSortAsc : oClasses.sSortDesc;                                                                      // 4273
							iFound = j;                                                                                                   // 4274
							break;                                                                                                        // 4275
						}                                                                                                              // 4276
					}                                                                                                               // 4277
					$(oSettings.aoColumns[i].nTh).addClass( sClass );                                                               // 4278
					                                                                                                                // 4279
					if ( oSettings.bJUI )                                                                                           // 4280
					{                                                                                                               // 4281
						/* jQuery UI uses extra markup */                                                                              // 4282
						var jqSpan = $("span."+oClasses.sSortIcon,  oSettings.aoColumns[i].nTh);                                       // 4283
						jqSpan.removeClass(oClasses.sSortJUIAsc +" "+ oClasses.sSortJUIDesc +" "+                                      // 4284
							oClasses.sSortJUI +" "+ oClasses.sSortJUIAscAllowed +" "+ oClasses.sSortJUIDescAllowed );                     // 4285
						                                                                                                               // 4286
						var sSpanClass;                                                                                                // 4287
						if ( iFound == -1 )                                                                                            // 4288
						{                                                                                                              // 4289
						 	sSpanClass = oSettings.aoColumns[i].sSortingClassJUI;                                                        // 4290
						}                                                                                                              // 4291
						else if ( aaSort[iFound][1] == "asc" )                                                                         // 4292
						{                                                                                                              // 4293
							sSpanClass = oClasses.sSortJUIAsc;                                                                            // 4294
						}                                                                                                              // 4295
						else                                                                                                           // 4296
						{                                                                                                              // 4297
							sSpanClass = oClasses.sSortJUIDesc;                                                                           // 4298
						}                                                                                                              // 4299
						                                                                                                               // 4300
						jqSpan.addClass( sSpanClass );                                                                                 // 4301
					}                                                                                                               // 4302
				}                                                                                                                // 4303
				else                                                                                                             // 4304
				{                                                                                                                // 4305
					/* No sorting on this column, so add the base class. This will have been assigned by                            // 4306
					 * _fnAddColumn                                                                                                 // 4307
					 */                                                                                                             // 4308
					$(oSettings.aoColumns[i].nTh).addClass( oSettings.aoColumns[i].sSortingClass );                                 // 4309
				}                                                                                                                // 4310
			}                                                                                                                 // 4311
			                                                                                                                  // 4312
			/*                                                                                                                // 4313
			 * Apply the required classes to the table body                                                                   // 4314
			 * Note that this is given as a feature switch since it can significantly slow down a sort                        // 4315
			 * on large data sets (adding and removing of classes is always slow at the best of times..)                      // 4316
			 * Further to this, note that this code is admittedly fairly ugly. It could be made a lot                         // 4317
			 * simpler using jQuery selectors and add/removeClass, but that is significantly slower                           // 4318
			 * (on the order of 5 times slower) - hence the direct DOM manipulation here.                                     // 4319
			 * Note that for deferred drawing we do use jQuery - the reason being that taking the first                       // 4320
			 * row found to see if the whole column needs processed can miss classes since the first                          // 4321
			 * column might be new.                                                                                           // 4322
			 */                                                                                                               // 4323
			sClass = oClasses.sSortColumn;                                                                                    // 4324
			                                                                                                                  // 4325
			if ( oSettings.oFeatures.bSort && oSettings.oFeatures.bSortClasses )                                              // 4326
			{                                                                                                                 // 4327
				var nTds = _fnGetTdNodes( oSettings );                                                                           // 4328
				                                                                                                                 // 4329
				/* Determine what the sorting class for each column should be */                                                 // 4330
				var iClass, iTargetCol;                                                                                          // 4331
				var asClasses = [];                                                                                              // 4332
				for (i = 0; i < iColumns; i++)                                                                                   // 4333
				{                                                                                                                // 4334
					asClasses.push("");                                                                                             // 4335
				}                                                                                                                // 4336
				for (i = 0, iClass = 1; i < aaSort.length; i++)                                                                  // 4337
				{                                                                                                                // 4338
					iTargetCol = parseInt( aaSort[i][0], 10 );                                                                      // 4339
					asClasses[iTargetCol] = sClass + iClass;                                                                        // 4340
					                                                                                                                // 4341
					if ( iClass < 3 )                                                                                               // 4342
					{                                                                                                               // 4343
						iClass++;                                                                                                      // 4344
					}                                                                                                               // 4345
				}                                                                                                                // 4346
				                                                                                                                 // 4347
				/* Make changes to the classes for each cell as needed */                                                        // 4348
				var reClass = new RegExp(sClass + "[123]");                                                                      // 4349
				var sTmpClass, sCurrentClass, sNewClass;                                                                         // 4350
				for ( i=0, iLen=nTds.length; i<iLen; i++ )                                                                       // 4351
				{                                                                                                                // 4352
					/* Determine which column we're looking at */                                                                   // 4353
					iTargetCol = i % iColumns;                                                                                      // 4354
					                                                                                                                // 4355
					/* What is the full list of classes now */                                                                      // 4356
					sCurrentClass = nTds[i].className;                                                                              // 4357
					/* What sorting class should be applied? */                                                                     // 4358
					sNewClass = asClasses[iTargetCol];                                                                              // 4359
					/* What would the new full list be if we did a replacement? */                                                  // 4360
					sTmpClass = sCurrentClass.replace(reClass, sNewClass);                                                          // 4361
					                                                                                                                // 4362
					if ( sTmpClass != sCurrentClass )                                                                               // 4363
					{                                                                                                               // 4364
						/* We changed something */                                                                                     // 4365
						nTds[i].className = $.trim( sTmpClass );                                                                       // 4366
					}                                                                                                               // 4367
					else if ( sNewClass.length > 0 && sCurrentClass.indexOf(sNewClass) == -1 )                                      // 4368
					{                                                                                                               // 4369
						/* We need to add a class */                                                                                   // 4370
						nTds[i].className = sCurrentClass + " " + sNewClass;                                                           // 4371
					}                                                                                                               // 4372
				}                                                                                                                // 4373
			}                                                                                                                 // 4374
		}                                                                                                                  // 4375
		                                                                                                                   // 4376
		                                                                                                                   // 4377
		                                                                                                                   // 4378
		/**                                                                                                                // 4379
		 * Save the state of a table in a cookie such that the page can be reloaded                                        // 4380
		 *  @param {object} oSettings dataTables settings object                                                           // 4381
		 *  @memberof DataTable#oApi                                                                                       // 4382
		 */                                                                                                                // 4383
		function _fnSaveState ( oSettings )                                                                                // 4384
		{                                                                                                                  // 4385
			if ( !oSettings.oFeatures.bStateSave || oSettings.bDestroying )                                                   // 4386
			{                                                                                                                 // 4387
				return;                                                                                                          // 4388
			}                                                                                                                 // 4389
		                                                                                                                   // 4390
			/* Store the interesting variables */                                                                             // 4391
			var i, iLen, bInfinite=oSettings.oScroll.bInfinite;                                                               // 4392
			var oState = {                                                                                                    // 4393
				"iCreate":      new Date().getTime(),                                                                            // 4394
				"iStart":       (bInfinite ? 0 : oSettings._iDisplayStart),                                                      // 4395
				"iEnd":         (bInfinite ? oSettings._iDisplayLength : oSettings._iDisplayEnd),                                // 4396
				"iLength":      oSettings._iDisplayLength,                                                                       // 4397
				"aaSorting":    $.extend( true, [], oSettings.aaSorting ),                                                       // 4398
				"oSearch":      $.extend( true, {}, oSettings.oPreviousSearch ),                                                 // 4399
				"aoSearchCols": $.extend( true, [], oSettings.aoPreSearchCols ),                                                 // 4400
				"abVisCols":    []                                                                                               // 4401
			};                                                                                                                // 4402
		                                                                                                                   // 4403
			for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                       // 4404
			{                                                                                                                 // 4405
				oState.abVisCols.push( oSettings.aoColumns[i].bVisible );                                                        // 4406
			}                                                                                                                 // 4407
		                                                                                                                   // 4408
			_fnCallbackFire( oSettings, "aoStateSaveParams", 'stateSaveParams', [oSettings, oState] );                        // 4409
			                                                                                                                  // 4410
			oSettings.fnStateSave.call( oSettings.oInstance, oSettings, oState );                                             // 4411
		}                                                                                                                  // 4412
		                                                                                                                   // 4413
		                                                                                                                   // 4414
		/**                                                                                                                // 4415
		 * Attempt to load a saved table state from a cookie                                                               // 4416
		 *  @param {object} oSettings dataTables settings object                                                           // 4417
		 *  @param {object} oInit DataTables init object so we can override settings                                       // 4418
		 *  @memberof DataTable#oApi                                                                                       // 4419
		 */                                                                                                                // 4420
		function _fnLoadState ( oSettings, oInit )                                                                         // 4421
		{                                                                                                                  // 4422
			if ( !oSettings.oFeatures.bStateSave )                                                                            // 4423
			{                                                                                                                 // 4424
				return;                                                                                                          // 4425
			}                                                                                                                 // 4426
		                                                                                                                   // 4427
			var oData = oSettings.fnStateLoad.call( oSettings.oInstance, oSettings );                                         // 4428
			if ( !oData )                                                                                                     // 4429
			{                                                                                                                 // 4430
				return;                                                                                                          // 4431
			}                                                                                                                 // 4432
			                                                                                                                  // 4433
			/* Allow custom and plug-in manipulation functions to alter the saved data set and                                // 4434
			 * cancelling of loading by returning false                                                                       // 4435
			 */                                                                                                               // 4436
			var abStateLoad = _fnCallbackFire( oSettings, 'aoStateLoadParams', 'stateLoadParams', [oSettings, oData] );       // 4437
			if ( $.inArray( false, abStateLoad ) !== -1 )                                                                     // 4438
			{                                                                                                                 // 4439
				return;                                                                                                          // 4440
			}                                                                                                                 // 4441
			                                                                                                                  // 4442
			/* Store the saved state so it might be accessed at any time */                                                   // 4443
			oSettings.oLoadedState = $.extend( true, {}, oData );                                                             // 4444
			                                                                                                                  // 4445
			/* Restore key features */                                                                                        // 4446
			oSettings._iDisplayStart    = oData.iStart;                                                                       // 4447
			oSettings.iInitDisplayStart = oData.iStart;                                                                       // 4448
			oSettings._iDisplayEnd      = oData.iEnd;                                                                         // 4449
			oSettings._iDisplayLength   = oData.iLength;                                                                      // 4450
			oSettings.aaSorting         = oData.aaSorting.slice();                                                            // 4451
			oSettings.saved_aaSorting   = oData.aaSorting.slice();                                                            // 4452
			                                                                                                                  // 4453
			/* Search filtering  */                                                                                           // 4454
			$.extend( oSettings.oPreviousSearch, oData.oSearch );                                                             // 4455
			$.extend( true, oSettings.aoPreSearchCols, oData.aoSearchCols );                                                  // 4456
			                                                                                                                  // 4457
			/* Column visibility state                                                                                        // 4458
			 * Pass back visibility settings to the init handler, but to do not here override                                 // 4459
			 * the init object that the user might have passed in                                                             // 4460
			 */                                                                                                               // 4461
			oInit.saved_aoColumns = [];                                                                                       // 4462
			for ( var i=0 ; i<oData.abVisCols.length ; i++ )                                                                  // 4463
			{                                                                                                                 // 4464
				oInit.saved_aoColumns[i] = {};                                                                                   // 4465
				oInit.saved_aoColumns[i].bVisible = oData.abVisCols[i];                                                          // 4466
			}                                                                                                                 // 4467
		                                                                                                                   // 4468
			_fnCallbackFire( oSettings, 'aoStateLoaded', 'stateLoaded', [oSettings, oData] );                                 // 4469
		}                                                                                                                  // 4470
		                                                                                                                   // 4471
		                                                                                                                   // 4472
		/**                                                                                                                // 4473
		 * Create a new cookie with a value to store the state of a table                                                  // 4474
		 *  @param {string} sName name of the cookie to create                                                             // 4475
		 *  @param {string} sValue the value the cookie should take                                                        // 4476
		 *  @param {int} iSecs duration of the cookie                                                                      // 4477
		 *  @param {string} sBaseName sName is made up of the base + file name - this is the base                          // 4478
		 *  @param {function} fnCallback User definable function to modify the cookie                                      // 4479
		 *  @memberof DataTable#oApi                                                                                       // 4480
		 */                                                                                                                // 4481
		function _fnCreateCookie ( sName, sValue, iSecs, sBaseName, fnCallback )                                           // 4482
		{                                                                                                                  // 4483
			var date = new Date();                                                                                            // 4484
			date.setTime( date.getTime()+(iSecs*1000) );                                                                      // 4485
			                                                                                                                  // 4486
			/*                                                                                                                // 4487
			 * Shocking but true - it would appear IE has major issues with having the path not having                        // 4488
			 * a trailing slash on it. We need the cookie to be available based on the path, so we                            // 4489
			 * have to append the file name to the cookie name. Appalling. Thanks to vex for adding the                       // 4490
			 * patch to use at least some of the path                                                                         // 4491
			 */                                                                                                               // 4492
			var aParts = window.location.pathname.split('/');                                                                 // 4493
			var sNameFile = sName + '_' + aParts.pop().replace(/[\/:]/g,"").toLowerCase();                                    // 4494
			var sFullCookie, oData;                                                                                           // 4495
			                                                                                                                  // 4496
			if ( fnCallback !== null )                                                                                        // 4497
			{                                                                                                                 // 4498
				oData = (typeof $.parseJSON === 'function') ?                                                                    // 4499
					$.parseJSON( sValue ) : eval( '('+sValue+')' );                                                                 // 4500
				sFullCookie = fnCallback( sNameFile, oData, date.toGMTString(),                                                  // 4501
					aParts.join('/')+"/" );                                                                                         // 4502
			}                                                                                                                 // 4503
			else                                                                                                              // 4504
			{                                                                                                                 // 4505
				sFullCookie = sNameFile + "=" + encodeURIComponent(sValue) +                                                     // 4506
					"; expires=" + date.toGMTString() +"; path=" + aParts.join('/')+"/";                                            // 4507
			}                                                                                                                 // 4508
			                                                                                                                  // 4509
			/* Are we going to go over the cookie limit of 4KiB? If so, try to delete a cookies                               // 4510
			 * belonging to DataTables.                                                                                       // 4511
			 */                                                                                                               // 4512
			var                                                                                                               // 4513
				aCookies =document.cookie.split(';'),                                                                            // 4514
				iNewCookieLen = sFullCookie.split(';')[0].length,                                                                // 4515
				aOldCookies = [];                                                                                                // 4516
			                                                                                                                  // 4517
			if ( iNewCookieLen+document.cookie.length+10 > 4096 ) /* Magic 10 for padding */                                  // 4518
			{                                                                                                                 // 4519
				for ( var i=0, iLen=aCookies.length ; i<iLen ; i++ )                                                             // 4520
				{                                                                                                                // 4521
					if ( aCookies[i].indexOf( sBaseName ) != -1 )                                                                   // 4522
					{                                                                                                               // 4523
						/* It's a DataTables cookie, so eval it and check the time stamp */                                            // 4524
						var aSplitCookie = aCookies[i].split('=');                                                                     // 4525
						try {                                                                                                          // 4526
							oData = eval( '('+decodeURIComponent(aSplitCookie[1])+')' );                                                  // 4527
		                                                                                                                   // 4528
							if ( oData && oData.iCreate )                                                                                 // 4529
							{                                                                                                             // 4530
								aOldCookies.push( {                                                                                          // 4531
									"name": aSplitCookie[0],                                                                                    // 4532
									"time": oData.iCreate                                                                                       // 4533
								} );                                                                                                         // 4534
							}                                                                                                             // 4535
						}                                                                                                              // 4536
						catch( e ) {}                                                                                                  // 4537
					}                                                                                                               // 4538
				}                                                                                                                // 4539
		                                                                                                                   // 4540
				// Make sure we delete the oldest ones first                                                                     // 4541
				aOldCookies.sort( function (a, b) {                                                                              // 4542
					return b.time - a.time;                                                                                         // 4543
				} );                                                                                                             // 4544
		                                                                                                                   // 4545
				// Eliminate as many old DataTables cookies as we need to                                                        // 4546
				while ( iNewCookieLen + document.cookie.length + 10 > 4096 ) {                                                   // 4547
					if ( aOldCookies.length === 0 ) {                                                                               // 4548
						// Deleted all DT cookies and still not enough space. Can't state save                                         // 4549
						return;                                                                                                        // 4550
					}                                                                                                               // 4551
					                                                                                                                // 4552
					var old = aOldCookies.pop();                                                                                    // 4553
					document.cookie = old.name+"=; expires=Thu, 01-Jan-1970 00:00:01 GMT; path="+                                   // 4554
						aParts.join('/') + "/";                                                                                        // 4555
				}                                                                                                                // 4556
			}                                                                                                                 // 4557
			                                                                                                                  // 4558
			document.cookie = sFullCookie;                                                                                    // 4559
		}                                                                                                                  // 4560
		                                                                                                                   // 4561
		                                                                                                                   // 4562
		/**                                                                                                                // 4563
		 * Read an old cookie to get a cookie with an old table state                                                      // 4564
		 *  @param {string} sName name of the cookie to read                                                               // 4565
		 *  @returns {string} contents of the cookie - or null if no cookie with that name found                           // 4566
		 *  @memberof DataTable#oApi                                                                                       // 4567
		 */                                                                                                                // 4568
		function _fnReadCookie ( sName )                                                                                   // 4569
		{                                                                                                                  // 4570
			var                                                                                                               // 4571
				aParts = window.location.pathname.split('/'),                                                                    // 4572
				sNameEQ = sName + '_' + aParts[aParts.length-1].replace(/[\/:]/g,"").toLowerCase() + '=',                        // 4573
			 	sCookieContents = document.cookie.split(';');                                                                   // 4574
			                                                                                                                  // 4575
			for( var i=0 ; i<sCookieContents.length ; i++ )                                                                   // 4576
			{                                                                                                                 // 4577
				var c = sCookieContents[i];                                                                                      // 4578
				                                                                                                                 // 4579
				while (c.charAt(0)==' ')                                                                                         // 4580
				{                                                                                                                // 4581
					c = c.substring(1,c.length);                                                                                    // 4582
				}                                                                                                                // 4583
				                                                                                                                 // 4584
				if (c.indexOf(sNameEQ) === 0)                                                                                    // 4585
				{                                                                                                                // 4586
					return decodeURIComponent( c.substring(sNameEQ.length,c.length) );                                              // 4587
				}                                                                                                                // 4588
			}                                                                                                                 // 4589
			return null;                                                                                                      // 4590
		}                                                                                                                  // 4591
		                                                                                                                   // 4592
		                                                                                                                   // 4593
		/**                                                                                                                // 4594
		 * Return the settings object for a particular table                                                               // 4595
		 *  @param {node} nTable table we are using as a dataTable                                                         // 4596
		 *  @returns {object} Settings object - or null if not found                                                       // 4597
		 *  @memberof DataTable#oApi                                                                                       // 4598
		 */                                                                                                                // 4599
		function _fnSettingsFromNode ( nTable )                                                                            // 4600
		{                                                                                                                  // 4601
			for ( var i=0 ; i<DataTable.settings.length ; i++ )                                                               // 4602
			{                                                                                                                 // 4603
				if ( DataTable.settings[i].nTable === nTable )                                                                   // 4604
				{                                                                                                                // 4605
					return DataTable.settings[i];                                                                                   // 4606
				}                                                                                                                // 4607
			}                                                                                                                 // 4608
			                                                                                                                  // 4609
			return null;                                                                                                      // 4610
		}                                                                                                                  // 4611
		                                                                                                                   // 4612
		                                                                                                                   // 4613
		/**                                                                                                                // 4614
		 * Return an array with the TR nodes for the table                                                                 // 4615
		 *  @param {object} oSettings dataTables settings object                                                           // 4616
		 *  @returns {array} TR array                                                                                      // 4617
		 *  @memberof DataTable#oApi                                                                                       // 4618
		 */                                                                                                                // 4619
		function _fnGetTrNodes ( oSettings )                                                                               // 4620
		{                                                                                                                  // 4621
			var aNodes = [];                                                                                                  // 4622
			var aoData = oSettings.aoData;                                                                                    // 4623
			for ( var i=0, iLen=aoData.length ; i<iLen ; i++ )                                                                // 4624
			{                                                                                                                 // 4625
				if ( aoData[i].nTr !== null )                                                                                    // 4626
				{                                                                                                                // 4627
					aNodes.push( aoData[i].nTr );                                                                                   // 4628
				}                                                                                                                // 4629
			}                                                                                                                 // 4630
			return aNodes;                                                                                                    // 4631
		}                                                                                                                  // 4632
		                                                                                                                   // 4633
		                                                                                                                   // 4634
		/**                                                                                                                // 4635
		 * Return an flat array with all TD nodes for the table, or row                                                    // 4636
		 *  @param {object} oSettings dataTables settings object                                                           // 4637
		 *  @param {int} [iIndividualRow] aoData index to get the nodes for - optional                                     // 4638
		 *    if not given then the return array will contain all nodes for the table                                      // 4639
		 *  @returns {array} TD array                                                                                      // 4640
		 *  @memberof DataTable#oApi                                                                                       // 4641
		 */                                                                                                                // 4642
		function _fnGetTdNodes ( oSettings, iIndividualRow )                                                               // 4643
		{                                                                                                                  // 4644
			var anReturn = [];                                                                                                // 4645
			var iCorrector;                                                                                                   // 4646
			var anTds, nTd;                                                                                                   // 4647
			var iRow, iRows=oSettings.aoData.length,                                                                          // 4648
				iColumn, iColumns, oData, sNodeName, iStart=0, iEnd=iRows;                                                       // 4649
			                                                                                                                  // 4650
			/* Allow the collection to be limited to just one row */                                                          // 4651
			if ( iIndividualRow !== undefined )                                                                               // 4652
			{                                                                                                                 // 4653
				iStart = iIndividualRow;                                                                                         // 4654
				iEnd = iIndividualRow+1;                                                                                         // 4655
			}                                                                                                                 // 4656
		                                                                                                                   // 4657
			for ( iRow=iStart ; iRow<iEnd ; iRow++ )                                                                          // 4658
			{                                                                                                                 // 4659
				oData = oSettings.aoData[iRow];                                                                                  // 4660
				if ( oData.nTr !== null )                                                                                        // 4661
				{                                                                                                                // 4662
					/* get the TD child nodes - taking into account text etc nodes */                                               // 4663
					anTds = [];                                                                                                     // 4664
					nTd = oData.nTr.firstChild;                                                                                     // 4665
					while ( nTd )                                                                                                   // 4666
					{                                                                                                               // 4667
						sNodeName = nTd.nodeName.toLowerCase();                                                                        // 4668
						if ( sNodeName == 'td' || sNodeName == 'th' )                                                                  // 4669
						{                                                                                                              // 4670
							anTds.push( nTd );                                                                                            // 4671
						}                                                                                                              // 4672
						nTd = nTd.nextSibling;                                                                                         // 4673
					}                                                                                                               // 4674
		                                                                                                                   // 4675
					iCorrector = 0;                                                                                                 // 4676
					for ( iColumn=0, iColumns=oSettings.aoColumns.length ; iColumn<iColumns ; iColumn++ )                           // 4677
					{                                                                                                               // 4678
						if ( oSettings.aoColumns[iColumn].bVisible )                                                                   // 4679
						{                                                                                                              // 4680
							anReturn.push( anTds[iColumn-iCorrector] );                                                                   // 4681
						}                                                                                                              // 4682
						else                                                                                                           // 4683
						{                                                                                                              // 4684
							anReturn.push( oData._anHidden[iColumn] );                                                                    // 4685
							iCorrector++;                                                                                                 // 4686
						}                                                                                                              // 4687
					}                                                                                                               // 4688
				}                                                                                                                // 4689
			}                                                                                                                 // 4690
		                                                                                                                   // 4691
			return anReturn;                                                                                                  // 4692
		}                                                                                                                  // 4693
		                                                                                                                   // 4694
		                                                                                                                   // 4695
		/**                                                                                                                // 4696
		 * Log an error message                                                                                            // 4697
		 *  @param {object} oSettings dataTables settings object                                                           // 4698
		 *  @param {int} iLevel log error messages, or display them to the user                                            // 4699
		 *  @param {string} sMesg error message                                                                            // 4700
		 *  @memberof DataTable#oApi                                                                                       // 4701
		 */                                                                                                                // 4702
		function _fnLog( oSettings, iLevel, sMesg )                                                                        // 4703
		{                                                                                                                  // 4704
			var sAlert = (oSettings===null) ?                                                                                 // 4705
				"DataTables warning: "+sMesg :                                                                                   // 4706
				"DataTables warning (table id = '"+oSettings.sTableId+"'): "+sMesg;                                              // 4707
			                                                                                                                  // 4708
			if ( iLevel === 0 )                                                                                               // 4709
			{                                                                                                                 // 4710
				if ( DataTable.ext.sErrMode == 'alert' )                                                                         // 4711
				{                                                                                                                // 4712
					alert( sAlert );                                                                                                // 4713
				}                                                                                                                // 4714
				else                                                                                                             // 4715
				{                                                                                                                // 4716
					throw new Error(sAlert);                                                                                        // 4717
				}                                                                                                                // 4718
				return;                                                                                                          // 4719
			}                                                                                                                 // 4720
			else if ( window.console && console.log )                                                                         // 4721
			{                                                                                                                 // 4722
				console.log( sAlert );                                                                                           // 4723
			}                                                                                                                 // 4724
		}                                                                                                                  // 4725
		                                                                                                                   // 4726
		                                                                                                                   // 4727
		/**                                                                                                                // 4728
		 * See if a property is defined on one object, if so assign it to the other object                                 // 4729
		 *  @param {object} oRet target object                                                                             // 4730
		 *  @param {object} oSrc source object                                                                             // 4731
		 *  @param {string} sName property                                                                                 // 4732
		 *  @param {string} [sMappedName] name to map too - optional, sName used if not given                              // 4733
		 *  @memberof DataTable#oApi                                                                                       // 4734
		 */                                                                                                                // 4735
		function _fnMap( oRet, oSrc, sName, sMappedName )                                                                  // 4736
		{                                                                                                                  // 4737
			if ( sMappedName === undefined )                                                                                  // 4738
			{                                                                                                                 // 4739
				sMappedName = sName;                                                                                             // 4740
			}                                                                                                                 // 4741
			if ( oSrc[sName] !== undefined )                                                                                  // 4742
			{                                                                                                                 // 4743
				oRet[sMappedName] = oSrc[sName];                                                                                 // 4744
			}                                                                                                                 // 4745
		}                                                                                                                  // 4746
		                                                                                                                   // 4747
		                                                                                                                   // 4748
		/**                                                                                                                // 4749
		 * Extend objects - very similar to jQuery.extend, but deep copy objects, and shallow                              // 4750
		 * copy arrays. The reason we need to do this, is that we don't want to deep copy array                            // 4751
		 * init values (such as aaSorting) since the dev wouldn't be able to override them, but                            // 4752
		 * we do want to deep copy arrays.                                                                                 // 4753
		 *  @param {object} oOut Object to extend                                                                          // 4754
		 *  @param {object} oExtender Object from which the properties will be applied to oOut                             // 4755
		 *  @returns {object} oOut Reference, just for convenience - oOut === the return.                                  // 4756
		 *  @memberof DataTable#oApi                                                                                       // 4757
		 *  @todo This doesn't take account of arrays inside the deep copied objects.                                      // 4758
		 */                                                                                                                // 4759
		function _fnExtend( oOut, oExtender )                                                                              // 4760
		{                                                                                                                  // 4761
			var val;                                                                                                          // 4762
			                                                                                                                  // 4763
			for ( var prop in oExtender )                                                                                     // 4764
			{                                                                                                                 // 4765
				if ( oExtender.hasOwnProperty(prop) )                                                                            // 4766
				{                                                                                                                // 4767
					val = oExtender[prop];                                                                                          // 4768
		                                                                                                                   // 4769
					if ( typeof oInit[prop] === 'object' && val !== null && $.isArray(val) === false )                              // 4770
					{                                                                                                               // 4771
						$.extend( true, oOut[prop], val );                                                                             // 4772
					}                                                                                                               // 4773
					else                                                                                                            // 4774
					{                                                                                                               // 4775
						oOut[prop] = val;                                                                                              // 4776
					}                                                                                                               // 4777
				}                                                                                                                // 4778
			}                                                                                                                 // 4779
		                                                                                                                   // 4780
			return oOut;                                                                                                      // 4781
		}                                                                                                                  // 4782
		                                                                                                                   // 4783
		                                                                                                                   // 4784
		/**                                                                                                                // 4785
		 * Bind an event handers to allow a click or return key to activate the callback.                                  // 4786
		 * This is good for accessibility since a return on the keyboard will have the                                     // 4787
		 * same effect as a click, if the element has focus.                                                               // 4788
		 *  @param {element} n Element to bind the action to                                                               // 4789
		 *  @param {object} oData Data object to pass to the triggered function                                            // 4790
		 *  @param {function} fn Callback function for when the event is triggered                                         // 4791
		 *  @memberof DataTable#oApi                                                                                       // 4792
		 */                                                                                                                // 4793
		function _fnBindAction( n, oData, fn )                                                                             // 4794
		{                                                                                                                  // 4795
			$(n)                                                                                                              // 4796
				.bind( 'click.DT', oData, function (e) {                                                                         // 4797
						n.blur(); // Remove focus outline for mouse users                                                              // 4798
						fn(e);                                                                                                         // 4799
					} )                                                                                                             // 4800
				.bind( 'keypress.DT', oData, function (e){                                                                       // 4801
					if ( e.which === 13 ) {                                                                                         // 4802
						fn(e);                                                                                                         // 4803
					} } )                                                                                                           // 4804
				.bind( 'selectstart.DT', function () {                                                                           // 4805
					/* Take the brutal approach to cancelling text selection */                                                     // 4806
					return false;                                                                                                   // 4807
					} );                                                                                                            // 4808
		}                                                                                                                  // 4809
		                                                                                                                   // 4810
		                                                                                                                   // 4811
		/**                                                                                                                // 4812
		 * Register a callback function. Easily allows a callback function to be added to                                  // 4813
		 * an array store of callback functions that can then all be called together.                                      // 4814
		 *  @param {object} oSettings dataTables settings object                                                           // 4815
		 *  @param {string} sStore Name of the array storage for the callbacks in oSettings                                // 4816
		 *  @param {function} fn Function to be called back                                                                // 4817
		 *  @param {string} sName Identifying name for the callback (i.e. a label)                                         // 4818
		 *  @memberof DataTable#oApi                                                                                       // 4819
		 */                                                                                                                // 4820
		function _fnCallbackReg( oSettings, sStore, fn, sName )                                                            // 4821
		{                                                                                                                  // 4822
			if ( fn )                                                                                                         // 4823
			{                                                                                                                 // 4824
				oSettings[sStore].push( {                                                                                        // 4825
					"fn": fn,                                                                                                       // 4826
					"sName": sName                                                                                                  // 4827
				} );                                                                                                             // 4828
			}                                                                                                                 // 4829
		}                                                                                                                  // 4830
		                                                                                                                   // 4831
		                                                                                                                   // 4832
		/**                                                                                                                // 4833
		 * Fire callback functions and trigger events. Note that the loop over the callback                                // 4834
		 * array store is done backwards! Further note that you do not want to fire off triggers                           // 4835
		 * in time sensitive applications (for example cell creation) as its slow.                                         // 4836
		 *  @param {object} oSettings dataTables settings object                                                           // 4837
		 *  @param {string} sStore Name of the array storage for the callbacks in oSettings                                // 4838
		 *  @param {string} sTrigger Name of the jQuery custom event to trigger. If null no trigger                        // 4839
		 *    is fired                                                                                                     // 4840
		 *  @param {array} aArgs Array of arguments to pass to the callback function / trigger                             // 4841
		 *  @memberof DataTable#oApi                                                                                       // 4842
		 */                                                                                                                // 4843
		function _fnCallbackFire( oSettings, sStore, sTrigger, aArgs )                                                     // 4844
		{                                                                                                                  // 4845
			var aoStore = oSettings[sStore];                                                                                  // 4846
			var aRet =[];                                                                                                     // 4847
		                                                                                                                   // 4848
			for ( var i=aoStore.length-1 ; i>=0 ; i-- )                                                                       // 4849
			{                                                                                                                 // 4850
				aRet.push( aoStore[i].fn.apply( oSettings.oInstance, aArgs ) );                                                  // 4851
			}                                                                                                                 // 4852
		                                                                                                                   // 4853
			if ( sTrigger !== null )                                                                                          // 4854
			{                                                                                                                 // 4855
				$(oSettings.oInstance).trigger(sTrigger, aArgs);                                                                 // 4856
			}                                                                                                                 // 4857
		                                                                                                                   // 4858
			return aRet;                                                                                                      // 4859
		}                                                                                                                  // 4860
		                                                                                                                   // 4861
		                                                                                                                   // 4862
		/**                                                                                                                // 4863
		 * JSON stringify. If JSON.stringify it provided by the browser, json2.js or any other                             // 4864
		 * library, then we use that as it is fast, safe and accurate. If the function isn't                               // 4865
		 * available then we need to built it ourselves - the inspiration for this function comes                          // 4866
		 * from Craig Buckler ( http://www.sitepoint.com/javascript-json-serialization/ ). It is                           // 4867
		 * not perfect and absolutely should not be used as a replacement to json2.js - but it does                        // 4868
		 * do what we need, without requiring a dependency for DataTables.                                                 // 4869
		 *  @param {object} o JSON object to be converted                                                                  // 4870
		 *  @returns {string} JSON string                                                                                  // 4871
		 *  @memberof DataTable#oApi                                                                                       // 4872
		 */                                                                                                                // 4873
		var _fnJsonString = (window.JSON) ? JSON.stringify : function( o )                                                 // 4874
		{                                                                                                                  // 4875
			/* Not an object or array */                                                                                      // 4876
			var sType = typeof o;                                                                                             // 4877
			if (sType !== "object" || o === null)                                                                             // 4878
			{                                                                                                                 // 4879
				// simple data type                                                                                              // 4880
				if (sType === "string")                                                                                          // 4881
				{                                                                                                                // 4882
					o = '"'+o+'"';                                                                                                  // 4883
				}                                                                                                                // 4884
				return o+"";                                                                                                     // 4885
			}                                                                                                                 // 4886
		                                                                                                                   // 4887
			/* If object or array, need to recurse over it */                                                                 // 4888
			var                                                                                                               // 4889
				sProp, mValue,                                                                                                   // 4890
				json = [],                                                                                                       // 4891
				bArr = $.isArray(o);                                                                                             // 4892
			                                                                                                                  // 4893
			for (sProp in o)                                                                                                  // 4894
			{                                                                                                                 // 4895
				mValue = o[sProp];                                                                                               // 4896
				sType = typeof mValue;                                                                                           // 4897
		                                                                                                                   // 4898
				if (sType === "string")                                                                                          // 4899
				{                                                                                                                // 4900
					mValue = '"'+mValue+'"';                                                                                        // 4901
				}                                                                                                                // 4902
				else if (sType === "object" && mValue !== null)                                                                  // 4903
				{                                                                                                                // 4904
					mValue = _fnJsonString(mValue);                                                                                 // 4905
				}                                                                                                                // 4906
		                                                                                                                   // 4907
				json.push((bArr ? "" : '"'+sProp+'":') + mValue);                                                                // 4908
			}                                                                                                                 // 4909
		                                                                                                                   // 4910
			return (bArr ? "[" : "{") + json + (bArr ? "]" : "}");                                                            // 4911
		};                                                                                                                 // 4912
		                                                                                                                   // 4913
		                                                                                                                   // 4914
		/**                                                                                                                // 4915
		 * From some browsers (specifically IE6/7) we need special handling to work around browser                         // 4916
		 * bugs - this function is used to detect when these workarounds are needed.                                       // 4917
		 *  @param {object} oSettings dataTables settings object                                                           // 4918
		 *  @memberof DataTable#oApi                                                                                       // 4919
		 */                                                                                                                // 4920
		function _fnBrowserDetect( oSettings )                                                                             // 4921
		{                                                                                                                  // 4922
			/* IE6/7 will oversize a width 100% element inside a scrolling element, to include the                            // 4923
			 * width of the scrollbar, while other browsers ensure the inner element is contained                             // 4924
			 * without forcing scrolling                                                                                      // 4925
			 */                                                                                                               // 4926
			var n = $(                                                                                                        // 4927
				'<div style="position:absolute; top:0; left:0; height:1px; width:1px; overflow:hidden">'+                        // 4928
					'<div style="position:absolute; top:1px; left:1px; width:100px; overflow:scroll;">'+                            // 4929
						'<div id="DT_BrowserTest" style="width:100%; height:10px;"></div>'+                                            // 4930
					'</div>'+                                                                                                       // 4931
				'</div>')[0];                                                                                                    // 4932
		                                                                                                                   // 4933
			document.body.appendChild( n );                                                                                   // 4934
			oSettings.oBrowser.bScrollOversize = $('#DT_BrowserTest', n)[0].offsetWidth === 100 ? true : false;               // 4935
			document.body.removeChild( n );                                                                                   // 4936
		}                                                                                                                  // 4937
		                                                                                                                   // 4938
                                                                                                                     // 4939
		/**                                                                                                                // 4940
		 * Perform a jQuery selector action on the table's TR elements (from the tbody) and                                // 4941
		 * return the resulting jQuery object.                                                                             // 4942
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on                             // 4943
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included                              // 4944
		 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter                            // 4945
		 *    criterion ("applied") or all TR elements (i.e. no filter).                                                   // 4946
		 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.                         // 4947
		 *    Can be either 'current', whereby the current sorting of the table is used, or                                // 4948
		 *    'original' whereby the original order the data was read into the table is used.                              // 4949
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page                           // 4950
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be                               // 4951
		 *    'current' and filter is 'applied', regardless of what they might be given as.                                // 4952
		 *  @returns {object} jQuery object, filtered by the given selector.                                               // 4953
		 *  @dtopt API                                                                                                     // 4954
		 *                                                                                                                 // 4955
		 *  @example                                                                                                       // 4956
		 *    $(document).ready(function() {                                                                               // 4957
		 *      var oTable = $('#example').dataTable();                                                                    // 4958
		 *                                                                                                                 // 4959
		 *      // Highlight every second row                                                                              // 4960
		 *      oTable.$('tr:odd').css('backgroundColor', 'blue');                                                         // 4961
		 *    } );                                                                                                         // 4962
		 *                                                                                                                 // 4963
		 *  @example                                                                                                       // 4964
		 *    $(document).ready(function() {                                                                               // 4965
		 *      var oTable = $('#example').dataTable();                                                                    // 4966
		 *                                                                                                                 // 4967
		 *      // Filter to rows with 'Webkit' in them, add a background colour and then                                  // 4968
		 *      // remove the filter, thus highlighting the 'Webkit' rows only.                                            // 4969
		 *      oTable.fnFilter('Webkit');                                                                                 // 4970
		 *      oTable.$('tr', {"filter": "applied"}).css('backgroundColor', 'blue');                                      // 4971
		 *      oTable.fnFilter('');                                                                                       // 4972
		 *    } );                                                                                                         // 4973
		 */                                                                                                                // 4974
		this.$ = function ( sSelector, oOpts )                                                                             // 4975
		{                                                                                                                  // 4976
			var i, iLen, a = [], tr;                                                                                          // 4977
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 4978
			var aoData = oSettings.aoData;                                                                                    // 4979
			var aiDisplay = oSettings.aiDisplay;                                                                              // 4980
			var aiDisplayMaster = oSettings.aiDisplayMaster;                                                                  // 4981
		                                                                                                                   // 4982
			if ( !oOpts )                                                                                                     // 4983
			{                                                                                                                 // 4984
				oOpts = {};                                                                                                      // 4985
			}                                                                                                                 // 4986
		                                                                                                                   // 4987
			oOpts = $.extend( {}, {                                                                                           // 4988
				"filter": "none", // applied                                                                                     // 4989
				"order": "current", // "original"                                                                                // 4990
				"page": "all" // current                                                                                         // 4991
			}, oOpts );                                                                                                       // 4992
		                                                                                                                   // 4993
			// Current page implies that order=current and fitler=applied, since it is fairly                                 // 4994
			// senseless otherwise                                                                                            // 4995
			if ( oOpts.page == 'current' )                                                                                    // 4996
			{                                                                                                                 // 4997
				for ( i=oSettings._iDisplayStart, iLen=oSettings.fnDisplayEnd() ; i<iLen ; i++ )                                 // 4998
				{                                                                                                                // 4999
					tr = aoData[ aiDisplay[i] ].nTr;                                                                                // 5000
					if ( tr )                                                                                                       // 5001
					{                                                                                                               // 5002
						a.push( tr );                                                                                                  // 5003
					}                                                                                                               // 5004
				}                                                                                                                // 5005
			}                                                                                                                 // 5006
			else if ( oOpts.order == "current" && oOpts.filter == "none" )                                                    // 5007
			{                                                                                                                 // 5008
				for ( i=0, iLen=aiDisplayMaster.length ; i<iLen ; i++ )                                                          // 5009
				{                                                                                                                // 5010
					tr = aoData[ aiDisplayMaster[i] ].nTr;                                                                          // 5011
					if ( tr )                                                                                                       // 5012
					{                                                                                                               // 5013
						a.push( tr );                                                                                                  // 5014
					}                                                                                                               // 5015
				}                                                                                                                // 5016
			}                                                                                                                 // 5017
			else if ( oOpts.order == "current" && oOpts.filter == "applied" )                                                 // 5018
			{                                                                                                                 // 5019
				for ( i=0, iLen=aiDisplay.length ; i<iLen ; i++ )                                                                // 5020
				{                                                                                                                // 5021
					tr = aoData[ aiDisplay[i] ].nTr;                                                                                // 5022
					if ( tr )                                                                                                       // 5023
					{                                                                                                               // 5024
						a.push( tr );                                                                                                  // 5025
					}                                                                                                               // 5026
				}                                                                                                                // 5027
			}                                                                                                                 // 5028
			else if ( oOpts.order == "original" && oOpts.filter == "none" )                                                   // 5029
			{                                                                                                                 // 5030
				for ( i=0, iLen=aoData.length ; i<iLen ; i++ )                                                                   // 5031
				{                                                                                                                // 5032
					tr = aoData[ i ].nTr ;                                                                                          // 5033
					if ( tr )                                                                                                       // 5034
					{                                                                                                               // 5035
						a.push( tr );                                                                                                  // 5036
					}                                                                                                               // 5037
				}                                                                                                                // 5038
			}                                                                                                                 // 5039
			else if ( oOpts.order == "original" && oOpts.filter == "applied" )                                                // 5040
			{                                                                                                                 // 5041
				for ( i=0, iLen=aoData.length ; i<iLen ; i++ )                                                                   // 5042
				{                                                                                                                // 5043
					tr = aoData[ i ].nTr;                                                                                           // 5044
					if ( $.inArray( i, aiDisplay ) !== -1 && tr )                                                                   // 5045
					{                                                                                                               // 5046
						a.push( tr );                                                                                                  // 5047
					}                                                                                                               // 5048
				}                                                                                                                // 5049
			}                                                                                                                 // 5050
			else                                                                                                              // 5051
			{                                                                                                                 // 5052
				_fnLog( oSettings, 1, "Unknown selection options" );                                                             // 5053
			}                                                                                                                 // 5054
		                                                                                                                   // 5055
			/* We need to filter on the TR elements and also 'find' in their descendants                                      // 5056
			 * to make the selector act like it would in a full table - so we need                                            // 5057
			 * to build both results and then combine them together                                                           // 5058
			 */                                                                                                               // 5059
			var jqA = $(a);                                                                                                   // 5060
			var jqTRs = jqA.filter( sSelector );                                                                              // 5061
			var jqDescendants = jqA.find( sSelector );                                                                        // 5062
		                                                                                                                   // 5063
			return $( [].concat($.makeArray(jqTRs), $.makeArray(jqDescendants)) );                                            // 5064
		};                                                                                                                 // 5065
		                                                                                                                   // 5066
		                                                                                                                   // 5067
		/**                                                                                                                // 5068
		 * Almost identical to $ in operation, but in this case returns the data for the matched                           // 5069
		 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes                          // 5070
		 * rather than any descendants, so the data can be obtained for the row/cell. If matching                          // 5071
		 * rows are found, the data returned is the original data array/object that was used to                            // 5072
		 * create the row (or a generated array if from a DOM source).                                                     // 5073
		 *                                                                                                                 // 5074
		 * This method is often useful in-combination with $ where both functions are given the                            // 5075
		 * same parameters and the array indexes will match identically.                                                   // 5076
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on                             // 5077
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included                              // 5078
		 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter                               // 5079
		 *    criterion ("applied") or all elements (i.e. no filter).                                                      // 5080
		 *  @param {string} [oOpts.order=current] Order of the data in the processed array.                                // 5081
		 *    Can be either 'current', whereby the current sorting of the table is used, or                                // 5082
		 *    'original' whereby the original order the data was read into the table is used.                              // 5083
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page                           // 5084
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be                               // 5085
		 *    'current' and filter is 'applied', regardless of what they might be given as.                                // 5086
		 *  @returns {array} Data for the matched elements. If any elements, as a result of the                            // 5087
		 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null                             // 5088
		 *    entry in the array.                                                                                          // 5089
		 *  @dtopt API                                                                                                     // 5090
		 *                                                                                                                 // 5091
		 *  @example                                                                                                       // 5092
		 *    $(document).ready(function() {                                                                               // 5093
		 *      var oTable = $('#example').dataTable();                                                                    // 5094
		 *                                                                                                                 // 5095
		 *      // Get the data from the first row in the table                                                            // 5096
		 *      var data = oTable._('tr:first');                                                                           // 5097
		 *                                                                                                                 // 5098
		 *      // Do something useful with the data                                                                       // 5099
		 *      alert( "First cell is: "+data[0] );                                                                        // 5100
		 *    } );                                                                                                         // 5101
		 *                                                                                                                 // 5102
		 *  @example                                                                                                       // 5103
		 *    $(document).ready(function() {                                                                               // 5104
		 *      var oTable = $('#example').dataTable();                                                                    // 5105
		 *                                                                                                                 // 5106
		 *      // Filter to 'Webkit' and get all data for                                                                 // 5107
		 *      oTable.fnFilter('Webkit');                                                                                 // 5108
		 *      var data = oTable._('tr', {"filter": "applied"});                                                          // 5109
		 *                                                                                                                 // 5110
		 *      // Do something with the data                                                                              // 5111
		 *      alert( data.length+" rows matched the filter" );                                                           // 5112
		 *    } );                                                                                                         // 5113
		 */                                                                                                                // 5114
		this._ = function ( sSelector, oOpts )                                                                             // 5115
		{                                                                                                                  // 5116
			var aOut = [];                                                                                                    // 5117
			var i, iLen, iIndex;                                                                                              // 5118
			var aTrs = this.$( sSelector, oOpts );                                                                            // 5119
		                                                                                                                   // 5120
			for ( i=0, iLen=aTrs.length ; i<iLen ; i++ )                                                                      // 5121
			{                                                                                                                 // 5122
				aOut.push( this.fnGetData(aTrs[i]) );                                                                            // 5123
			}                                                                                                                 // 5124
		                                                                                                                   // 5125
			return aOut;                                                                                                      // 5126
		};                                                                                                                 // 5127
		                                                                                                                   // 5128
		                                                                                                                   // 5129
		/**                                                                                                                // 5130
		 * Add a single new row or multiple rows of data to the table. Please note                                         // 5131
		 * that this is suitable for client-side processing only - if you are using                                        // 5132
		 * server-side processing (i.e. "bServerSide": true), then to add data, you                                        // 5133
		 * must add it to the data source, i.e. the server-side, through an Ajax call.                                     // 5134
		 *  @param {array|object} mData The data to be added to the table. This can be:                                    // 5135
		 *    <ul>                                                                                                         // 5136
		 *      <li>1D array of data - add a single row with the data provided</li>                                        // 5137
		 *      <li>2D array of arrays - add multiple rows in a single call</li>                                           // 5138
		 *      <li>object - data object when using <i>mData</i></li>                                                      // 5139
		 *      <li>array of objects - multiple data objects when using <i>mData</i></li>                                  // 5140
		 *    </ul>                                                                                                        // 5141
		 *  @param {bool} [bRedraw=true] redraw the table or not                                                           // 5142
		 *  @returns {array} An array of integers, representing the list of indexes in                                     // 5143
		 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to                                   // 5144
		 *    the table.                                                                                                   // 5145
		 *  @dtopt API                                                                                                     // 5146
		 *                                                                                                                 // 5147
		 *  @example                                                                                                       // 5148
		 *    // Global var for counter                                                                                    // 5149
		 *    var giCount = 2;                                                                                             // 5150
		 *                                                                                                                 // 5151
		 *    $(document).ready(function() {                                                                               // 5152
		 *      $('#example').dataTable();                                                                                 // 5153
		 *    } );                                                                                                         // 5154
		 *                                                                                                                 // 5155
		 *    function fnClickAddRow() {                                                                                   // 5156
		 *      $('#example').dataTable().fnAddData( [                                                                     // 5157
		 *        giCount+".1",                                                                                            // 5158
		 *        giCount+".2",                                                                                            // 5159
		 *        giCount+".3",                                                                                            // 5160
		 *        giCount+".4" ]                                                                                           // 5161
		 *      );                                                                                                         // 5162
		 *                                                                                                                 // 5163
		 *      giCount++;                                                                                                 // 5164
		 *    }                                                                                                            // 5165
		 */                                                                                                                // 5166
		this.fnAddData = function( mData, bRedraw )                                                                        // 5167
		{                                                                                                                  // 5168
			if ( mData.length === 0 )                                                                                         // 5169
			{                                                                                                                 // 5170
				return [];                                                                                                       // 5171
			}                                                                                                                 // 5172
			                                                                                                                  // 5173
			var aiReturn = [];                                                                                                // 5174
			var iTest;                                                                                                        // 5175
			                                                                                                                  // 5176
			/* Find settings from table node */                                                                               // 5177
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5178
			                                                                                                                  // 5179
			/* Check if we want to add multiple rows or not */                                                                // 5180
			if ( typeof mData[0] === "object" && mData[0] !== null )                                                          // 5181
			{                                                                                                                 // 5182
				for ( var i=0 ; i<mData.length ; i++ )                                                                           // 5183
				{                                                                                                                // 5184
					iTest = _fnAddData( oSettings, mData[i] );                                                                      // 5185
					if ( iTest == -1 )                                                                                              // 5186
					{                                                                                                               // 5187
						return aiReturn;                                                                                               // 5188
					}                                                                                                               // 5189
					aiReturn.push( iTest );                                                                                         // 5190
				}                                                                                                                // 5191
			}                                                                                                                 // 5192
			else                                                                                                              // 5193
			{                                                                                                                 // 5194
				iTest = _fnAddData( oSettings, mData );                                                                          // 5195
				if ( iTest == -1 )                                                                                               // 5196
				{                                                                                                                // 5197
					return aiReturn;                                                                                                // 5198
				}                                                                                                                // 5199
				aiReturn.push( iTest );                                                                                          // 5200
			}                                                                                                                 // 5201
			                                                                                                                  // 5202
			oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();                                                          // 5203
			                                                                                                                  // 5204
			if ( bRedraw === undefined || bRedraw )                                                                           // 5205
			{                                                                                                                 // 5206
				_fnReDraw( oSettings );                                                                                          // 5207
			}                                                                                                                 // 5208
			return aiReturn;                                                                                                  // 5209
		};                                                                                                                 // 5210
		                                                                                                                   // 5211
		                                                                                                                   // 5212
		/**                                                                                                                // 5213
		 * This function will make DataTables recalculate the column sizes, based on the data                              // 5214
		 * contained in the table and the sizes applied to the columns (in the DOM, CSS or                                 // 5215
		 * through the sWidth parameter). This can be useful when the width of the table's                                 // 5216
		 * parent element changes (for example a window resize).                                                           // 5217
		 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to                            // 5218
		 *  @dtopt API                                                                                                     // 5219
		 *                                                                                                                 // 5220
		 *  @example                                                                                                       // 5221
		 *    $(document).ready(function() {                                                                               // 5222
		 *      var oTable = $('#example').dataTable( {                                                                    // 5223
		 *        "sScrollY": "200px",                                                                                     // 5224
		 *        "bPaginate": false                                                                                       // 5225
		 *      } );                                                                                                       // 5226
		 *                                                                                                                 // 5227
		 *      $(window).bind('resize', function () {                                                                     // 5228
		 *        oTable.fnAdjustColumnSizing();                                                                           // 5229
		 *      } );                                                                                                       // 5230
		 *    } );                                                                                                         // 5231
		 */                                                                                                                // 5232
		this.fnAdjustColumnSizing = function ( bRedraw )                                                                   // 5233
		{                                                                                                                  // 5234
			var oSettings = _fnSettingsFromNode(this[DataTable.ext.iApiIndex]);                                               // 5235
			_fnAdjustColumnSizing( oSettings );                                                                               // 5236
			                                                                                                                  // 5237
			if ( bRedraw === undefined || bRedraw )                                                                           // 5238
			{                                                                                                                 // 5239
				this.fnDraw( false );                                                                                            // 5240
			}                                                                                                                 // 5241
			else if ( oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "" )                                            // 5242
			{                                                                                                                 // 5243
				/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */                              // 5244
				this.oApi._fnScrollDraw(oSettings);                                                                              // 5245
			}                                                                                                                 // 5246
		};                                                                                                                 // 5247
		                                                                                                                   // 5248
		                                                                                                                   // 5249
		/**                                                                                                                // 5250
		 * Quickly and simply clear a table                                                                                // 5251
		 *  @param {bool} [bRedraw=true] redraw the table or not                                                           // 5252
		 *  @dtopt API                                                                                                     // 5253
		 *                                                                                                                 // 5254
		 *  @example                                                                                                       // 5255
		 *    $(document).ready(function() {                                                                               // 5256
		 *      var oTable = $('#example').dataTable();                                                                    // 5257
		 *                                                                                                                 // 5258
		 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)                           // 5259
		 *      oTable.fnClearTable();                                                                                     // 5260
		 *    } );                                                                                                         // 5261
		 */                                                                                                                // 5262
		this.fnClearTable = function( bRedraw )                                                                            // 5263
		{                                                                                                                  // 5264
			/* Find settings from table node */                                                                               // 5265
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5266
			_fnClearTable( oSettings );                                                                                       // 5267
			                                                                                                                  // 5268
			if ( bRedraw === undefined || bRedraw )                                                                           // 5269
			{                                                                                                                 // 5270
				_fnDraw( oSettings );                                                                                            // 5271
			}                                                                                                                 // 5272
		};                                                                                                                 // 5273
		                                                                                                                   // 5274
		                                                                                                                   // 5275
		/**                                                                                                                // 5276
		 * The exact opposite of 'opening' a row, this function will close any rows which                                  // 5277
		 * are currently 'open'.                                                                                           // 5278
		 *  @param {node} nTr the table row to 'close'                                                                     // 5279
		 *  @returns {int} 0 on success, or 1 if failed (can't find the row)                                               // 5280
		 *  @dtopt API                                                                                                     // 5281
		 *                                                                                                                 // 5282
		 *  @example                                                                                                       // 5283
		 *    $(document).ready(function() {                                                                               // 5284
		 *      var oTable;                                                                                                // 5285
		 *                                                                                                                 // 5286
		 *      // 'open' an information row when a row is clicked on                                                      // 5287
		 *      $('#example tbody tr').click( function () {                                                                // 5288
		 *        if ( oTable.fnIsOpen(this) ) {                                                                           // 5289
		 *          oTable.fnClose( this );                                                                                // 5290
		 *        } else {                                                                                                 // 5291
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );                                             // 5292
		 *        }                                                                                                        // 5293
		 *      } );                                                                                                       // 5294
		 *                                                                                                                 // 5295
		 *      oTable = $('#example').dataTable();                                                                        // 5296
		 *    } );                                                                                                         // 5297
		 */                                                                                                                // 5298
		this.fnClose = function( nTr )                                                                                     // 5299
		{                                                                                                                  // 5300
			/* Find settings from table node */                                                                               // 5301
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5302
			                                                                                                                  // 5303
			for ( var i=0 ; i<oSettings.aoOpenRows.length ; i++ )                                                             // 5304
			{                                                                                                                 // 5305
				if ( oSettings.aoOpenRows[i].nParent == nTr )                                                                    // 5306
				{                                                                                                                // 5307
					var nTrParent = oSettings.aoOpenRows[i].nTr.parentNode;                                                         // 5308
					if ( nTrParent )                                                                                                // 5309
					{                                                                                                               // 5310
						/* Remove it if it is currently on display */                                                                  // 5311
						nTrParent.removeChild( oSettings.aoOpenRows[i].nTr );                                                          // 5312
					}                                                                                                               // 5313
					oSettings.aoOpenRows.splice( i, 1 );                                                                            // 5314
					return 0;                                                                                                       // 5315
				}                                                                                                                // 5316
			}                                                                                                                 // 5317
			return 1;                                                                                                         // 5318
		};                                                                                                                 // 5319
		                                                                                                                   // 5320
		                                                                                                                   // 5321
		/**                                                                                                                // 5322
		 * Remove a row for the table                                                                                      // 5323
		 *  @param {mixed} mTarget The index of the row from aoData to be deleted, or                                      // 5324
		 *    the TR element you want to delete                                                                            // 5325
		 *  @param {function|null} [fnCallBack] Callback function                                                          // 5326
		 *  @param {bool} [bRedraw=true] Redraw the table or not                                                           // 5327
		 *  @returns {array} The row that was deleted                                                                      // 5328
		 *  @dtopt API                                                                                                     // 5329
		 *                                                                                                                 // 5330
		 *  @example                                                                                                       // 5331
		 *    $(document).ready(function() {                                                                               // 5332
		 *      var oTable = $('#example').dataTable();                                                                    // 5333
		 *                                                                                                                 // 5334
		 *      // Immediately remove the first row                                                                        // 5335
		 *      oTable.fnDeleteRow( 0 );                                                                                   // 5336
		 *    } );                                                                                                         // 5337
		 */                                                                                                                // 5338
		this.fnDeleteRow = function( mTarget, fnCallBack, bRedraw )                                                        // 5339
		{                                                                                                                  // 5340
			/* Find settings from table node */                                                                               // 5341
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5342
			var i, iLen, iAODataIndex;                                                                                        // 5343
			                                                                                                                  // 5344
			iAODataIndex = (typeof mTarget === 'object') ?                                                                    // 5345
				_fnNodeToDataIndex(oSettings, mTarget) : mTarget;                                                                // 5346
			                                                                                                                  // 5347
			/* Return the data array from this row */                                                                         // 5348
			var oData = oSettings.aoData.splice( iAODataIndex, 1 );                                                           // 5349
		                                                                                                                   // 5350
			/* Update the _DT_RowIndex parameter */                                                                           // 5351
			for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )                                                          // 5352
			{                                                                                                                 // 5353
				if ( oSettings.aoData[i].nTr !== null )                                                                          // 5354
				{                                                                                                                // 5355
					oSettings.aoData[i].nTr._DT_RowIndex = i;                                                                       // 5356
				}                                                                                                                // 5357
			}                                                                                                                 // 5358
			                                                                                                                  // 5359
			/* Remove the target row from the search array */                                                                 // 5360
			var iDisplayIndex = $.inArray( iAODataIndex, oSettings.aiDisplay );                                               // 5361
			oSettings.asDataSearch.splice( iDisplayIndex, 1 );                                                                // 5362
			                                                                                                                  // 5363
			/* Delete from the display arrays */                                                                              // 5364
			_fnDeleteIndex( oSettings.aiDisplayMaster, iAODataIndex );                                                        // 5365
			_fnDeleteIndex( oSettings.aiDisplay, iAODataIndex );                                                              // 5366
			                                                                                                                  // 5367
			/* If there is a user callback function - call it */                                                              // 5368
			if ( typeof fnCallBack === "function" )                                                                           // 5369
			{                                                                                                                 // 5370
				fnCallBack.call( this, oSettings, oData );                                                                       // 5371
			}                                                                                                                 // 5372
			                                                                                                                  // 5373
			/* Check for an 'overflow' they case for displaying the table */                                                  // 5374
			if ( oSettings._iDisplayStart >= oSettings.fnRecordsDisplay() )                                                   // 5375
			{                                                                                                                 // 5376
				oSettings._iDisplayStart -= oSettings._iDisplayLength;                                                           // 5377
				if ( oSettings._iDisplayStart < 0 )                                                                              // 5378
				{                                                                                                                // 5379
					oSettings._iDisplayStart = 0;                                                                                   // 5380
				}                                                                                                                // 5381
			}                                                                                                                 // 5382
			                                                                                                                  // 5383
			if ( bRedraw === undefined || bRedraw )                                                                           // 5384
			{                                                                                                                 // 5385
				_fnCalculateEnd( oSettings );                                                                                    // 5386
				_fnDraw( oSettings );                                                                                            // 5387
			}                                                                                                                 // 5388
			                                                                                                                  // 5389
			return oData;                                                                                                     // 5390
		};                                                                                                                 // 5391
		                                                                                                                   // 5392
		                                                                                                                   // 5393
		/**                                                                                                                // 5394
		 * Restore the table to it's original state in the DOM by removing all of DataTables                               // 5395
		 * enhancements, alterations to the DOM structure of the table and event listeners.                                // 5396
		 *  @param {boolean} [bRemove=false] Completely remove the table from the DOM                                      // 5397
		 *  @dtopt API                                                                                                     // 5398
		 *                                                                                                                 // 5399
		 *  @example                                                                                                       // 5400
		 *    $(document).ready(function() {                                                                               // 5401
		 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used                        // 5402
		 *      var oTable = $('#example').dataTable();                                                                    // 5403
		 *      oTable.fnDestroy();                                                                                        // 5404
		 *    } );                                                                                                         // 5405
		 */                                                                                                                // 5406
		this.fnDestroy = function ( bRemove )                                                                              // 5407
		{                                                                                                                  // 5408
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5409
			var nOrig = oSettings.nTableWrapper.parentNode;                                                                   // 5410
			var nBody = oSettings.nTBody;                                                                                     // 5411
			var i, iLen;                                                                                                      // 5412
		                                                                                                                   // 5413
			bRemove = (bRemove===undefined) ? false : bRemove;                                                                // 5414
			                                                                                                                  // 5415
			/* Flag to note that the table is currently being destroyed - no action should be taken */                        // 5416
			oSettings.bDestroying = true;                                                                                     // 5417
			                                                                                                                  // 5418
			/* Fire off the destroy callbacks for plug-ins etc */                                                             // 5419
			_fnCallbackFire( oSettings, "aoDestroyCallback", "destroy", [oSettings] );                                        // 5420
		                                                                                                                   // 5421
			/* If the table is not being removed, restore the hidden columns */                                               // 5422
			if ( !bRemove )                                                                                                   // 5423
			{                                                                                                                 // 5424
				for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )                                                      // 5425
				{                                                                                                                // 5426
					if ( oSettings.aoColumns[i].bVisible === false )                                                                // 5427
					{                                                                                                               // 5428
						this.fnSetColumnVis( i, true );                                                                                // 5429
					}                                                                                                               // 5430
				}                                                                                                                // 5431
			}                                                                                                                 // 5432
			                                                                                                                  // 5433
			/* Blitz all DT events */                                                                                         // 5434
			$(oSettings.nTableWrapper).find('*').andSelf().unbind('.DT');                                                     // 5435
			                                                                                                                  // 5436
			/* If there is an 'empty' indicator row, remove it */                                                             // 5437
			$('tbody>tr>td.'+oSettings.oClasses.sRowEmpty, oSettings.nTable).parent().remove();                               // 5438
			                                                                                                                  // 5439
			/* When scrolling we had to break the table up - restore it */                                                    // 5440
			if ( oSettings.nTable != oSettings.nTHead.parentNode )                                                            // 5441
			{                                                                                                                 // 5442
				$(oSettings.nTable).children('thead').remove();                                                                  // 5443
				oSettings.nTable.appendChild( oSettings.nTHead );                                                                // 5444
			}                                                                                                                 // 5445
			                                                                                                                  // 5446
			if ( oSettings.nTFoot && oSettings.nTable != oSettings.nTFoot.parentNode )                                        // 5447
			{                                                                                                                 // 5448
				$(oSettings.nTable).children('tfoot').remove();                                                                  // 5449
				oSettings.nTable.appendChild( oSettings.nTFoot );                                                                // 5450
			}                                                                                                                 // 5451
			                                                                                                                  // 5452
			/* Remove the DataTables generated nodes, events and classes */                                                   // 5453
			oSettings.nTable.parentNode.removeChild( oSettings.nTable );                                                      // 5454
			$(oSettings.nTableWrapper).remove();                                                                              // 5455
			                                                                                                                  // 5456
			oSettings.aaSorting = [];                                                                                         // 5457
			oSettings.aaSortingFixed = [];                                                                                    // 5458
			_fnSortingClasses( oSettings );                                                                                   // 5459
			                                                                                                                  // 5460
			$(_fnGetTrNodes( oSettings )).removeClass( oSettings.asStripeClasses.join(' ') );                                 // 5461
			                                                                                                                  // 5462
			$('th, td', oSettings.nTHead).removeClass( [                                                                      // 5463
				oSettings.oClasses.sSortable,                                                                                    // 5464
				oSettings.oClasses.sSortableAsc,                                                                                 // 5465
				oSettings.oClasses.sSortableDesc,                                                                                // 5466
				oSettings.oClasses.sSortableNone ].join(' ')                                                                     // 5467
			);                                                                                                                // 5468
			if ( oSettings.bJUI )                                                                                             // 5469
			{                                                                                                                 // 5470
				$('th span.'+oSettings.oClasses.sSortIcon                                                                        // 5471
					+ ', td span.'+oSettings.oClasses.sSortIcon, oSettings.nTHead).remove();                                        // 5472
		                                                                                                                   // 5473
				$('th, td', oSettings.nTHead).each( function () {                                                                // 5474
					var jqWrapper = $('div.'+oSettings.oClasses.sSortJUIWrapper, this);                                             // 5475
					var kids = jqWrapper.contents();                                                                                // 5476
					$(this).append( kids );                                                                                         // 5477
					jqWrapper.remove();                                                                                             // 5478
				} );                                                                                                             // 5479
			}                                                                                                                 // 5480
			                                                                                                                  // 5481
			/* Add the TR elements back into the table in their original order */                                             // 5482
			if ( !bRemove && oSettings.nTableReinsertBefore )                                                                 // 5483
			{                                                                                                                 // 5484
				nOrig.insertBefore( oSettings.nTable, oSettings.nTableReinsertBefore );                                          // 5485
			}                                                                                                                 // 5486
			else if ( !bRemove )                                                                                              // 5487
			{                                                                                                                 // 5488
				nOrig.appendChild( oSettings.nTable );                                                                           // 5489
			}                                                                                                                 // 5490
		                                                                                                                   // 5491
			for ( i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )                                                          // 5492
			{                                                                                                                 // 5493
				if ( oSettings.aoData[i].nTr !== null )                                                                          // 5494
				{                                                                                                                // 5495
					nBody.appendChild( oSettings.aoData[i].nTr );                                                                   // 5496
				}                                                                                                                // 5497
			}                                                                                                                 // 5498
			                                                                                                                  // 5499
			/* Restore the width of the original table */                                                                     // 5500
			if ( oSettings.oFeatures.bAutoWidth === true )                                                                    // 5501
			{                                                                                                                 // 5502
			  oSettings.nTable.style.width = _fnStringToCss(oSettings.sDestroyWidth);                                         // 5503
			}                                                                                                                 // 5504
			                                                                                                                  // 5505
			/* If the were originally stripe classes - then we add them back here. Note                                       // 5506
			 * this is not fool proof (for example if not all rows had stripe classes - but                                   // 5507
			 * it's a good effort without getting carried away                                                                // 5508
			 */                                                                                                               // 5509
			iLen = oSettings.asDestroyStripes.length;                                                                         // 5510
			if (iLen)                                                                                                         // 5511
			{                                                                                                                 // 5512
				var anRows = $(nBody).children('tr');                                                                            // 5513
				for ( i=0 ; i<iLen ; i++ )                                                                                       // 5514
				{                                                                                                                // 5515
					anRows.filter(':nth-child(' + iLen + 'n + ' + i + ')').addClass( oSettings.asDestroyStripes[i] );               // 5516
				}                                                                                                                // 5517
			}                                                                                                                 // 5518
			                                                                                                                  // 5519
			/* Remove the settings object from the settings array */                                                          // 5520
			for ( i=0, iLen=DataTable.settings.length ; i<iLen ; i++ )                                                        // 5521
			{                                                                                                                 // 5522
				if ( DataTable.settings[i] == oSettings )                                                                        // 5523
				{                                                                                                                // 5524
					DataTable.settings.splice( i, 1 );                                                                              // 5525
				}                                                                                                                // 5526
			}                                                                                                                 // 5527
			                                                                                                                  // 5528
			/* End it all */                                                                                                  // 5529
			oSettings = null;                                                                                                 // 5530
			oInit = null;                                                                                                     // 5531
		};                                                                                                                 // 5532
		                                                                                                                   // 5533
		                                                                                                                   // 5534
		/**                                                                                                                // 5535
		 * Redraw the table                                                                                                // 5536
		 *  @param {bool} [bComplete=true] Re-filter and resort (if enabled) the table before the draw.                    // 5537
		 *  @dtopt API                                                                                                     // 5538
		 *                                                                                                                 // 5539
		 *  @example                                                                                                       // 5540
		 *    $(document).ready(function() {                                                                               // 5541
		 *      var oTable = $('#example').dataTable();                                                                    // 5542
		 *                                                                                                                 // 5543
		 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)                            // 5544
		 *      oTable.fnDraw();                                                                                           // 5545
		 *    } );                                                                                                         // 5546
		 */                                                                                                                // 5547
		this.fnDraw = function( bComplete )                                                                                // 5548
		{                                                                                                                  // 5549
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5550
			if ( bComplete === false )                                                                                        // 5551
			{                                                                                                                 // 5552
				_fnCalculateEnd( oSettings );                                                                                    // 5553
				_fnDraw( oSettings );                                                                                            // 5554
			}                                                                                                                 // 5555
			else                                                                                                              // 5556
			{                                                                                                                 // 5557
				_fnReDraw( oSettings );                                                                                          // 5558
			}                                                                                                                 // 5559
		};                                                                                                                 // 5560
		                                                                                                                   // 5561
		                                                                                                                   // 5562
		/**                                                                                                                // 5563
		 * Filter the input based on data                                                                                  // 5564
		 *  @param {string} sInput String to filter the table on                                                           // 5565
		 *  @param {int|null} [iColumn] Column to limit filtering to                                                       // 5566
		 *  @param {bool} [bRegex=false] Treat as regular expression or not                                                // 5567
		 *  @param {bool} [bSmart=true] Perform smart filtering or not                                                     // 5568
		 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)                            // 5569
		 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)                       // 5570
		 *  @dtopt API                                                                                                     // 5571
		 *                                                                                                                 // 5572
		 *  @example                                                                                                       // 5573
		 *    $(document).ready(function() {                                                                               // 5574
		 *      var oTable = $('#example').dataTable();                                                                    // 5575
		 *                                                                                                                 // 5576
		 *      // Sometime later - filter...                                                                              // 5577
		 *      oTable.fnFilter( 'test string' );                                                                          // 5578
		 *    } );                                                                                                         // 5579
		 */                                                                                                                // 5580
		this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )                         // 5581
		{                                                                                                                  // 5582
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5583
			                                                                                                                  // 5584
			if ( !oSettings.oFeatures.bFilter )                                                                               // 5585
			{                                                                                                                 // 5586
				return;                                                                                                          // 5587
			}                                                                                                                 // 5588
			                                                                                                                  // 5589
			if ( bRegex === undefined || bRegex === null )                                                                    // 5590
			{                                                                                                                 // 5591
				bRegex = false;                                                                                                  // 5592
			}                                                                                                                 // 5593
			                                                                                                                  // 5594
			if ( bSmart === undefined || bSmart === null )                                                                    // 5595
			{                                                                                                                 // 5596
				bSmart = true;                                                                                                   // 5597
			}                                                                                                                 // 5598
			                                                                                                                  // 5599
			if ( bShowGlobal === undefined || bShowGlobal === null )                                                          // 5600
			{                                                                                                                 // 5601
				bShowGlobal = true;                                                                                              // 5602
			}                                                                                                                 // 5603
			                                                                                                                  // 5604
			if ( bCaseInsensitive === undefined || bCaseInsensitive === null )                                                // 5605
			{                                                                                                                 // 5606
				bCaseInsensitive = true;                                                                                         // 5607
			}                                                                                                                 // 5608
			                                                                                                                  // 5609
			if ( iColumn === undefined || iColumn === null )                                                                  // 5610
			{                                                                                                                 // 5611
				/* Global filter */                                                                                              // 5612
				_fnFilterComplete( oSettings, {                                                                                  // 5613
					"sSearch":sInput+"",                                                                                            // 5614
					"bRegex": bRegex,                                                                                               // 5615
					"bSmart": bSmart,                                                                                               // 5616
					"bCaseInsensitive": bCaseInsensitive                                                                            // 5617
				}, 1 );                                                                                                          // 5618
				                                                                                                                 // 5619
				if ( bShowGlobal && oSettings.aanFeatures.f )                                                                    // 5620
				{                                                                                                                // 5621
					var n = oSettings.aanFeatures.f;                                                                                // 5622
					for ( var i=0, iLen=n.length ; i<iLen ; i++ )                                                                   // 5623
					{                                                                                                               // 5624
						// IE9 throws an 'unknown error' if document.activeElement is used                                             // 5625
						// inside an iframe or frame...                                                                                // 5626
						try {                                                                                                          // 5627
							if ( n[i]._DT_Input != document.activeElement )                                                               // 5628
							{                                                                                                             // 5629
								$(n[i]._DT_Input).val( sInput );                                                                             // 5630
							}                                                                                                             // 5631
						}                                                                                                              // 5632
						catch ( e ) {                                                                                                  // 5633
							$(n[i]._DT_Input).val( sInput );                                                                              // 5634
						}                                                                                                              // 5635
					}                                                                                                               // 5636
				}                                                                                                                // 5637
			}                                                                                                                 // 5638
			else                                                                                                              // 5639
			{                                                                                                                 // 5640
				/* Single column filter */                                                                                       // 5641
				$.extend( oSettings.aoPreSearchCols[ iColumn ], {                                                                // 5642
					"sSearch": sInput+"",                                                                                           // 5643
					"bRegex": bRegex,                                                                                               // 5644
					"bSmart": bSmart,                                                                                               // 5645
					"bCaseInsensitive": bCaseInsensitive                                                                            // 5646
				} );                                                                                                             // 5647
				_fnFilterComplete( oSettings, oSettings.oPreviousSearch, 1 );                                                    // 5648
			}                                                                                                                 // 5649
		};                                                                                                                 // 5650
		                                                                                                                   // 5651
		                                                                                                                   // 5652
		/**                                                                                                                // 5653
		 * Get the data for the whole table, an individual row or an individual cell based on the                          // 5654
		 * provided parameters.                                                                                            // 5655
		 *  @param {int|node} [mRow] A TR row node, TD/TH cell node or an integer. If given as                             // 5656
		 *    a TR node then the data source for the whole row will be returned. If given as a                             // 5657
		 *    TD/TH cell node then iCol will be automatically calculated and the data for the                              // 5658
		 *    cell returned. If given as an integer, then this is treated as the aoData internal                           // 5659
		 *    data index for the row (see fnGetPosition) and the data for that row used.                                   // 5660
		 *  @param {int} [iCol] Optional column index that you want the data of.                                           // 5661
		 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is                             // 5662
		 *    returned. If mRow is defined, just data for that row, and is iCol is                                         // 5663
		 *    defined, only data for the designated cell is returned.                                                      // 5664
		 *  @dtopt API                                                                                                     // 5665
		 *                                                                                                                 // 5666
		 *  @example                                                                                                       // 5667
		 *    // Row data                                                                                                  // 5668
		 *    $(document).ready(function() {                                                                               // 5669
		 *      oTable = $('#example').dataTable();                                                                        // 5670
		 *                                                                                                                 // 5671
		 *      oTable.$('tr').click( function () {                                                                        // 5672
		 *        var data = oTable.fnGetData( this );                                                                     // 5673
		 *        // ... do something with the array / object of data for the row                                          // 5674
		 *      } );                                                                                                       // 5675
		 *    } );                                                                                                         // 5676
		 *                                                                                                                 // 5677
		 *  @example                                                                                                       // 5678
		 *    // Individual cell data                                                                                      // 5679
		 *    $(document).ready(function() {                                                                               // 5680
		 *      oTable = $('#example').dataTable();                                                                        // 5681
		 *                                                                                                                 // 5682
		 *      oTable.$('td').click( function () {                                                                        // 5683
		 *        var sData = oTable.fnGetData( this );                                                                    // 5684
		 *        alert( 'The cell clicked on had the value of '+sData );                                                  // 5685
		 *      } );                                                                                                       // 5686
		 *    } );                                                                                                         // 5687
		 */                                                                                                                // 5688
		this.fnGetData = function( mRow, iCol )                                                                            // 5689
		{                                                                                                                  // 5690
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5691
			                                                                                                                  // 5692
			if ( mRow !== undefined )                                                                                         // 5693
			{                                                                                                                 // 5694
				var iRow = mRow;                                                                                                 // 5695
				if ( typeof mRow === 'object' )                                                                                  // 5696
				{                                                                                                                // 5697
					var sNode = mRow.nodeName.toLowerCase();                                                                        // 5698
					if (sNode === "tr" )                                                                                            // 5699
					{                                                                                                               // 5700
						iRow = _fnNodeToDataIndex(oSettings, mRow);                                                                    // 5701
					}                                                                                                               // 5702
					else if ( sNode === "td" )                                                                                      // 5703
					{                                                                                                               // 5704
						iRow = _fnNodeToDataIndex(oSettings, mRow.parentNode);                                                         // 5705
						iCol = _fnNodeToColumnIndex( oSettings, iRow, mRow );                                                          // 5706
					}                                                                                                               // 5707
				}                                                                                                                // 5708
		                                                                                                                   // 5709
				if ( iCol !== undefined )                                                                                        // 5710
				{                                                                                                                // 5711
					return _fnGetCellData( oSettings, iRow, iCol, '' );                                                             // 5712
				}                                                                                                                // 5713
				return (oSettings.aoData[iRow]!==undefined) ?                                                                    // 5714
					oSettings.aoData[iRow]._aData : null;                                                                           // 5715
			}                                                                                                                 // 5716
			return _fnGetDataMaster( oSettings );                                                                             // 5717
		};                                                                                                                 // 5718
		                                                                                                                   // 5719
		                                                                                                                   // 5720
		/**                                                                                                                // 5721
		 * Get an array of the TR nodes that are used in the table's body. Note that you will                              // 5722
		 * typically want to use the '$' API method in preference to this as it is more                                    // 5723
		 * flexible.                                                                                                       // 5724
		 *  @param {int} [iRow] Optional row index for the TR element you want                                             // 5725
		 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements                                // 5726
		 *    in the table's body, or iRow is defined, just the TR element requested.                                      // 5727
		 *  @dtopt API                                                                                                     // 5728
		 *                                                                                                                 // 5729
		 *  @example                                                                                                       // 5730
		 *    $(document).ready(function() {                                                                               // 5731
		 *      var oTable = $('#example').dataTable();                                                                    // 5732
		 *                                                                                                                 // 5733
		 *      // Get the nodes from the table                                                                            // 5734
		 *      var nNodes = oTable.fnGetNodes( );                                                                         // 5735
		 *    } );                                                                                                         // 5736
		 */                                                                                                                // 5737
		this.fnGetNodes = function( iRow )                                                                                 // 5738
		{                                                                                                                  // 5739
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5740
			                                                                                                                  // 5741
			if ( iRow !== undefined ) {                                                                                       // 5742
				return (oSettings.aoData[iRow]!==undefined) ?                                                                    // 5743
					oSettings.aoData[iRow].nTr : null;                                                                              // 5744
			}                                                                                                                 // 5745
			return _fnGetTrNodes( oSettings );                                                                                // 5746
		};                                                                                                                 // 5747
		                                                                                                                   // 5748
		                                                                                                                   // 5749
		/**                                                                                                                // 5750
		 * Get the array indexes of a particular cell from it's DOM element                                                // 5751
		 * and column index including hidden columns                                                                       // 5752
		 *  @param {node} nNode this can either be a TR, TD or TH in the table's body                                      // 5753
		 *  @returns {int} If nNode is given as a TR, then a single index is returned, or                                  // 5754
		 *    if given as a cell, an array of [row index, column index (visible),                                          // 5755
		 *    column index (all)] is given.                                                                                // 5756
		 *  @dtopt API                                                                                                     // 5757
		 *                                                                                                                 // 5758
		 *  @example                                                                                                       // 5759
		 *    $(document).ready(function() {                                                                               // 5760
		 *      $('#example tbody td').click( function () {                                                                // 5761
		 *        // Get the position of the current data from the node                                                    // 5762
		 *        var aPos = oTable.fnGetPosition( this );                                                                 // 5763
		 *                                                                                                                 // 5764
		 *        // Get the data array for this row                                                                       // 5765
		 *        var aData = oTable.fnGetData( aPos[0] );                                                                 // 5766
		 *                                                                                                                 // 5767
		 *        // Update the data array and return the value                                                            // 5768
		 *        aData[ aPos[1] ] = 'clicked';                                                                            // 5769
		 *        this.innerHTML = 'clicked';                                                                              // 5770
		 *      } );                                                                                                       // 5771
		 *                                                                                                                 // 5772
		 *      // Init DataTables                                                                                         // 5773
		 *      oTable = $('#example').dataTable();                                                                        // 5774
		 *    } );                                                                                                         // 5775
		 */                                                                                                                // 5776
		this.fnGetPosition = function( nNode )                                                                             // 5777
		{                                                                                                                  // 5778
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5779
			var sNodeName = nNode.nodeName.toUpperCase();                                                                     // 5780
			                                                                                                                  // 5781
			if ( sNodeName == "TR" )                                                                                          // 5782
			{                                                                                                                 // 5783
				return _fnNodeToDataIndex(oSettings, nNode);                                                                     // 5784
			}                                                                                                                 // 5785
			else if ( sNodeName == "TD" || sNodeName == "TH" )                                                                // 5786
			{                                                                                                                 // 5787
				var iDataIndex = _fnNodeToDataIndex( oSettings, nNode.parentNode );                                              // 5788
				var iColumnIndex = _fnNodeToColumnIndex( oSettings, iDataIndex, nNode );                                         // 5789
				return [ iDataIndex, _fnColumnIndexToVisible(oSettings, iColumnIndex ), iColumnIndex ];                          // 5790
			}                                                                                                                 // 5791
			return null;                                                                                                      // 5792
		};                                                                                                                 // 5793
		                                                                                                                   // 5794
		                                                                                                                   // 5795
		/**                                                                                                                // 5796
		 * Check to see if a row is 'open' or not.                                                                         // 5797
		 *  @param {node} nTr the table row to check                                                                       // 5798
		 *  @returns {boolean} true if the row is currently open, false otherwise                                          // 5799
		 *  @dtopt API                                                                                                     // 5800
		 *                                                                                                                 // 5801
		 *  @example                                                                                                       // 5802
		 *    $(document).ready(function() {                                                                               // 5803
		 *      var oTable;                                                                                                // 5804
		 *                                                                                                                 // 5805
		 *      // 'open' an information row when a row is clicked on                                                      // 5806
		 *      $('#example tbody tr').click( function () {                                                                // 5807
		 *        if ( oTable.fnIsOpen(this) ) {                                                                           // 5808
		 *          oTable.fnClose( this );                                                                                // 5809
		 *        } else {                                                                                                 // 5810
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );                                             // 5811
		 *        }                                                                                                        // 5812
		 *      } );                                                                                                       // 5813
		 *                                                                                                                 // 5814
		 *      oTable = $('#example').dataTable();                                                                        // 5815
		 *    } );                                                                                                         // 5816
		 */                                                                                                                // 5817
		this.fnIsOpen = function( nTr )                                                                                    // 5818
		{                                                                                                                  // 5819
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5820
			var aoOpenRows = oSettings.aoOpenRows;                                                                            // 5821
			                                                                                                                  // 5822
			for ( var i=0 ; i<oSettings.aoOpenRows.length ; i++ )                                                             // 5823
			{                                                                                                                 // 5824
				if ( oSettings.aoOpenRows[i].nParent == nTr )                                                                    // 5825
				{                                                                                                                // 5826
					return true;                                                                                                    // 5827
				}                                                                                                                // 5828
			}                                                                                                                 // 5829
			return false;                                                                                                     // 5830
		};                                                                                                                 // 5831
		                                                                                                                   // 5832
		                                                                                                                   // 5833
		/**                                                                                                                // 5834
		 * This function will place a new row directly after a row which is currently                                      // 5835
		 * on display on the page, with the HTML contents that is passed into the                                          // 5836
		 * function. This can be used, for example, to ask for confirmation that a                                         // 5837
		 * particular record should be deleted.                                                                            // 5838
		 *  @param {node} nTr The table row to 'open'                                                                      // 5839
		 *  @param {string|node|jQuery} mHtml The HTML to put into the row                                                 // 5840
		 *  @param {string} sClass Class to give the new TD cell                                                           // 5841
		 *  @returns {node} The row opened. Note that if the table row passed in as the                                    // 5842
		 *    first parameter, is not found in the table, this method will silently                                        // 5843
		 *    return.                                                                                                      // 5844
		 *  @dtopt API                                                                                                     // 5845
		 *                                                                                                                 // 5846
		 *  @example                                                                                                       // 5847
		 *    $(document).ready(function() {                                                                               // 5848
		 *      var oTable;                                                                                                // 5849
		 *                                                                                                                 // 5850
		 *      // 'open' an information row when a row is clicked on                                                      // 5851
		 *      $('#example tbody tr').click( function () {                                                                // 5852
		 *        if ( oTable.fnIsOpen(this) ) {                                                                           // 5853
		 *          oTable.fnClose( this );                                                                                // 5854
		 *        } else {                                                                                                 // 5855
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );                                             // 5856
		 *        }                                                                                                        // 5857
		 *      } );                                                                                                       // 5858
		 *                                                                                                                 // 5859
		 *      oTable = $('#example').dataTable();                                                                        // 5860
		 *    } );                                                                                                         // 5861
		 */                                                                                                                // 5862
		this.fnOpen = function( nTr, mHtml, sClass )                                                                       // 5863
		{                                                                                                                  // 5864
			/* Find settings from table node */                                                                               // 5865
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5866
		                                                                                                                   // 5867
			/* Check that the row given is in the table */                                                                    // 5868
			var nTableRows = _fnGetTrNodes( oSettings );                                                                      // 5869
			if ( $.inArray(nTr, nTableRows) === -1 )                                                                          // 5870
			{                                                                                                                 // 5871
				return;                                                                                                          // 5872
			}                                                                                                                 // 5873
			                                                                                                                  // 5874
			/* the old open one if there is one */                                                                            // 5875
			this.fnClose( nTr );                                                                                              // 5876
			                                                                                                                  // 5877
			var nNewRow = document.createElement("tr");                                                                       // 5878
			var nNewCell = document.createElement("td");                                                                      // 5879
			nNewRow.appendChild( nNewCell );                                                                                  // 5880
			nNewCell.className = sClass;                                                                                      // 5881
			nNewCell.colSpan = _fnVisbleColumns( oSettings );                                                                 // 5882
		                                                                                                                   // 5883
			if (typeof mHtml === "string")                                                                                    // 5884
			{                                                                                                                 // 5885
				nNewCell.innerHTML = mHtml;                                                                                      // 5886
			}                                                                                                                 // 5887
			else                                                                                                              // 5888
			{                                                                                                                 // 5889
				$(nNewCell).html( mHtml );                                                                                       // 5890
			}                                                                                                                 // 5891
		                                                                                                                   // 5892
			/* If the nTr isn't on the page at the moment - then we don't insert at the moment */                             // 5893
			var nTrs = $('tr', oSettings.nTBody);                                                                             // 5894
			if ( $.inArray(nTr, nTrs) != -1  )                                                                                // 5895
			{                                                                                                                 // 5896
				$(nNewRow).insertAfter(nTr);                                                                                     // 5897
			}                                                                                                                 // 5898
			                                                                                                                  // 5899
			oSettings.aoOpenRows.push( {                                                                                      // 5900
				"nTr": nNewRow,                                                                                                  // 5901
				"nParent": nTr                                                                                                   // 5902
			} );                                                                                                              // 5903
			                                                                                                                  // 5904
			return nNewRow;                                                                                                   // 5905
		};                                                                                                                 // 5906
		                                                                                                                   // 5907
		                                                                                                                   // 5908
		/**                                                                                                                // 5909
		 * Change the pagination - provides the internal logic for pagination in a simple API                              // 5910
		 * function. With this function you can have a DataTables table go to the next,                                    // 5911
		 * previous, first or last pages.                                                                                  // 5912
		 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"                       // 5913
		 *    or page number to jump to (integer), note that page 0 is the first page.                                     // 5914
		 *  @param {bool} [bRedraw=true] Redraw the table or not                                                           // 5915
		 *  @dtopt API                                                                                                     // 5916
		 *                                                                                                                 // 5917
		 *  @example                                                                                                       // 5918
		 *    $(document).ready(function() {                                                                               // 5919
		 *      var oTable = $('#example').dataTable();                                                                    // 5920
		 *      oTable.fnPageChange( 'next' );                                                                             // 5921
		 *    } );                                                                                                         // 5922
		 */                                                                                                                // 5923
		this.fnPageChange = function ( mAction, bRedraw )                                                                  // 5924
		{                                                                                                                  // 5925
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5926
			_fnPageChange( oSettings, mAction );                                                                              // 5927
			_fnCalculateEnd( oSettings );                                                                                     // 5928
			                                                                                                                  // 5929
			if ( bRedraw === undefined || bRedraw )                                                                           // 5930
			{                                                                                                                 // 5931
				_fnDraw( oSettings );                                                                                            // 5932
			}                                                                                                                 // 5933
		};                                                                                                                 // 5934
		                                                                                                                   // 5935
		                                                                                                                   // 5936
		/**                                                                                                                // 5937
		 * Show a particular column                                                                                        // 5938
		 *  @param {int} iCol The column whose display should be changed                                                   // 5939
		 *  @param {bool} bShow Show (true) or hide (false) the column                                                     // 5940
		 *  @param {bool} [bRedraw=true] Redraw the table or not                                                           // 5941
		 *  @dtopt API                                                                                                     // 5942
		 *                                                                                                                 // 5943
		 *  @example                                                                                                       // 5944
		 *    $(document).ready(function() {                                                                               // 5945
		 *      var oTable = $('#example').dataTable();                                                                    // 5946
		 *                                                                                                                 // 5947
		 *      // Hide the second column after initialisation                                                             // 5948
		 *      oTable.fnSetColumnVis( 1, false );                                                                         // 5949
		 *    } );                                                                                                         // 5950
		 */                                                                                                                // 5951
		this.fnSetColumnVis = function ( iCol, bShow, bRedraw )                                                            // 5952
		{                                                                                                                  // 5953
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 5954
			var i, iLen;                                                                                                      // 5955
			var aoColumns = oSettings.aoColumns;                                                                              // 5956
			var aoData = oSettings.aoData;                                                                                    // 5957
			var nTd, bAppend, iBefore;                                                                                        // 5958
			                                                                                                                  // 5959
			/* No point in doing anything if we are requesting what is already true */                                        // 5960
			if ( aoColumns[iCol].bVisible == bShow )                                                                          // 5961
			{                                                                                                                 // 5962
				return;                                                                                                          // 5963
			}                                                                                                                 // 5964
			                                                                                                                  // 5965
			/* Show the column */                                                                                             // 5966
			if ( bShow )                                                                                                      // 5967
			{                                                                                                                 // 5968
				var iInsert = 0;                                                                                                 // 5969
				for ( i=0 ; i<iCol ; i++ )                                                                                       // 5970
				{                                                                                                                // 5971
					if ( aoColumns[i].bVisible )                                                                                    // 5972
					{                                                                                                               // 5973
						iInsert++;                                                                                                     // 5974
					}                                                                                                               // 5975
				}                                                                                                                // 5976
				                                                                                                                 // 5977
				/* Need to decide if we should use appendChild or insertBefore */                                                // 5978
				bAppend = (iInsert >= _fnVisbleColumns( oSettings ));                                                            // 5979
		                                                                                                                   // 5980
				/* Which coloumn should we be inserting before? */                                                               // 5981
				if ( !bAppend )                                                                                                  // 5982
				{                                                                                                                // 5983
					for ( i=iCol ; i<aoColumns.length ; i++ )                                                                       // 5984
					{                                                                                                               // 5985
						if ( aoColumns[i].bVisible )                                                                                   // 5986
						{                                                                                                              // 5987
							iBefore = i;                                                                                                  // 5988
							break;                                                                                                        // 5989
						}                                                                                                              // 5990
					}                                                                                                               // 5991
				}                                                                                                                // 5992
		                                                                                                                   // 5993
				for ( i=0, iLen=aoData.length ; i<iLen ; i++ )                                                                   // 5994
				{                                                                                                                // 5995
					if ( aoData[i].nTr !== null )                                                                                   // 5996
					{                                                                                                               // 5997
						if ( bAppend )                                                                                                 // 5998
						{                                                                                                              // 5999
							aoData[i].nTr.appendChild(                                                                                    // 6000
								aoData[i]._anHidden[iCol]                                                                                    // 6001
							);                                                                                                            // 6002
						}                                                                                                              // 6003
						else                                                                                                           // 6004
						{                                                                                                              // 6005
							aoData[i].nTr.insertBefore(                                                                                   // 6006
								aoData[i]._anHidden[iCol],                                                                                   // 6007
								_fnGetTdNodes( oSettings, i )[iBefore] );                                                                    // 6008
						}                                                                                                              // 6009
					}                                                                                                               // 6010
				}                                                                                                                // 6011
			}                                                                                                                 // 6012
			else                                                                                                              // 6013
			{                                                                                                                 // 6014
				/* Remove a column from display */                                                                               // 6015
				for ( i=0, iLen=aoData.length ; i<iLen ; i++ )                                                                   // 6016
				{                                                                                                                // 6017
					if ( aoData[i].nTr !== null )                                                                                   // 6018
					{                                                                                                               // 6019
						nTd = _fnGetTdNodes( oSettings, i )[iCol];                                                                     // 6020
						aoData[i]._anHidden[iCol] = nTd;                                                                               // 6021
						nTd.parentNode.removeChild( nTd );                                                                             // 6022
					}                                                                                                               // 6023
				}                                                                                                                // 6024
			}                                                                                                                 // 6025
		                                                                                                                   // 6026
			/* Clear to set the visible flag */                                                                               // 6027
			aoColumns[iCol].bVisible = bShow;                                                                                 // 6028
		                                                                                                                   // 6029
			/* Redraw the header and footer based on the new column visibility */                                             // 6030
			_fnDrawHead( oSettings, oSettings.aoHeader );                                                                     // 6031
			if ( oSettings.nTFoot )                                                                                           // 6032
			{                                                                                                                 // 6033
				_fnDrawHead( oSettings, oSettings.aoFooter );                                                                    // 6034
			}                                                                                                                 // 6035
			                                                                                                                  // 6036
			/* If there are any 'open' rows, then we need to alter the colspan for this col change */                         // 6037
			for ( i=0, iLen=oSettings.aoOpenRows.length ; i<iLen ; i++ )                                                      // 6038
			{                                                                                                                 // 6039
				oSettings.aoOpenRows[i].nTr.colSpan = _fnVisbleColumns( oSettings );                                             // 6040
			}                                                                                                                 // 6041
			                                                                                                                  // 6042
			/* Do a redraw incase anything depending on the table columns needs it                                            // 6043
			 * (built-in: scrolling)                                                                                          // 6044
			 */                                                                                                               // 6045
			if ( bRedraw === undefined || bRedraw )                                                                           // 6046
			{                                                                                                                 // 6047
				_fnAdjustColumnSizing( oSettings );                                                                              // 6048
				_fnDraw( oSettings );                                                                                            // 6049
			}                                                                                                                 // 6050
			                                                                                                                  // 6051
			_fnSaveState( oSettings );                                                                                        // 6052
		};                                                                                                                 // 6053
		                                                                                                                   // 6054
		                                                                                                                   // 6055
		/**                                                                                                                // 6056
		 * Get the settings for a particular table for external manipulation                                               // 6057
		 *  @returns {object} DataTables settings object. See                                                              // 6058
		 *    {@link DataTable.models.oSettings}                                                                           // 6059
		 *  @dtopt API                                                                                                     // 6060
		 *                                                                                                                 // 6061
		 *  @example                                                                                                       // 6062
		 *    $(document).ready(function() {                                                                               // 6063
		 *      var oTable = $('#example').dataTable();                                                                    // 6064
		 *      var oSettings = oTable.fnSettings();                                                                       // 6065
		 *                                                                                                                 // 6066
		 *      // Show an example parameter from the settings                                                             // 6067
		 *      alert( oSettings._iDisplayStart );                                                                         // 6068
		 *    } );                                                                                                         // 6069
		 */                                                                                                                // 6070
		this.fnSettings = function()                                                                                       // 6071
		{                                                                                                                  // 6072
			return _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                                      // 6073
		};                                                                                                                 // 6074
		                                                                                                                   // 6075
		                                                                                                                   // 6076
		/**                                                                                                                // 6077
		 * Sort the table by a particular column                                                                           // 6078
		 *  @param {int} iCol the data index to sort on. Note that this will not match the                                 // 6079
		 *    'display index' if you have hidden data entries                                                              // 6080
		 *  @dtopt API                                                                                                     // 6081
		 *                                                                                                                 // 6082
		 *  @example                                                                                                       // 6083
		 *    $(document).ready(function() {                                                                               // 6084
		 *      var oTable = $('#example').dataTable();                                                                    // 6085
		 *                                                                                                                 // 6086
		 *      // Sort immediately with columns 0 and 1                                                                   // 6087
		 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );                                                                 // 6088
		 *    } );                                                                                                         // 6089
		 */                                                                                                                // 6090
		this.fnSort = function( aaSort )                                                                                   // 6091
		{                                                                                                                  // 6092
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 6093
			oSettings.aaSorting = aaSort;                                                                                     // 6094
			_fnSort( oSettings );                                                                                             // 6095
		};                                                                                                                 // 6096
		                                                                                                                   // 6097
		                                                                                                                   // 6098
		/**                                                                                                                // 6099
		 * Attach a sort listener to an element for a given column                                                         // 6100
		 *  @param {node} nNode the element to attach the sort listener to                                                 // 6101
		 *  @param {int} iColumn the column that a click on this node will sort on                                         // 6102
		 *  @param {function} [fnCallback] callback function when sort is run                                              // 6103
		 *  @dtopt API                                                                                                     // 6104
		 *                                                                                                                 // 6105
		 *  @example                                                                                                       // 6106
		 *    $(document).ready(function() {                                                                               // 6107
		 *      var oTable = $('#example').dataTable();                                                                    // 6108
		 *                                                                                                                 // 6109
		 *      // Sort on column 1, when 'sorter' is clicked on                                                           // 6110
		 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );                                             // 6111
		 *    } );                                                                                                         // 6112
		 */                                                                                                                // 6113
		this.fnSortListener = function( nNode, iColumn, fnCallback )                                                       // 6114
		{                                                                                                                  // 6115
			_fnSortAttachListener( _fnSettingsFromNode( this[DataTable.ext.iApiIndex] ), nNode, iColumn,                      // 6116
			 	fnCallback );                                                                                                   // 6117
		};                                                                                                                 // 6118
		                                                                                                                   // 6119
		                                                                                                                   // 6120
		/**                                                                                                                // 6121
		 * Update a table cell or row - this method will accept either a single value to                                   // 6122
		 * update the cell with, an array of values with one element for each column or                                    // 6123
		 * an object in the same format as the original data source. The function is                                       // 6124
		 * self-referencing in order to make the multi column updates easier.                                              // 6125
		 *  @param {object|array|string} mData Data to update the cell/row with                                            // 6126
		 *  @param {node|int} mRow TR element you want to update or the aoData index                                       // 6127
		 *  @param {int} [iColumn] The column to update (not used of mData is an array or object)                          // 6128
		 *  @param {bool} [bRedraw=true] Redraw the table or not                                                           // 6129
		 *  @param {bool} [bAction=true] Perform pre-draw actions or not                                                   // 6130
		 *  @returns {int} 0 on success, 1 on error                                                                        // 6131
		 *  @dtopt API                                                                                                     // 6132
		 *                                                                                                                 // 6133
		 *  @example                                                                                                       // 6134
		 *    $(document).ready(function() {                                                                               // 6135
		 *      var oTable = $('#example').dataTable();                                                                    // 6136
		 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell                                                  // 6137
		 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], 1, 0 ); // Row                                                 // 6138
		 *    } );                                                                                                         // 6139
		 */                                                                                                                // 6140
		this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )                                                 // 6141
		{                                                                                                                  // 6142
			var oSettings = _fnSettingsFromNode( this[DataTable.ext.iApiIndex] );                                             // 6143
			var i, iLen, sDisplay;                                                                                            // 6144
			var iRow = (typeof mRow === 'object') ?                                                                           // 6145
				_fnNodeToDataIndex(oSettings, mRow) : mRow;                                                                      // 6146
			                                                                                                                  // 6147
			if ( $.isArray(mData) && iColumn === undefined )                                                                  // 6148
			{                                                                                                                 // 6149
				/* Array update - update the whole row */                                                                        // 6150
				oSettings.aoData[iRow]._aData = mData.slice();                                                                   // 6151
				                                                                                                                 // 6152
				/* Flag to the function that we are recursing */                                                                 // 6153
				for ( i=0 ; i<oSettings.aoColumns.length ; i++ )                                                                 // 6154
				{                                                                                                                // 6155
					this.fnUpdate( _fnGetCellData( oSettings, iRow, i ), iRow, i, false, false );                                   // 6156
				}                                                                                                                // 6157
			}                                                                                                                 // 6158
			else if ( $.isPlainObject(mData) && iColumn === undefined )                                                       // 6159
			{                                                                                                                 // 6160
				/* Object update - update the whole row - assume the developer gets the object right */                          // 6161
				oSettings.aoData[iRow]._aData = $.extend( true, {}, mData );                                                     // 6162
		                                                                                                                   // 6163
				for ( i=0 ; i<oSettings.aoColumns.length ; i++ )                                                                 // 6164
				{                                                                                                                // 6165
					this.fnUpdate( _fnGetCellData( oSettings, iRow, i ), iRow, i, false, false );                                   // 6166
				}                                                                                                                // 6167
			}                                                                                                                 // 6168
			else                                                                                                              // 6169
			{                                                                                                                 // 6170
				/* Individual cell update */                                                                                     // 6171
				_fnSetCellData( oSettings, iRow, iColumn, mData );                                                               // 6172
				sDisplay = _fnGetCellData( oSettings, iRow, iColumn, 'display' );                                                // 6173
				                                                                                                                 // 6174
				var oCol = oSettings.aoColumns[iColumn];                                                                         // 6175
				if ( oCol.fnRender !== null )                                                                                    // 6176
				{                                                                                                                // 6177
					sDisplay = _fnRender( oSettings, iRow, iColumn );                                                               // 6178
					if ( oCol.bUseRendered )                                                                                        // 6179
					{                                                                                                               // 6180
						_fnSetCellData( oSettings, iRow, iColumn, sDisplay );                                                          // 6181
					}                                                                                                               // 6182
				}                                                                                                                // 6183
				                                                                                                                 // 6184
				if ( oSettings.aoData[iRow].nTr !== null )                                                                       // 6185
				{                                                                                                                // 6186
					/* Do the actual HTML update */                                                                                 // 6187
					_fnGetTdNodes( oSettings, iRow )[iColumn].innerHTML = sDisplay;                                                 // 6188
				}                                                                                                                // 6189
			}                                                                                                                 // 6190
			                                                                                                                  // 6191
			/* Modify the search index for this row (strictly this is likely not needed, since fnReDraw                       // 6192
			 * will rebuild the search array - however, the redraw might be disabled by the user)                             // 6193
			 */                                                                                                               // 6194
			var iDisplayIndex = $.inArray( iRow, oSettings.aiDisplay );                                                       // 6195
			oSettings.asDataSearch[iDisplayIndex] = _fnBuildSearchRow(                                                        // 6196
				oSettings,                                                                                                       // 6197
				_fnGetRowData( oSettings, iRow, 'filter', _fnGetColumns( oSettings, 'bSearchable' ) )                            // 6198
			);                                                                                                                // 6199
			                                                                                                                  // 6200
			/* Perform pre-draw actions */                                                                                    // 6201
			if ( bAction === undefined || bAction )                                                                           // 6202
			{                                                                                                                 // 6203
				_fnAdjustColumnSizing( oSettings );                                                                              // 6204
			}                                                                                                                 // 6205
			                                                                                                                  // 6206
			/* Redraw the table */                                                                                            // 6207
			if ( bRedraw === undefined || bRedraw )                                                                           // 6208
			{                                                                                                                 // 6209
				_fnReDraw( oSettings );                                                                                          // 6210
			}                                                                                                                 // 6211
			return 0;                                                                                                         // 6212
		};                                                                                                                 // 6213
		                                                                                                                   // 6214
		                                                                                                                   // 6215
		/**                                                                                                                // 6216
		 * Provide a common method for plug-ins to check the version of DataTables being used, in order                    // 6217
		 * to ensure compatibility.                                                                                        // 6218
		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the                     // 6219
		 *    formats "X" and "X.Y" are also acceptable.                                                                   // 6220
		 *  @returns {boolean} true if this version of DataTables is greater or equal to the required                      // 6221
		 *    version, or false if this version of DataTales is not suitable                                               // 6222
		 *  @method                                                                                                        // 6223
		 *  @dtopt API                                                                                                     // 6224
		 *                                                                                                                 // 6225
		 *  @example                                                                                                       // 6226
		 *    $(document).ready(function() {                                                                               // 6227
		 *      var oTable = $('#example').dataTable();                                                                    // 6228
		 *      alert( oTable.fnVersionCheck( '1.9.0' ) );                                                                 // 6229
		 *    } );                                                                                                         // 6230
		 */                                                                                                                // 6231
		this.fnVersionCheck = DataTable.ext.fnVersionCheck;                                                                // 6232
		                                                                                                                   // 6233
		                                                                                                                   // 6234
		/*                                                                                                                 // 6235
		 * This is really a good bit rubbish this method of exposing the internal methods                                  // 6236
		 * publicly... - To be fixed in 2.0 using methods on the prototype                                                 // 6237
		 */                                                                                                                // 6238
		                                                                                                                   // 6239
		                                                                                                                   // 6240
		/**                                                                                                                // 6241
		 * Create a wrapper function for exporting an internal functions to an external API.                               // 6242
		 *  @param {string} sFunc API function name                                                                        // 6243
		 *  @returns {function} wrapped function                                                                           // 6244
		 *  @memberof DataTable#oApi                                                                                       // 6245
		 */                                                                                                                // 6246
		function _fnExternApiFunc (sFunc)                                                                                  // 6247
		{                                                                                                                  // 6248
			return function() {                                                                                               // 6249
				var aArgs = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(                                         // 6250
					Array.prototype.slice.call(arguments) );                                                                        // 6251
				return DataTable.ext.oApi[sFunc].apply( this, aArgs );                                                           // 6252
			};                                                                                                                // 6253
		}                                                                                                                  // 6254
		                                                                                                                   // 6255
		                                                                                                                   // 6256
		/**                                                                                                                // 6257
		 * Reference to internal functions for use by plug-in developers. Note that these                                  // 6258
		 * methods are references to internal functions and are considered to be private.                                  // 6259
		 * If you use these methods, be aware that they are liable to change between versions                              // 6260
		 * (check the upgrade notes).                                                                                      // 6261
		 *  @namespace                                                                                                     // 6262
		 */                                                                                                                // 6263
		this.oApi = {                                                                                                      // 6264
			"_fnExternApiFunc": _fnExternApiFunc,                                                                             // 6265
			"_fnInitialise": _fnInitialise,                                                                                   // 6266
			"_fnInitComplete": _fnInitComplete,                                                                               // 6267
			"_fnLanguageCompat": _fnLanguageCompat,                                                                           // 6268
			"_fnAddColumn": _fnAddColumn,                                                                                     // 6269
			"_fnColumnOptions": _fnColumnOptions,                                                                             // 6270
			"_fnAddData": _fnAddData,                                                                                         // 6271
			"_fnCreateTr": _fnCreateTr,                                                                                       // 6272
			"_fnGatherData": _fnGatherData,                                                                                   // 6273
			"_fnBuildHead": _fnBuildHead,                                                                                     // 6274
			"_fnDrawHead": _fnDrawHead,                                                                                       // 6275
			"_fnDraw": _fnDraw,                                                                                               // 6276
			"_fnReDraw": _fnReDraw,                                                                                           // 6277
			"_fnAjaxUpdate": _fnAjaxUpdate,                                                                                   // 6278
			"_fnAjaxParameters": _fnAjaxParameters,                                                                           // 6279
			"_fnAjaxUpdateDraw": _fnAjaxUpdateDraw,                                                                           // 6280
			"_fnServerParams": _fnServerParams,                                                                               // 6281
			"_fnAddOptionsHtml": _fnAddOptionsHtml,                                                                           // 6282
			"_fnFeatureHtmlTable": _fnFeatureHtmlTable,                                                                       // 6283
			"_fnScrollDraw": _fnScrollDraw,                                                                                   // 6284
			"_fnAdjustColumnSizing": _fnAdjustColumnSizing,                                                                   // 6285
			"_fnFeatureHtmlFilter": _fnFeatureHtmlFilter,                                                                     // 6286
			"_fnFilterComplete": _fnFilterComplete,                                                                           // 6287
			"_fnFilterCustom": _fnFilterCustom,                                                                               // 6288
			"_fnFilterColumn": _fnFilterColumn,                                                                               // 6289
			"_fnFilter": _fnFilter,                                                                                           // 6290
			"_fnBuildSearchArray": _fnBuildSearchArray,                                                                       // 6291
			"_fnBuildSearchRow": _fnBuildSearchRow,                                                                           // 6292
			"_fnFilterCreateSearch": _fnFilterCreateSearch,                                                                   // 6293
			"_fnDataToSearch": _fnDataToSearch,                                                                               // 6294
			"_fnSort": _fnSort,                                                                                               // 6295
			"_fnSortAttachListener": _fnSortAttachListener,                                                                   // 6296
			"_fnSortingClasses": _fnSortingClasses,                                                                           // 6297
			"_fnFeatureHtmlPaginate": _fnFeatureHtmlPaginate,                                                                 // 6298
			"_fnPageChange": _fnPageChange,                                                                                   // 6299
			"_fnFeatureHtmlInfo": _fnFeatureHtmlInfo,                                                                         // 6300
			"_fnUpdateInfo": _fnUpdateInfo,                                                                                   // 6301
			"_fnFeatureHtmlLength": _fnFeatureHtmlLength,                                                                     // 6302
			"_fnFeatureHtmlProcessing": _fnFeatureHtmlProcessing,                                                             // 6303
			"_fnProcessingDisplay": _fnProcessingDisplay,                                                                     // 6304
			"_fnVisibleToColumnIndex": _fnVisibleToColumnIndex,                                                               // 6305
			"_fnColumnIndexToVisible": _fnColumnIndexToVisible,                                                               // 6306
			"_fnNodeToDataIndex": _fnNodeToDataIndex,                                                                         // 6307
			"_fnVisbleColumns": _fnVisbleColumns,                                                                             // 6308
			"_fnCalculateEnd": _fnCalculateEnd,                                                                               // 6309
			"_fnConvertToWidth": _fnConvertToWidth,                                                                           // 6310
			"_fnCalculateColumnWidths": _fnCalculateColumnWidths,                                                             // 6311
			"_fnScrollingWidthAdjust": _fnScrollingWidthAdjust,                                                               // 6312
			"_fnGetWidestNode": _fnGetWidestNode,                                                                             // 6313
			"_fnGetMaxLenString": _fnGetMaxLenString,                                                                         // 6314
			"_fnStringToCss": _fnStringToCss,                                                                                 // 6315
			"_fnDetectType": _fnDetectType,                                                                                   // 6316
			"_fnSettingsFromNode": _fnSettingsFromNode,                                                                       // 6317
			"_fnGetDataMaster": _fnGetDataMaster,                                                                             // 6318
			"_fnGetTrNodes": _fnGetTrNodes,                                                                                   // 6319
			"_fnGetTdNodes": _fnGetTdNodes,                                                                                   // 6320
			"_fnEscapeRegex": _fnEscapeRegex,                                                                                 // 6321
			"_fnDeleteIndex": _fnDeleteIndex,                                                                                 // 6322
			"_fnReOrderIndex": _fnReOrderIndex,                                                                               // 6323
			"_fnColumnOrdering": _fnColumnOrdering,                                                                           // 6324
			"_fnLog": _fnLog,                                                                                                 // 6325
			"_fnClearTable": _fnClearTable,                                                                                   // 6326
			"_fnSaveState": _fnSaveState,                                                                                     // 6327
			"_fnLoadState": _fnLoadState,                                                                                     // 6328
			"_fnCreateCookie": _fnCreateCookie,                                                                               // 6329
			"_fnReadCookie": _fnReadCookie,                                                                                   // 6330
			"_fnDetectHeader": _fnDetectHeader,                                                                               // 6331
			"_fnGetUniqueThs": _fnGetUniqueThs,                                                                               // 6332
			"_fnScrollBarWidth": _fnScrollBarWidth,                                                                           // 6333
			"_fnApplyToChildren": _fnApplyToChildren,                                                                         // 6334
			"_fnMap": _fnMap,                                                                                                 // 6335
			"_fnGetRowData": _fnGetRowData,                                                                                   // 6336
			"_fnGetCellData": _fnGetCellData,                                                                                 // 6337
			"_fnSetCellData": _fnSetCellData,                                                                                 // 6338
			"_fnGetObjectDataFn": _fnGetObjectDataFn,                                                                         // 6339
			"_fnSetObjectDataFn": _fnSetObjectDataFn,                                                                         // 6340
			"_fnApplyColumnDefs": _fnApplyColumnDefs,                                                                         // 6341
			"_fnBindAction": _fnBindAction,                                                                                   // 6342
			"_fnExtend": _fnExtend,                                                                                           // 6343
			"_fnCallbackReg": _fnCallbackReg,                                                                                 // 6344
			"_fnCallbackFire": _fnCallbackFire,                                                                               // 6345
			"_fnJsonString": _fnJsonString,                                                                                   // 6346
			"_fnRender": _fnRender,                                                                                           // 6347
			"_fnNodeToColumnIndex": _fnNodeToColumnIndex,                                                                     // 6348
			"_fnInfoMacros": _fnInfoMacros,                                                                                   // 6349
			"_fnBrowserDetect": _fnBrowserDetect,                                                                             // 6350
			"_fnGetColumns": _fnGetColumns                                                                                    // 6351
		};                                                                                                                 // 6352
		                                                                                                                   // 6353
		$.extend( DataTable.ext.oApi, this.oApi );                                                                         // 6354
		                                                                                                                   // 6355
		for ( var sFunc in DataTable.ext.oApi )                                                                            // 6356
		{                                                                                                                  // 6357
			if ( sFunc )                                                                                                      // 6358
			{                                                                                                                 // 6359
				this[sFunc] = _fnExternApiFunc(sFunc);                                                                           // 6360
			}                                                                                                                 // 6361
		}                                                                                                                  // 6362
		                                                                                                                   // 6363
		                                                                                                                   // 6364
		var _that = this;                                                                                                  // 6365
		this.each(function() {                                                                                             // 6366
			var i=0, iLen, j, jLen, k, kLen;                                                                                  // 6367
			var sId = this.getAttribute( 'id' );                                                                              // 6368
			var bInitHandedOff = false;                                                                                       // 6369
			var bUsePassedData = false;                                                                                       // 6370
			                                                                                                                  // 6371
			                                                                                                                  // 6372
			/* Sanity check */                                                                                                // 6373
			if ( this.nodeName.toLowerCase() != 'table' )                                                                     // 6374
			{                                                                                                                 // 6375
				_fnLog( null, 0, "Attempted to initialise DataTables on a node which is not a "+                                 // 6376
					"table: "+this.nodeName );                                                                                      // 6377
				return;                                                                                                          // 6378
			}                                                                                                                 // 6379
			                                                                                                                  // 6380
			/* Check to see if we are re-initialising a table */                                                              // 6381
			for ( i=0, iLen=DataTable.settings.length ; i<iLen ; i++ )                                                        // 6382
			{                                                                                                                 // 6383
				/* Base check on table node */                                                                                   // 6384
				if ( DataTable.settings[i].nTable == this )                                                                      // 6385
				{                                                                                                                // 6386
					if ( oInit === undefined || oInit.bRetrieve )                                                                   // 6387
					{                                                                                                               // 6388
						return DataTable.settings[i].oInstance;                                                                        // 6389
					}                                                                                                               // 6390
					else if ( oInit.bDestroy )                                                                                      // 6391
					{                                                                                                               // 6392
						DataTable.settings[i].oInstance.fnDestroy();                                                                   // 6393
						break;                                                                                                         // 6394
					}                                                                                                               // 6395
					else                                                                                                            // 6396
					{                                                                                                               // 6397
						_fnLog( DataTable.settings[i], 0, "Cannot reinitialise DataTable.\n\n"+                                        // 6398
							"To retrieve the DataTables object for this table, pass no arguments or see "+                                // 6399
							"the docs for bRetrieve and bDestroy" );                                                                      // 6400
						return;                                                                                                        // 6401
					}                                                                                                               // 6402
				}                                                                                                                // 6403
				                                                                                                                 // 6404
				/* If the element we are initialising has the same ID as a table which was previously                            // 6405
				 * initialised, but the table nodes don't match (from before) then we destroy the old                            // 6406
				 * instance by simply deleting it. This is under the assumption that the table has been                          // 6407
				 * destroyed by other methods. Anyone using non-id selectors will need to do this manually                       // 6408
				 */                                                                                                              // 6409
				if ( DataTable.settings[i].sTableId == this.id )                                                                 // 6410
				{                                                                                                                // 6411
					DataTable.settings.splice( i, 1 );                                                                              // 6412
					break;                                                                                                          // 6413
				}                                                                                                                // 6414
			}                                                                                                                 // 6415
			                                                                                                                  // 6416
			/* Ensure the table has an ID - required for accessibility */                                                     // 6417
			if ( sId === null || sId === "" )                                                                                 // 6418
			{                                                                                                                 // 6419
				sId = "DataTables_Table_"+(DataTable.ext._oExternConfig.iNextUnique++);                                          // 6420
				this.id = sId;                                                                                                   // 6421
			}                                                                                                                 // 6422
			                                                                                                                  // 6423
			/* Create the settings object for this table and set some of the default parameters */                            // 6424
			var oSettings = $.extend( true, {}, DataTable.models.oSettings, {                                                 // 6425
				"nTable":        this,                                                                                           // 6426
				"oApi":          _that.oApi,                                                                                     // 6427
				"oInit":         oInit,                                                                                          // 6428
				"sDestroyWidth": $(this).width(),                                                                                // 6429
				"sInstance":     sId,                                                                                            // 6430
				"sTableId":      sId                                                                                             // 6431
			} );                                                                                                              // 6432
			DataTable.settings.push( oSettings );                                                                             // 6433
			                                                                                                                  // 6434
			// Need to add the instance after the instance after the settings object has been added                           // 6435
			// to the settings array, so we can self reference the table instance if more than one                            // 6436
			oSettings.oInstance = (_that.length===1) ? _that : $(this).dataTable();                                           // 6437
			                                                                                                                  // 6438
			/* Setting up the initialisation object */                                                                        // 6439
			if ( !oInit )                                                                                                     // 6440
			{                                                                                                                 // 6441
				oInit = {};                                                                                                      // 6442
			}                                                                                                                 // 6443
			                                                                                                                  // 6444
			// Backwards compatibility, before we apply all the defaults                                                      // 6445
			if ( oInit.oLanguage )                                                                                            // 6446
			{                                                                                                                 // 6447
				_fnLanguageCompat( oInit.oLanguage );                                                                            // 6448
			}                                                                                                                 // 6449
			                                                                                                                  // 6450
			oInit = _fnExtend( $.extend(true, {}, DataTable.defaults), oInit );                                               // 6451
			                                                                                                                  // 6452
			// Map the initialisation options onto the settings object                                                        // 6453
			_fnMap( oSettings.oFeatures, oInit, "bPaginate" );                                                                // 6454
			_fnMap( oSettings.oFeatures, oInit, "bLengthChange" );                                                            // 6455
			_fnMap( oSettings.oFeatures, oInit, "bFilter" );                                                                  // 6456
			_fnMap( oSettings.oFeatures, oInit, "bSort" );                                                                    // 6457
			_fnMap( oSettings.oFeatures, oInit, "bInfo" );                                                                    // 6458
			_fnMap( oSettings.oFeatures, oInit, "bProcessing" );                                                              // 6459
			_fnMap( oSettings.oFeatures, oInit, "bAutoWidth" );                                                               // 6460
			_fnMap( oSettings.oFeatures, oInit, "bSortClasses" );                                                             // 6461
			_fnMap( oSettings.oFeatures, oInit, "bServerSide" );                                                              // 6462
			_fnMap( oSettings.oFeatures, oInit, "bDeferRender" );                                                             // 6463
			_fnMap( oSettings.oScroll, oInit, "sScrollX", "sX" );                                                             // 6464
			_fnMap( oSettings.oScroll, oInit, "sScrollXInner", "sXInner" );                                                   // 6465
			_fnMap( oSettings.oScroll, oInit, "sScrollY", "sY" );                                                             // 6466
			_fnMap( oSettings.oScroll, oInit, "bScrollCollapse", "bCollapse" );                                               // 6467
			_fnMap( oSettings.oScroll, oInit, "bScrollInfinite", "bInfinite" );                                               // 6468
			_fnMap( oSettings.oScroll, oInit, "iScrollLoadGap", "iLoadGap" );                                                 // 6469
			_fnMap( oSettings.oScroll, oInit, "bScrollAutoCss", "bAutoCss" );                                                 // 6470
			_fnMap( oSettings, oInit, "asStripeClasses" );                                                                    // 6471
			_fnMap( oSettings, oInit, "asStripClasses", "asStripeClasses" ); // legacy                                        // 6472
			_fnMap( oSettings, oInit, "fnServerData" );                                                                       // 6473
			_fnMap( oSettings, oInit, "fnFormatNumber" );                                                                     // 6474
			_fnMap( oSettings, oInit, "sServerMethod" );                                                                      // 6475
			_fnMap( oSettings, oInit, "aaSorting" );                                                                          // 6476
			_fnMap( oSettings, oInit, "aaSortingFixed" );                                                                     // 6477
			_fnMap( oSettings, oInit, "aLengthMenu" );                                                                        // 6478
			_fnMap( oSettings, oInit, "sPaginationType" );                                                                    // 6479
			_fnMap( oSettings, oInit, "sAjaxSource" );                                                                        // 6480
			_fnMap( oSettings, oInit, "sAjaxDataProp" );                                                                      // 6481
			_fnMap( oSettings, oInit, "iCookieDuration" );                                                                    // 6482
			_fnMap( oSettings, oInit, "sCookiePrefix" );                                                                      // 6483
			_fnMap( oSettings, oInit, "sDom" );                                                                               // 6484
			_fnMap( oSettings, oInit, "bSortCellsTop" );                                                                      // 6485
			_fnMap( oSettings, oInit, "iTabIndex" );                                                                          // 6486
			_fnMap( oSettings, oInit, "oSearch", "oPreviousSearch" );                                                         // 6487
			_fnMap( oSettings, oInit, "aoSearchCols", "aoPreSearchCols" );                                                    // 6488
			_fnMap( oSettings, oInit, "iDisplayLength", "_iDisplayLength" );                                                  // 6489
			_fnMap( oSettings, oInit, "bJQueryUI", "bJUI" );                                                                  // 6490
			_fnMap( oSettings, oInit, "fnCookieCallback" );                                                                   // 6491
			_fnMap( oSettings, oInit, "fnStateLoad" );                                                                        // 6492
			_fnMap( oSettings, oInit, "fnStateSave" );                                                                        // 6493
			_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );                                                           // 6494
			                                                                                                                  // 6495
			/* Callback functions which are array driven */                                                                   // 6496
			_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );                           // 6497
			_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );                           // 6498
			_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );                           // 6499
			_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );                           // 6500
			_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );                           // 6501
			_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );                           // 6502
			_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );                           // 6503
			_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );                           // 6504
			_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );                           // 6505
			_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );                           // 6506
			_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );                           // 6507
			                                                                                                                  // 6508
			if ( oSettings.oFeatures.bServerSide && oSettings.oFeatures.bSort &&                                              // 6509
				   oSettings.oFeatures.bSortClasses )                                                                            // 6510
			{                                                                                                                 // 6511
				/* Enable sort classes for server-side processing. Safe to do it here, since server-side                         // 6512
				 * processing must be enabled by the developer                                                                   // 6513
				 */                                                                                                              // 6514
				_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSortingClasses, 'server_side_sort_classes' );                    // 6515
			}                                                                                                                 // 6516
			else if ( oSettings.oFeatures.bDeferRender )                                                                      // 6517
			{                                                                                                                 // 6518
				_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSortingClasses, 'defer_sort_classes' );                          // 6519
			}                                                                                                                 // 6520
			                                                                                                                  // 6521
			if ( oInit.bJQueryUI )                                                                                            // 6522
			{                                                                                                                 // 6523
				/* Use the JUI classes object for display. You could clone the oStdClasses object if                             // 6524
				 * you want to have multiple tables with multiple independent classes                                            // 6525
				 */                                                                                                              // 6526
				$.extend( oSettings.oClasses, DataTable.ext.oJUIClasses );                                                       // 6527
				                                                                                                                 // 6528
				if ( oInit.sDom === DataTable.defaults.sDom && DataTable.defaults.sDom === "lfrtip" )                            // 6529
				{                                                                                                                // 6530
					/* Set the DOM to use a layout suitable for jQuery UI's theming */                                              // 6531
					oSettings.sDom = '<"H"lfr>t<"F"ip>';                                                                            // 6532
				}                                                                                                                // 6533
			}                                                                                                                 // 6534
			else                                                                                                              // 6535
			{                                                                                                                 // 6536
				$.extend( oSettings.oClasses, DataTable.ext.oStdClasses );                                                       // 6537
			}                                                                                                                 // 6538
			$(this).addClass( oSettings.oClasses.sTable );                                                                    // 6539
			                                                                                                                  // 6540
			/* Calculate the scroll bar width and cache it for use later on */                                                // 6541
			if ( oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "" )                                                 // 6542
			{                                                                                                                 // 6543
				oSettings.oScroll.iBarWidth = _fnScrollBarWidth();                                                               // 6544
			}                                                                                                                 // 6545
			                                                                                                                  // 6546
			if ( oSettings.iInitDisplayStart === undefined )                                                                  // 6547
			{                                                                                                                 // 6548
				/* Display start point, taking into account the save saving */                                                   // 6549
				oSettings.iInitDisplayStart = oInit.iDisplayStart;                                                               // 6550
				oSettings._iDisplayStart = oInit.iDisplayStart;                                                                  // 6551
			}                                                                                                                 // 6552
			                                                                                                                  // 6553
			/* Must be done after everything which can be overridden by a cookie! */                                          // 6554
			if ( oInit.bStateSave )                                                                                           // 6555
			{                                                                                                                 // 6556
				oSettings.oFeatures.bStateSave = true;                                                                           // 6557
				_fnLoadState( oSettings, oInit );                                                                                // 6558
				_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );                                       // 6559
			}                                                                                                                 // 6560
			                                                                                                                  // 6561
			if ( oInit.iDeferLoading !== null )                                                                               // 6562
			{                                                                                                                 // 6563
				oSettings.bDeferLoading = true;                                                                                  // 6564
				var tmp = $.isArray( oInit.iDeferLoading );                                                                      // 6565
				oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;                                 // 6566
				oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;                                   // 6567
			}                                                                                                                 // 6568
			                                                                                                                  // 6569
			if ( oInit.aaData !== null )                                                                                      // 6570
			{                                                                                                                 // 6571
				bUsePassedData = true;                                                                                           // 6572
			}                                                                                                                 // 6573
			                                                                                                                  // 6574
			/* Language definitions */                                                                                        // 6575
			if ( oInit.oLanguage.sUrl !== "" )                                                                                // 6576
			{                                                                                                                 // 6577
				/* Get the language definitions from a file - because this Ajax call makes the language                          // 6578
				 * get async to the remainder of this function we use bInitHandedOff to indicate that                            // 6579
				 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor                         // 6580
				 */                                                                                                              // 6581
				oSettings.oLanguage.sUrl = oInit.oLanguage.sUrl;                                                                 // 6582
				$.getJSON( oSettings.oLanguage.sUrl, null, function( json ) {                                                    // 6583
					_fnLanguageCompat( json );                                                                                      // 6584
					$.extend( true, oSettings.oLanguage, oInit.oLanguage, json );                                                   // 6585
					_fnInitialise( oSettings );                                                                                     // 6586
				} );                                                                                                             // 6587
				bInitHandedOff = true;                                                                                           // 6588
			}                                                                                                                 // 6589
			else                                                                                                              // 6590
			{                                                                                                                 // 6591
				$.extend( true, oSettings.oLanguage, oInit.oLanguage );                                                          // 6592
			}                                                                                                                 // 6593
			                                                                                                                  // 6594
			                                                                                                                  // 6595
			/*                                                                                                                // 6596
			 * Stripes                                                                                                        // 6597
			 */                                                                                                               // 6598
			if ( oInit.asStripeClasses === null )                                                                             // 6599
			{                                                                                                                 // 6600
				oSettings.asStripeClasses =[                                                                                     // 6601
					oSettings.oClasses.sStripeOdd,                                                                                  // 6602
					oSettings.oClasses.sStripeEven                                                                                  // 6603
				];                                                                                                               // 6604
			}                                                                                                                 // 6605
			                                                                                                                  // 6606
			/* Remove row stripe classes if they are already on the table row */                                              // 6607
			iLen=oSettings.asStripeClasses.length;                                                                            // 6608
			oSettings.asDestroyStripes = [];                                                                                  // 6609
			if (iLen)                                                                                                         // 6610
			{                                                                                                                 // 6611
				var bStripeRemove = false;                                                                                       // 6612
				var anRows = $(this).children('tbody').children('tr:lt(' + iLen + ')');                                          // 6613
				for ( i=0 ; i<iLen ; i++ )                                                                                       // 6614
				{                                                                                                                // 6615
					if ( anRows.hasClass( oSettings.asStripeClasses[i] ) )                                                          // 6616
					{                                                                                                               // 6617
						bStripeRemove = true;                                                                                          // 6618
						                                                                                                               // 6619
						/* Store the classes which we are about to remove so they can be re-added on destroy */                        // 6620
						oSettings.asDestroyStripes.push( oSettings.asStripeClasses[i] );                                               // 6621
					}                                                                                                               // 6622
				}                                                                                                                // 6623
				                                                                                                                 // 6624
				if ( bStripeRemove )                                                                                             // 6625
				{                                                                                                                // 6626
					anRows.removeClass( oSettings.asStripeClasses.join(' ') );                                                      // 6627
				}                                                                                                                // 6628
			}                                                                                                                 // 6629
			                                                                                                                  // 6630
			/*                                                                                                                // 6631
			 * Columns                                                                                                        // 6632
			 * See if we should load columns automatically or use defined ones                                                // 6633
			 */                                                                                                               // 6634
			var anThs = [];                                                                                                   // 6635
			var aoColumnsInit;                                                                                                // 6636
			var nThead = this.getElementsByTagName('thead');                                                                  // 6637
			if ( nThead.length !== 0 )                                                                                        // 6638
			{                                                                                                                 // 6639
				_fnDetectHeader( oSettings.aoHeader, nThead[0] );                                                                // 6640
				anThs = _fnGetUniqueThs( oSettings );                                                                            // 6641
			}                                                                                                                 // 6642
			                                                                                                                  // 6643
			/* If not given a column array, generate one with nulls */                                                        // 6644
			if ( oInit.aoColumns === null )                                                                                   // 6645
			{                                                                                                                 // 6646
				aoColumnsInit = [];                                                                                              // 6647
				for ( i=0, iLen=anThs.length ; i<iLen ; i++ )                                                                    // 6648
				{                                                                                                                // 6649
					aoColumnsInit.push( null );                                                                                     // 6650
				}                                                                                                                // 6651
			}                                                                                                                 // 6652
			else                                                                                                              // 6653
			{                                                                                                                 // 6654
				aoColumnsInit = oInit.aoColumns;                                                                                 // 6655
			}                                                                                                                 // 6656
			                                                                                                                  // 6657
			/* Add the columns */                                                                                             // 6658
			for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )                                                             // 6659
			{                                                                                                                 // 6660
				/* Short cut - use the loop to check if we have column visibility state to restore */                            // 6661
				if ( oInit.saved_aoColumns !== undefined && oInit.saved_aoColumns.length == iLen )                               // 6662
				{                                                                                                                // 6663
					if ( aoColumnsInit[i] === null )                                                                                // 6664
					{                                                                                                               // 6665
						aoColumnsInit[i] = {};                                                                                         // 6666
					}                                                                                                               // 6667
					aoColumnsInit[i].bVisible = oInit.saved_aoColumns[i].bVisible;                                                  // 6668
				}                                                                                                                // 6669
				                                                                                                                 // 6670
				_fnAddColumn( oSettings, anThs ? anThs[i] : null );                                                              // 6671
			}                                                                                                                 // 6672
			                                                                                                                  // 6673
			/* Apply the column definitions */                                                                                // 6674
			_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {                         // 6675
				_fnColumnOptions( oSettings, iCol, oDef );                                                                       // 6676
			} );                                                                                                              // 6677
			                                                                                                                  // 6678
			                                                                                                                  // 6679
			/*                                                                                                                // 6680
			 * Sorting                                                                                                        // 6681
			 * Check the aaSorting array                                                                                      // 6682
			 */                                                                                                               // 6683
			for ( i=0, iLen=oSettings.aaSorting.length ; i<iLen ; i++ )                                                       // 6684
			{                                                                                                                 // 6685
				if ( oSettings.aaSorting[i][0] >= oSettings.aoColumns.length )                                                   // 6686
				{                                                                                                                // 6687
					oSettings.aaSorting[i][0] = 0;                                                                                  // 6688
				}                                                                                                                // 6689
				var oColumn = oSettings.aoColumns[ oSettings.aaSorting[i][0] ];                                                  // 6690
				                                                                                                                 // 6691
				/* Add a default sorting index */                                                                                // 6692
				if ( oSettings.aaSorting[i][2] === undefined )                                                                   // 6693
				{                                                                                                                // 6694
					oSettings.aaSorting[i][2] = 0;                                                                                  // 6695
				}                                                                                                                // 6696
				                                                                                                                 // 6697
				/* If aaSorting is not defined, then we use the first indicator in asSorting */                                  // 6698
				if ( oInit.aaSorting === undefined && oSettings.saved_aaSorting === undefined )                                  // 6699
				{                                                                                                                // 6700
					oSettings.aaSorting[i][1] = oColumn.asSorting[0];                                                               // 6701
				}                                                                                                                // 6702
				                                                                                                                 // 6703
				/* Set the current sorting index based on aoColumns.asSorting */                                                 // 6704
				for ( j=0, jLen=oColumn.asSorting.length ; j<jLen ; j++ )                                                        // 6705
				{                                                                                                                // 6706
					if ( oSettings.aaSorting[i][1] == oColumn.asSorting[j] )                                                        // 6707
					{                                                                                                               // 6708
						oSettings.aaSorting[i][2] = j;                                                                                 // 6709
						break;                                                                                                         // 6710
					}                                                                                                               // 6711
				}                                                                                                                // 6712
			}                                                                                                                 // 6713
				                                                                                                                 // 6714
			/* Do a first pass on the sorting classes (allows any size changes to be taken into                               // 6715
			 * account, and also will apply sorting disabled classes if disabled                                              // 6716
			 */                                                                                                               // 6717
			_fnSortingClasses( oSettings );                                                                                   // 6718
			                                                                                                                  // 6719
			                                                                                                                  // 6720
			/*                                                                                                                // 6721
			 * Final init                                                                                                     // 6722
			 * Cache the header, body and footer as required, creating them if needed                                         // 6723
			 */                                                                                                               // 6724
			                                                                                                                  // 6725
			/* Browser support detection */                                                                                   // 6726
			_fnBrowserDetect( oSettings );                                                                                    // 6727
			                                                                                                                  // 6728
			// Work around for Webkit bug 83867 - store the caption-side before removing from doc                             // 6729
			var captions = $(this).children('caption').each( function () {                                                    // 6730
				this._captionSide = $(this).css('caption-side');                                                                 // 6731
			} );                                                                                                              // 6732
			                                                                                                                  // 6733
			var thead = $(this).children('thead');                                                                            // 6734
			if ( thead.length === 0 )                                                                                         // 6735
			{                                                                                                                 // 6736
				thead = [ document.createElement( 'thead' ) ];                                                                   // 6737
				this.appendChild( thead[0] );                                                                                    // 6738
			}                                                                                                                 // 6739
			oSettings.nTHead = thead[0];                                                                                      // 6740
			                                                                                                                  // 6741
			var tbody = $(this).children('tbody');                                                                            // 6742
			if ( tbody.length === 0 )                                                                                         // 6743
			{                                                                                                                 // 6744
				tbody = [ document.createElement( 'tbody' ) ];                                                                   // 6745
				this.appendChild( tbody[0] );                                                                                    // 6746
			}                                                                                                                 // 6747
			oSettings.nTBody = tbody[0];                                                                                      // 6748
			oSettings.nTBody.setAttribute( "role", "alert" );                                                                 // 6749
			oSettings.nTBody.setAttribute( "aria-live", "polite" );                                                           // 6750
			oSettings.nTBody.setAttribute( "aria-relevant", "all" );                                                          // 6751
			                                                                                                                  // 6752
			var tfoot = $(this).children('tfoot');                                                                            // 6753
			if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") )  // 6754
			{                                                                                                                 // 6755
				// If we are a scrolling table, and no footer has been given, then we need to create                             // 6756
				// a tfoot element for the caption element to be appended to                                                     // 6757
				tfoot = [ document.createElement( 'tfoot' ) ];                                                                   // 6758
				this.appendChild( tfoot[0] );                                                                                    // 6759
			}                                                                                                                 // 6760
			                                                                                                                  // 6761
			if ( tfoot.length > 0 )                                                                                           // 6762
			{                                                                                                                 // 6763
				oSettings.nTFoot = tfoot[0];                                                                                     // 6764
				_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );                                                         // 6765
			}                                                                                                                 // 6766
			                                                                                                                  // 6767
			/* Check if there is data passing into the constructor */                                                         // 6768
			if ( bUsePassedData )                                                                                             // 6769
			{                                                                                                                 // 6770
				for ( i=0 ; i<oInit.aaData.length ; i++ )                                                                        // 6771
				{                                                                                                                // 6772
					_fnAddData( oSettings, oInit.aaData[ i ] );                                                                     // 6773
				}                                                                                                                // 6774
			}                                                                                                                 // 6775
			else                                                                                                              // 6776
			{                                                                                                                 // 6777
				/* Grab the data from the page */                                                                                // 6778
				_fnGatherData( oSettings );                                                                                      // 6779
			}                                                                                                                 // 6780
			                                                                                                                  // 6781
			/* Copy the data index array */                                                                                   // 6782
			oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();                                                          // 6783
			                                                                                                                  // 6784
			/* Initialisation complete - table can be drawn */                                                                // 6785
			oSettings.bInitialised = true;                                                                                    // 6786
			                                                                                                                  // 6787
			/* Check if we need to initialise the table (it might not have been handed off to the                             // 6788
			 * language processor)                                                                                            // 6789
			 */                                                                                                               // 6790
			if ( bInitHandedOff === false )                                                                                   // 6791
			{                                                                                                                 // 6792
				_fnInitialise( oSettings );                                                                                      // 6793
			}                                                                                                                 // 6794
		} );                                                                                                               // 6795
		_that = null;                                                                                                      // 6796
		return this;                                                                                                       // 6797
	};                                                                                                                  // 6798
                                                                                                                     // 6799
	                                                                                                                    // 6800
	                                                                                                                    // 6801
	/**                                                                                                                 // 6802
	 * Provide a common method for plug-ins to check the version of DataTables being used, in order                     // 6803
	 * to ensure compatibility.                                                                                         // 6804
	 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the                      // 6805
	 *    formats "X" and "X.Y" are also acceptable.                                                                    // 6806
	 *  @returns {boolean} true if this version of DataTables is greater or equal to the required                       // 6807
	 *    version, or false if this version of DataTales is not suitable                                                // 6808
	 *  @static                                                                                                         // 6809
	 *  @dtopt API-Static                                                                                               // 6810
	 *                                                                                                                  // 6811
	 *  @example                                                                                                        // 6812
	 *    alert( $.fn.dataTable.fnVersionCheck( '1.9.0' ) );                                                            // 6813
	 */                                                                                                                 // 6814
	DataTable.fnVersionCheck = function( sVersion )                                                                     // 6815
	{                                                                                                                   // 6816
		/* This is cheap, but effective */                                                                                 // 6817
		var fnZPad = function (Zpad, count)                                                                                // 6818
		{                                                                                                                  // 6819
			while(Zpad.length < count) {                                                                                      // 6820
				Zpad += '0';                                                                                                     // 6821
			}                                                                                                                 // 6822
			return Zpad;                                                                                                      // 6823
		};                                                                                                                 // 6824
		var aThis = DataTable.ext.sVersion.split('.');                                                                     // 6825
		var aThat = sVersion.split('.');                                                                                   // 6826
		var sThis = '', sThat = '';                                                                                        // 6827
		                                                                                                                   // 6828
		for ( var i=0, iLen=aThat.length ; i<iLen ; i++ )                                                                  // 6829
		{                                                                                                                  // 6830
			sThis += fnZPad( aThis[i], 3 );                                                                                   // 6831
			sThat += fnZPad( aThat[i], 3 );                                                                                   // 6832
		}                                                                                                                  // 6833
		                                                                                                                   // 6834
		return parseInt(sThis, 10) >= parseInt(sThat, 10);                                                                 // 6835
	};                                                                                                                  // 6836
	                                                                                                                    // 6837
	                                                                                                                    // 6838
	/**                                                                                                                 // 6839
	 * Check if a TABLE node is a DataTable table already or not.                                                       // 6840
	 *  @param {node} nTable The TABLE node to check if it is a DataTable or not (note that other                       // 6841
	 *    node types can be passed in, but will always return false).                                                   // 6842
	 *  @returns {boolean} true the table given is a DataTable, or false otherwise                                      // 6843
	 *  @static                                                                                                         // 6844
	 *  @dtopt API-Static                                                                                               // 6845
	 *                                                                                                                  // 6846
	 *  @example                                                                                                        // 6847
	 *    var ex = document.getElementById('example');                                                                  // 6848
	 *    if ( ! $.fn.DataTable.fnIsDataTable( ex ) ) {                                                                 // 6849
	 *      $(ex).dataTable();                                                                                          // 6850
	 *    }                                                                                                             // 6851
	 */                                                                                                                 // 6852
	DataTable.fnIsDataTable = function ( nTable )                                                                       // 6853
	{                                                                                                                   // 6854
		var o = DataTable.settings;                                                                                        // 6855
	                                                                                                                    // 6856
		for ( var i=0 ; i<o.length ; i++ )                                                                                 // 6857
		{                                                                                                                  // 6858
			if ( o[i].nTable === nTable || o[i].nScrollHead === nTable || o[i].nScrollFoot === nTable )                       // 6859
			{                                                                                                                 // 6860
				return true;                                                                                                     // 6861
			}                                                                                                                 // 6862
		}                                                                                                                  // 6863
	                                                                                                                    // 6864
		return false;                                                                                                      // 6865
	};                                                                                                                  // 6866
	                                                                                                                    // 6867
	                                                                                                                    // 6868
	/**                                                                                                                 // 6869
	 * Get all DataTable tables that have been initialised - optionally you can select to                               // 6870
	 * get only currently visible tables.                                                                               // 6871
	 *  @param {boolean} [bVisible=false] Flag to indicate if you want all (default) or                                 // 6872
	 *    visible tables only.                                                                                          // 6873
	 *  @returns {array} Array of TABLE nodes (not DataTable instances) which are DataTables                            // 6874
	 *  @static                                                                                                         // 6875
	 *  @dtopt API-Static                                                                                               // 6876
	 *                                                                                                                  // 6877
	 *  @example                                                                                                        // 6878
	 *    var table = $.fn.dataTable.fnTables(true);                                                                    // 6879
	 *    if ( table.length > 0 ) {                                                                                     // 6880
	 *      $(table).dataTable().fnAdjustColumnSizing();                                                                // 6881
	 *    }                                                                                                             // 6882
	 */                                                                                                                 // 6883
	DataTable.fnTables = function ( bVisible )                                                                          // 6884
	{                                                                                                                   // 6885
		var out = [];                                                                                                      // 6886
	                                                                                                                    // 6887
		jQuery.each( DataTable.settings, function (i, o) {                                                                 // 6888
			if ( !bVisible || (bVisible === true && $(o.nTable).is(':visible')) )                                             // 6889
			{                                                                                                                 // 6890
				out.push( o.nTable );                                                                                            // 6891
			}                                                                                                                 // 6892
		} );                                                                                                               // 6893
	                                                                                                                    // 6894
		return out;                                                                                                        // 6895
	};                                                                                                                  // 6896
	                                                                                                                    // 6897
                                                                                                                     // 6898
	/**                                                                                                                 // 6899
	 * Version string for plug-ins to check compatibility. Allowed format is                                            // 6900
	 * a.b.c.d.e where: a:int, b:int, c:int, d:string(dev|beta), e:int. d and                                           // 6901
	 * e are optional                                                                                                   // 6902
	 *  @member                                                                                                         // 6903
	 *  @type string                                                                                                    // 6904
	 *  @default Version number                                                                                         // 6905
	 */                                                                                                                 // 6906
	DataTable.version = "1.9.4";                                                                                        // 6907
                                                                                                                     // 6908
	/**                                                                                                                 // 6909
	 * Private data store, containing all of the settings objects that are created for the                              // 6910
	 * tables on a given page.                                                                                          // 6911
	 *                                                                                                                  // 6912
	 * Note that the <i>DataTable.settings</i> object is aliased to <i>jQuery.fn.dataTableExt</i>                       // 6913
	 * through which it may be accessed and manipulated, or <i>jQuery.fn.dataTable.settings</i>.                        // 6914
	 *  @member                                                                                                         // 6915
	 *  @type array                                                                                                     // 6916
	 *  @default []                                                                                                     // 6917
	 *  @private                                                                                                        // 6918
	 */                                                                                                                 // 6919
	DataTable.settings = [];                                                                                            // 6920
                                                                                                                     // 6921
	/**                                                                                                                 // 6922
	 * Object models container, for the various models that DataTables has available                                    // 6923
	 * to it. These models define the objects that are used to hold the active state                                    // 6924
	 * and configuration of the table.                                                                                  // 6925
	 *  @namespace                                                                                                      // 6926
	 */                                                                                                                 // 6927
	DataTable.models = {};                                                                                              // 6928
	                                                                                                                    // 6929
	                                                                                                                    // 6930
	/**                                                                                                                 // 6931
	 * DataTables extension options and plug-ins. This namespace acts as a collection "area"                            // 6932
	 * for plug-ins that can be used to extend the default DataTables behaviour - indeed many                           // 6933
	 * of the build in methods use this method to provide their own capabilities (sorting methods                       // 6934
	 * for example).                                                                                                    // 6935
	 *                                                                                                                  // 6936
	 * Note that this namespace is aliased to jQuery.fn.dataTableExt so it can be readily accessed                      // 6937
	 * and modified by plug-ins.                                                                                        // 6938
	 *  @namespace                                                                                                      // 6939
	 */                                                                                                                 // 6940
	DataTable.models.ext = {                                                                                            // 6941
		/**                                                                                                                // 6942
		 * Plug-in filtering functions - this method of filtering is complimentary to the default                          // 6943
		 * type based filtering, and a lot more comprehensive as it allows you complete control                            // 6944
		 * over the filtering logic. Each element in this array is a function (parameters                                  // 6945
		 * described below) that is called for every row in the table, and your logic decides if                           // 6946
		 * it should be included in the filtered data set or not.                                                          // 6947
		 *   <ul>                                                                                                          // 6948
		 *     <li>                                                                                                        // 6949
		 *       Function input parameters:                                                                                // 6950
		 *       <ul>                                                                                                      // 6951
		 *         <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>                   // 6952
		 *         <li>{array|object} Data for the row to be processed (same as the original format                        // 6953
		 *           that was passed in as the data source, or an array from a DOM data source</li>                        // 6954
		 *         <li>{int} Row index in aoData ({@link DataTable.models.oSettings.aoData}), which can                    // 6955
		 *           be useful to retrieve the TR element if you need DOM interaction.</li>                                // 6956
		 *       </ul>                                                                                                     // 6957
		 *     </li>                                                                                                       // 6958
		 *     <li>                                                                                                        // 6959
		 *       Function return:                                                                                          // 6960
		 *       <ul>                                                                                                      // 6961
		 *         <li>{boolean} Include the row in the filtered result set (true) or not (false)</li>                     // 6962
		 *       </ul>                                                                                                     // 6963
		 *     </il>                                                                                                       // 6964
		 *   </ul>                                                                                                         // 6965
		 *  @type array                                                                                                    // 6966
		 *  @default []                                                                                                    // 6967
		 *                                                                                                                 // 6968
		 *  @example                                                                                                       // 6969
		 *    // The following example shows custom filtering being applied to the fourth column (i.e.                     // 6970
		 *    // the aData[3] index) based on two input values from the end-user, matching the data in                     // 6971
		 *    // a certain range.                                                                                          // 6972
		 *    $.fn.dataTableExt.afnFiltering.push(                                                                         // 6973
		 *      function( oSettings, aData, iDataIndex ) {                                                                 // 6974
		 *        var iMin = document.getElementById('min').value * 1;                                                     // 6975
		 *        var iMax = document.getElementById('max').value * 1;                                                     // 6976
		 *        var iVersion = aData[3] == "-" ? 0 : aData[3]*1;                                                         // 6977
		 *        if ( iMin == "" && iMax == "" ) {                                                                        // 6978
		 *          return true;                                                                                           // 6979
		 *        }                                                                                                        // 6980
		 *        else if ( iMin == "" && iVersion < iMax ) {                                                              // 6981
		 *          return true;                                                                                           // 6982
		 *        }                                                                                                        // 6983
		 *        else if ( iMin < iVersion && "" == iMax ) {                                                              // 6984
		 *          return true;                                                                                           // 6985
		 *        }                                                                                                        // 6986
		 *        else if ( iMin < iVersion && iVersion < iMax ) {                                                         // 6987
		 *          return true;                                                                                           // 6988
		 *        }                                                                                                        // 6989
		 *        return false;                                                                                            // 6990
		 *      }                                                                                                          // 6991
		 *    );                                                                                                           // 6992
		 */                                                                                                                // 6993
		"afnFiltering": [],                                                                                                // 6994
	                                                                                                                    // 6995
	                                                                                                                    // 6996
		/**                                                                                                                // 6997
		 * Plug-in sorting functions - this method of sorting is complimentary to the default type                         // 6998
		 * based sorting that DataTables does automatically, allowing much greater control over the                        // 6999
		 * the data that is being used to sort a column. This is useful if you want to do sorting                          // 7000
		 * based on live data (for example the contents of an 'input' element) rather than just the                        // 7001
		 * static string that DataTables knows of. The way these plug-ins work is that you create                          // 7002
		 * an array of the values you wish to be sorted for the column in question and then return                         // 7003
		 * that array. Which pre-sorting function is run here depends on the sSortDataType parameter                       // 7004
		 * that is used for the column (if any). This is the corollary of <i>ofnSearch</i> for sort                        // 7005
		 * data.                                                                                                           // 7006
		 *   <ul>                                                                                                          // 7007
	     *     <li>                                                                                                     // 7008
	     *       Function input parameters:                                                                             // 7009
	     *       <ul>                                                                                                   // 7010
		 *         <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>                   // 7011
	     *         <li>{int} Target column index</li>                                                                   // 7012
	     *       </ul>                                                                                                  // 7013
	     *     </li>                                                                                                    // 7014
		 *     <li>                                                                                                        // 7015
		 *       Function return:                                                                                          // 7016
		 *       <ul>                                                                                                      // 7017
		 *         <li>{array} Data for the column to be sorted upon</li>                                                  // 7018
		 *       </ul>                                                                                                     // 7019
		 *     </il>                                                                                                       // 7020
		 *   </ul>                                                                                                         // 7021
		 *                                                                                                                 // 7022
		 * Note that as of v1.9, it is typically preferable to use <i>mData</i> to prepare data for                        // 7023
		 * the different uses that DataTables can put the data to. Specifically <i>mData</i> when                          // 7024
		 * used as a function will give you a 'type' (sorting, filtering etc) that you can use to                          // 7025
		 * prepare the data as required for the different types. As such, this method is deprecated.                       // 7026
		 *  @type array                                                                                                    // 7027
		 *  @default []                                                                                                    // 7028
		 *  @deprecated                                                                                                    // 7029
		 *                                                                                                                 // 7030
		 *  @example                                                                                                       // 7031
		 *    // Updating the cached sorting information with user entered values in HTML input elements                   // 7032
		 *    jQuery.fn.dataTableExt.afnSortData['dom-text'] = function ( oSettings, iColumn )                             // 7033
		 *    {                                                                                                            // 7034
		 *      var aData = [];                                                                                            // 7035
		 *      $( 'td:eq('+iColumn+') input', oSettings.oApi._fnGetTrNodes(oSettings) ).each( function () {               // 7036
		 *        aData.push( this.value );                                                                                // 7037
		 *      } );                                                                                                       // 7038
		 *      return aData;                                                                                              // 7039
		 *    }                                                                                                            // 7040
		 */                                                                                                                // 7041
		"afnSortData": [],                                                                                                 // 7042
	                                                                                                                    // 7043
	                                                                                                                    // 7044
		/**                                                                                                                // 7045
		 * Feature plug-ins - This is an array of objects which describe the feature plug-ins that are                     // 7046
		 * available to DataTables. These feature plug-ins are accessible through the sDom initialisation                  // 7047
		 * option. As such, each feature plug-in must describe a function that is used to initialise                       // 7048
		 * itself (fnInit), a character so the feature can be enabled by sDom (cFeature) and the name                      // 7049
		 * of the feature (sFeature). Thus the objects attached to this method must provide:                               // 7050
		 *   <ul>                                                                                                          // 7051
		 *     <li>{function} fnInit Initialisation of the plug-in                                                         // 7052
		 *       <ul>                                                                                                      // 7053
	     *         <li>                                                                                                 // 7054
	     *           Function input parameters:                                                                         // 7055
	     *           <ul>                                                                                               // 7056
		 *             <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>               // 7057
	     *           </ul>                                                                                              // 7058
	     *         </li>                                                                                                // 7059
		 *         <li>                                                                                                    // 7060
		 *           Function return:                                                                                      // 7061
		 *           <ul>                                                                                                  // 7062
		 *             <li>{node|null} The element which contains your feature. Note that the return                       // 7063
		 *                may also be void if your plug-in does not require to inject any DOM elements                     // 7064
		 *                into DataTables control (sDom) - for example this might be useful when                           // 7065
		 *                developing a plug-in which allows table control via keyboard entry.</li>                         // 7066
		 *           </ul>                                                                                                 // 7067
		 *         </il>                                                                                                   // 7068
		 *       </ul>                                                                                                     // 7069
		 *     </li>                                                                                                       // 7070
		 *     <li>{character} cFeature Character that will be matched in sDom - case sensitive</li>                       // 7071
		 *     <li>{string} sFeature Feature name</li>                                                                     // 7072
		 *   </ul>                                                                                                         // 7073
		 *  @type array                                                                                                    // 7074
		 *  @default []                                                                                                    // 7075
		 *                                                                                                                 // 7076
		 *  @example                                                                                                       // 7077
		 *    // How TableTools initialises itself.                                                                        // 7078
		 *    $.fn.dataTableExt.aoFeatures.push( {                                                                         // 7079
		 *      "fnInit": function( oSettings ) {                                                                          // 7080
		 *        return new TableTools( { "oDTSettings": oSettings } );                                                   // 7081
		 *      },                                                                                                         // 7082
		 *      "cFeature": "T",                                                                                           // 7083
		 *      "sFeature": "TableTools"                                                                                   // 7084
		 *    } );                                                                                                         // 7085
		 */                                                                                                                // 7086
		"aoFeatures": [],                                                                                                  // 7087
	                                                                                                                    // 7088
	                                                                                                                    // 7089
		/**                                                                                                                // 7090
		 * Type detection plug-in functions - DataTables utilises types to define how sorting and                          // 7091
		 * filtering behave, and types can be either  be defined by the developer (sType for the                           // 7092
		 * column) or they can be automatically detected by the methods in this array. The functions                       // 7093
		 * defined in the array are quite simple, taking a single parameter (the data to analyse)                          // 7094
		 * and returning the type if it is a known type, or null otherwise.                                                // 7095
		 *   <ul>                                                                                                          // 7096
	     *     <li>                                                                                                     // 7097
	     *       Function input parameters:                                                                             // 7098
	     *       <ul>                                                                                                   // 7099
		 *         <li>{*} Data from the column cell to be analysed</li>                                                   // 7100
	     *       </ul>                                                                                                  // 7101
	     *     </li>                                                                                                    // 7102
		 *     <li>                                                                                                        // 7103
		 *       Function return:                                                                                          // 7104
		 *       <ul>                                                                                                      // 7105
		 *         <li>{string|null} Data type detected, or null if unknown (and thus pass it                              // 7106
		 *           on to the other type detection functions.</li>                                                        // 7107
		 *       </ul>                                                                                                     // 7108
		 *     </il>                                                                                                       // 7109
		 *   </ul>                                                                                                         // 7110
		 *  @type array                                                                                                    // 7111
		 *  @default []                                                                                                    // 7112
		 *                                                                                                                 // 7113
		 *  @example                                                                                                       // 7114
		 *    // Currency type detection plug-in:                                                                          // 7115
		 *    jQuery.fn.dataTableExt.aTypes.push(                                                                          // 7116
		 *      function ( sData ) {                                                                                       // 7117
		 *        var sValidChars = "0123456789.-";                                                                        // 7118
		 *        var Char;                                                                                                // 7119
		 *                                                                                                                 // 7120
		 *        // Check the numeric part                                                                                // 7121
		 *        for ( i=1 ; i<sData.length ; i++ ) {                                                                     // 7122
		 *          Char = sData.charAt(i);                                                                                // 7123
		 *          if (sValidChars.indexOf(Char) == -1) {                                                                 // 7124
		 *            return null;                                                                                         // 7125
		 *          }                                                                                                      // 7126
		 *        }                                                                                                        // 7127
		 *                                                                                                                 // 7128
		 *        // Check prefixed by currency                                                                            // 7129
		 *        if ( sData.charAt(0) == '$' || sData.charAt(0) == '&pound;' ) {                                          // 7130
		 *          return 'currency';                                                                                     // 7131
		 *        }                                                                                                        // 7132
		 *        return null;                                                                                             // 7133
		 *      }                                                                                                          // 7134
		 *    );                                                                                                           // 7135
		 */                                                                                                                // 7136
		"aTypes": [],                                                                                                      // 7137
	                                                                                                                    // 7138
	                                                                                                                    // 7139
		/**                                                                                                                // 7140
		 * Provide a common method for plug-ins to check the version of DataTables being used,                             // 7141
		 * in order to ensure compatibility.                                                                               // 7142
		 *  @type function                                                                                                 // 7143
		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note                              // 7144
		 *    that the formats "X" and "X.Y" are also acceptable.                                                          // 7145
		 *  @returns {boolean} true if this version of DataTables is greater or equal to the                               // 7146
		 *    required version, or false if this version of DataTales is not suitable                                      // 7147
		 *                                                                                                                 // 7148
		 *  @example                                                                                                       // 7149
		 *    $(document).ready(function() {                                                                               // 7150
		 *      var oTable = $('#example').dataTable();                                                                    // 7151
		 *      alert( oTable.fnVersionCheck( '1.9.0' ) );                                                                 // 7152
		 *    } );                                                                                                         // 7153
		 */                                                                                                                // 7154
		"fnVersionCheck": DataTable.fnVersionCheck,                                                                        // 7155
	                                                                                                                    // 7156
	                                                                                                                    // 7157
		/**                                                                                                                // 7158
		 * Index for what 'this' index API functions should use                                                            // 7159
		 *  @type int                                                                                                      // 7160
		 *  @default 0                                                                                                     // 7161
		 */                                                                                                                // 7162
		"iApiIndex": 0,                                                                                                    // 7163
	                                                                                                                    // 7164
	                                                                                                                    // 7165
		/**                                                                                                                // 7166
		 * Pre-processing of filtering data plug-ins - When you assign the sType for a column                              // 7167
		 * (or have it automatically detected for you by DataTables or a type detection plug-in),                          // 7168
		 * you will typically be using this for custom sorting, but it can also be used to provide                         // 7169
		 * custom filtering by allowing you to pre-processing the data and returning the data in                           // 7170
		 * the format that should be filtered upon. This is done by adding functions this object                           // 7171
		 * with a parameter name which matches the sType for that target column. This is the                               // 7172
		 * corollary of <i>afnSortData</i> for filtering data.                                                             // 7173
		 *   <ul>                                                                                                          // 7174
	     *     <li>                                                                                                     // 7175
	     *       Function input parameters:                                                                             // 7176
	     *       <ul>                                                                                                   // 7177
		 *         <li>{*} Data from the column cell to be prepared for filtering</li>                                     // 7178
	     *       </ul>                                                                                                  // 7179
	     *     </li>                                                                                                    // 7180
		 *     <li>                                                                                                        // 7181
		 *       Function return:                                                                                          // 7182
		 *       <ul>                                                                                                      // 7183
		 *         <li>{string|null} Formatted string that will be used for the filtering.</li>                            // 7184
		 *       </ul>                                                                                                     // 7185
		 *     </il>                                                                                                       // 7186
		 *   </ul>                                                                                                         // 7187
		 *                                                                                                                 // 7188
		 * Note that as of v1.9, it is typically preferable to use <i>mData</i> to prepare data for                        // 7189
		 * the different uses that DataTables can put the data to. Specifically <i>mData</i> when                          // 7190
		 * used as a function will give you a 'type' (sorting, filtering etc) that you can use to                          // 7191
		 * prepare the data as required for the different types. As such, this method is deprecated.                       // 7192
		 *  @type object                                                                                                   // 7193
		 *  @default {}                                                                                                    // 7194
		 *  @deprecated                                                                                                    // 7195
		 *                                                                                                                 // 7196
		 *  @example                                                                                                       // 7197
		 *    $.fn.dataTableExt.ofnSearch['title-numeric'] = function ( sData ) {                                          // 7198
		 *      return sData.replace(/\n/g," ").replace( /<.*?>/g, "" );                                                   // 7199
		 *    }                                                                                                            // 7200
		 */                                                                                                                // 7201
		"ofnSearch": {},                                                                                                   // 7202
	                                                                                                                    // 7203
	                                                                                                                    // 7204
		/**                                                                                                                // 7205
		 * Container for all private functions in DataTables so they can be exposed externally                             // 7206
		 *  @type object                                                                                                   // 7207
		 *  @default {}                                                                                                    // 7208
		 */                                                                                                                // 7209
		"oApi": {},                                                                                                        // 7210
	                                                                                                                    // 7211
	                                                                                                                    // 7212
		/**                                                                                                                // 7213
		 * Storage for the various classes that DataTables uses                                                            // 7214
		 *  @type object                                                                                                   // 7215
		 *  @default {}                                                                                                    // 7216
		 */                                                                                                                // 7217
		"oStdClasses": {},                                                                                                 // 7218
		                                                                                                                   // 7219
	                                                                                                                    // 7220
		/**                                                                                                                // 7221
		 * Storage for the various classes that DataTables uses - jQuery UI suitable                                       // 7222
		 *  @type object                                                                                                   // 7223
		 *  @default {}                                                                                                    // 7224
		 */                                                                                                                // 7225
		"oJUIClasses": {},                                                                                                 // 7226
	                                                                                                                    // 7227
	                                                                                                                    // 7228
		/**                                                                                                                // 7229
		 * Pagination plug-in methods - The style and controls of the pagination can significantly                         // 7230
		 * impact on how the end user interacts with the data in your table, and DataTables allows                         // 7231
		 * the addition of pagination controls by extending this object, which can then be enabled                         // 7232
		 * through the <i>sPaginationType</i> initialisation parameter. Each pagination type that                          // 7233
		 * is added is an object (the property name of which is what <i>sPaginationType</i> refers                         // 7234
		 * to) that has two properties, both methods that are used by DataTables to update the                             // 7235
		 * control's state.                                                                                                // 7236
		 *   <ul>                                                                                                          // 7237
		 *     <li>                                                                                                        // 7238
		 *       fnInit -  Initialisation of the paging controls. Called only during initialisation                        // 7239
		 *         of the table. It is expected that this function will add the required DOM elements                      // 7240
		 *         to the page for the paging controls to work. The element pointer                                        // 7241
		 *         'oSettings.aanFeatures.p' array is provided by DataTables to contain the paging                         // 7242
		 *         controls (note that this is a 2D array to allow for multiple instances of each                          // 7243
		 *         DataTables DOM element). It is suggested that you add the controls to this element                      // 7244
		 *         as children                                                                                             // 7245
		 *       <ul>                                                                                                      // 7246
	     *         <li>                                                                                                 // 7247
	     *           Function input parameters:                                                                         // 7248
	     *           <ul>                                                                                               // 7249
		 *             <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>               // 7250
		 *             <li>{node} Container into which the pagination controls must be inserted</li>                       // 7251
		 *             <li>{function} Draw callback function - whenever the controls cause a page                          // 7252
		 *               change, this method must be called to redraw the table.</li>                                      // 7253
	     *           </ul>                                                                                              // 7254
	     *         </li>                                                                                                // 7255
		 *         <li>                                                                                                    // 7256
		 *           Function return:                                                                                      // 7257
		 *           <ul>                                                                                                  // 7258
		 *             <li>No return required</li>                                                                         // 7259
		 *           </ul>                                                                                                 // 7260
		 *         </il>                                                                                                   // 7261
		 *       </ul>                                                                                                     // 7262
		 *     </il>                                                                                                       // 7263
		 *     <li>                                                                                                        // 7264
		 *       fnInit -  This function is called whenever the paging status of the table changes and is                  // 7265
		 *         typically used to update classes and/or text of the paging controls to reflex the new                   // 7266
		 *         status.                                                                                                 // 7267
		 *       <ul>                                                                                                      // 7268
	     *         <li>                                                                                                 // 7269
	     *           Function input parameters:                                                                         // 7270
	     *           <ul>                                                                                               // 7271
		 *             <li>{object} DataTables settings object: see {@link DataTable.models.oSettings}.</li>               // 7272
		 *             <li>{function} Draw callback function - in case you need to redraw the table again                  // 7273
		 *               or attach new event listeners</li>                                                                // 7274
	     *           </ul>                                                                                              // 7275
	     *         </li>                                                                                                // 7276
		 *         <li>                                                                                                    // 7277
		 *           Function return:                                                                                      // 7278
		 *           <ul>                                                                                                  // 7279
		 *             <li>No return required</li>                                                                         // 7280
		 *           </ul>                                                                                                 // 7281
		 *         </il>                                                                                                   // 7282
		 *       </ul>                                                                                                     // 7283
		 *     </il>                                                                                                       // 7284
		 *   </ul>                                                                                                         // 7285
		 *  @type object                                                                                                   // 7286
		 *  @default {}                                                                                                    // 7287
		 *                                                                                                                 // 7288
		 *  @example                                                                                                       // 7289
		 *    $.fn.dataTableExt.oPagination.four_button = {                                                                // 7290
		 *      "fnInit": function ( oSettings, nPaging, fnCallbackDraw ) {                                                // 7291
		 *        nFirst = document.createElement( 'span' );                                                               // 7292
		 *        nPrevious = document.createElement( 'span' );                                                            // 7293
		 *        nNext = document.createElement( 'span' );                                                                // 7294
		 *        nLast = document.createElement( 'span' );                                                                // 7295
		 *                                                                                                                 // 7296
		 *        nFirst.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sFirst ) );                   // 7297
		 *        nPrevious.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sPrevious ) );             // 7298
		 *        nNext.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sNext ) );                     // 7299
		 *        nLast.appendChild( document.createTextNode( oSettings.oLanguage.oPaginate.sLast ) );                     // 7300
		 *                                                                                                                 // 7301
		 *        nFirst.className = "paginate_button first";                                                              // 7302
		 *        nPrevious.className = "paginate_button previous";                                                        // 7303
		 *        nNext.className="paginate_button next";                                                                  // 7304
		 *        nLast.className = "paginate_button last";                                                                // 7305
		 *                                                                                                                 // 7306
		 *        nPaging.appendChild( nFirst );                                                                           // 7307
		 *        nPaging.appendChild( nPrevious );                                                                        // 7308
		 *        nPaging.appendChild( nNext );                                                                            // 7309
		 *        nPaging.appendChild( nLast );                                                                            // 7310
		 *                                                                                                                 // 7311
		 *        $(nFirst).click( function () {                                                                           // 7312
		 *          oSettings.oApi._fnPageChange( oSettings, "first" );                                                    // 7313
		 *          fnCallbackDraw( oSettings );                                                                           // 7314
		 *        } );                                                                                                     // 7315
		 *                                                                                                                 // 7316
		 *        $(nPrevious).click( function() {                                                                         // 7317
		 *          oSettings.oApi._fnPageChange( oSettings, "previous" );                                                 // 7318
		 *          fnCallbackDraw( oSettings );                                                                           // 7319
		 *        } );                                                                                                     // 7320
		 *                                                                                                                 // 7321
		 *        $(nNext).click( function() {                                                                             // 7322
		 *          oSettings.oApi._fnPageChange( oSettings, "next" );                                                     // 7323
		 *          fnCallbackDraw( oSettings );                                                                           // 7324
		 *        } );                                                                                                     // 7325
		 *                                                                                                                 // 7326
		 *        $(nLast).click( function() {                                                                             // 7327
		 *          oSettings.oApi._fnPageChange( oSettings, "last" );                                                     // 7328
		 *          fnCallbackDraw( oSettings );                                                                           // 7329
		 *        } );                                                                                                     // 7330
		 *                                                                                                                 // 7331
		 *        $(nFirst).bind( 'selectstart', function () { return false; } );                                          // 7332
		 *        $(nPrevious).bind( 'selectstart', function () { return false; } );                                       // 7333
		 *        $(nNext).bind( 'selectstart', function () { return false; } );                                           // 7334
		 *        $(nLast).bind( 'selectstart', function () { return false; } );                                           // 7335
		 *      },                                                                                                         // 7336
		 *                                                                                                                 // 7337
		 *      "fnUpdate": function ( oSettings, fnCallbackDraw ) {                                                       // 7338
		 *        if ( !oSettings.aanFeatures.p ) {                                                                        // 7339
		 *          return;                                                                                                // 7340
		 *        }                                                                                                        // 7341
		 *                                                                                                                 // 7342
		 *        // Loop over each instance of the pager                                                                  // 7343
		 *        var an = oSettings.aanFeatures.p;                                                                        // 7344
		 *        for ( var i=0, iLen=an.length ; i<iLen ; i++ ) {                                                         // 7345
		 *          var buttons = an[i].getElementsByTagName('span');                                                      // 7346
		 *          if ( oSettings._iDisplayStart === 0 ) {                                                                // 7347
		 *            buttons[0].className = "paginate_disabled_previous";                                                 // 7348
		 *            buttons[1].className = "paginate_disabled_previous";                                                 // 7349
		 *          }                                                                                                      // 7350
		 *          else {                                                                                                 // 7351
		 *            buttons[0].className = "paginate_enabled_previous";                                                  // 7352
		 *            buttons[1].className = "paginate_enabled_previous";                                                  // 7353
		 *          }                                                                                                      // 7354
		 *                                                                                                                 // 7355
		 *          if ( oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay() ) {                                      // 7356
		 *            buttons[2].className = "paginate_disabled_next";                                                     // 7357
		 *            buttons[3].className = "paginate_disabled_next";                                                     // 7358
		 *          }                                                                                                      // 7359
		 *          else {                                                                                                 // 7360
		 *            buttons[2].className = "paginate_enabled_next";                                                      // 7361
		 *            buttons[3].className = "paginate_enabled_next";                                                      // 7362
		 *          }                                                                                                      // 7363
		 *        }                                                                                                        // 7364
		 *      }                                                                                                          // 7365
		 *    };                                                                                                           // 7366
		 */                                                                                                                // 7367
		"oPagination": {},                                                                                                 // 7368
	                                                                                                                    // 7369
	                                                                                                                    // 7370
		/**                                                                                                                // 7371
		 * Sorting plug-in methods - Sorting in DataTables is based on the detected type of the                            // 7372
		 * data column (you can add your own type detection functions, or override automatic                               // 7373
		 * detection using sType). With this specific type given to the column, DataTables will                            // 7374
		 * apply the required sort from the functions in the object. Each sort type must provide                           // 7375
		 * two mandatory methods, one each for ascending and descending sorting, and can optionally                        // 7376
		 * provide a pre-formatting method that will help speed up sorting by allowing DataTables                          // 7377
		 * to pre-format the sort data only once (rather than every time the actual sort functions                         // 7378
		 * are run). The two sorting functions are typical Javascript sort methods:                                        // 7379
		 *   <ul>                                                                                                          // 7380
	     *     <li>                                                                                                     // 7381
	     *       Function input parameters:                                                                             // 7382
	     *       <ul>                                                                                                   // 7383
		 *         <li>{*} Data to compare to the second parameter</li>                                                    // 7384
		 *         <li>{*} Data to compare to the first parameter</li>                                                     // 7385
	     *       </ul>                                                                                                  // 7386
	     *     </li>                                                                                                    // 7387
		 *     <li>                                                                                                        // 7388
		 *       Function return:                                                                                          // 7389
		 *       <ul>                                                                                                      // 7390
		 *         <li>{int} Sorting match: <0 if first parameter should be sorted lower than                              // 7391
		 *           the second parameter, ===0 if the two parameters are equal and >0 if                                  // 7392
		 *           the first parameter should be sorted height than the second parameter.</li>                           // 7393
		 *       </ul>                                                                                                     // 7394
		 *     </il>                                                                                                       // 7395
		 *   </ul>                                                                                                         // 7396
		 *  @type object                                                                                                   // 7397
		 *  @default {}                                                                                                    // 7398
		 *                                                                                                                 // 7399
		 *  @example                                                                                                       // 7400
		 *    // Case-sensitive string sorting, with no pre-formatting method                                              // 7401
		 *    $.extend( $.fn.dataTableExt.oSort, {                                                                         // 7402
		 *      "string-case-asc": function(x,y) {                                                                         // 7403
		 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));                                                               // 7404
		 *      },                                                                                                         // 7405
		 *      "string-case-desc": function(x,y) {                                                                        // 7406
		 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));                                                               // 7407
		 *      }                                                                                                          // 7408
		 *    } );                                                                                                         // 7409
		 *                                                                                                                 // 7410
		 *  @example                                                                                                       // 7411
		 *    // Case-insensitive string sorting, with pre-formatting                                                      // 7412
		 *    $.extend( $.fn.dataTableExt.oSort, {                                                                         // 7413
		 *      "string-pre": function(x) {                                                                                // 7414
		 *        return x.toLowerCase();                                                                                  // 7415
		 *      },                                                                                                         // 7416
		 *      "string-asc": function(x,y) {                                                                              // 7417
		 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));                                                               // 7418
		 *      },                                                                                                         // 7419
		 *      "string-desc": function(x,y) {                                                                             // 7420
		 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));                                                               // 7421
		 *      }                                                                                                          // 7422
		 *    } );                                                                                                         // 7423
		 */                                                                                                                // 7424
		"oSort": {},                                                                                                       // 7425
	                                                                                                                    // 7426
	                                                                                                                    // 7427
		/**                                                                                                                // 7428
		 * Version string for plug-ins to check compatibility. Allowed format is                                           // 7429
		 * a.b.c.d.e where: a:int, b:int, c:int, d:string(dev|beta), e:int. d and                                          // 7430
		 * e are optional                                                                                                  // 7431
		 *  @type string                                                                                                   // 7432
		 *  @default Version number                                                                                        // 7433
		 */                                                                                                                // 7434
		"sVersion": DataTable.version,                                                                                     // 7435
	                                                                                                                    // 7436
	                                                                                                                    // 7437
		/**                                                                                                                // 7438
		 * How should DataTables report an error. Can take the value 'alert' or 'throw'                                    // 7439
		 *  @type string                                                                                                   // 7440
		 *  @default alert                                                                                                 // 7441
		 */                                                                                                                // 7442
		"sErrMode": "alert",                                                                                               // 7443
	                                                                                                                    // 7444
	                                                                                                                    // 7445
		/**                                                                                                                // 7446
		 * Store information for DataTables to access globally about other instances                                       // 7447
		 *  @namespace                                                                                                     // 7448
		 *  @private                                                                                                       // 7449
		 */                                                                                                                // 7450
		"_oExternConfig": {                                                                                                // 7451
			/* int:iNextUnique - next unique number for an instance */                                                        // 7452
			"iNextUnique": 0                                                                                                  // 7453
		}                                                                                                                  // 7454
	};                                                                                                                  // 7455
	                                                                                                                    // 7456
	                                                                                                                    // 7457
	                                                                                                                    // 7458
	                                                                                                                    // 7459
	/**                                                                                                                 // 7460
	 * Template object for the way in which DataTables holds information about                                          // 7461
	 * search information for the global filter and individual column filters.                                          // 7462
	 *  @namespace                                                                                                      // 7463
	 */                                                                                                                 // 7464
	DataTable.models.oSearch = {                                                                                        // 7465
		/**                                                                                                                // 7466
		 * Flag to indicate if the filtering should be case insensitive or not                                             // 7467
		 *  @type boolean                                                                                                  // 7468
		 *  @default true                                                                                                  // 7469
		 */                                                                                                                // 7470
		"bCaseInsensitive": true,                                                                                          // 7471
	                                                                                                                    // 7472
		/**                                                                                                                // 7473
		 * Applied search term                                                                                             // 7474
		 *  @type string                                                                                                   // 7475
		 *  @default <i>Empty string</i>                                                                                   // 7476
		 */                                                                                                                // 7477
		"sSearch": "",                                                                                                     // 7478
	                                                                                                                    // 7479
		/**                                                                                                                // 7480
		 * Flag to indicate if the search term should be interpreted as a                                                  // 7481
		 * regular expression (true) or not (false) and therefore and special                                              // 7482
		 * regex characters escaped.                                                                                       // 7483
		 *  @type boolean                                                                                                  // 7484
		 *  @default false                                                                                                 // 7485
		 */                                                                                                                // 7486
		"bRegex": false,                                                                                                   // 7487
	                                                                                                                    // 7488
		/**                                                                                                                // 7489
		 * Flag to indicate if DataTables is to use its smart filtering or not.                                            // 7490
		 *  @type boolean                                                                                                  // 7491
		 *  @default true                                                                                                  // 7492
		 */                                                                                                                // 7493
		"bSmart": true                                                                                                     // 7494
	};                                                                                                                  // 7495
	                                                                                                                    // 7496
	                                                                                                                    // 7497
	                                                                                                                    // 7498
	                                                                                                                    // 7499
	/**                                                                                                                 // 7500
	 * Template object for the way in which DataTables holds information about                                          // 7501
	 * each individual row. This is the object format used for the settings                                             // 7502
	 * aoData array.                                                                                                    // 7503
	 *  @namespace                                                                                                      // 7504
	 */                                                                                                                 // 7505
	DataTable.models.oRow = {                                                                                           // 7506
		/**                                                                                                                // 7507
		 * TR element for the row                                                                                          // 7508
		 *  @type node                                                                                                     // 7509
		 *  @default null                                                                                                  // 7510
		 */                                                                                                                // 7511
		"nTr": null,                                                                                                       // 7512
	                                                                                                                    // 7513
		/**                                                                                                                // 7514
		 * Data object from the original data source for the row. This is either                                           // 7515
		 * an array if using the traditional form of DataTables, or an object if                                           // 7516
		 * using mData options. The exact type will depend on the passed in                                                // 7517
		 * data from the data source, or will be an array if using DOM a data                                              // 7518
		 * source.                                                                                                         // 7519
		 *  @type array|object                                                                                             // 7520
		 *  @default []                                                                                                    // 7521
		 */                                                                                                                // 7522
		"_aData": [],                                                                                                      // 7523
	                                                                                                                    // 7524
		/**                                                                                                                // 7525
		 * Sorting data cache - this array is ostensibly the same length as the                                            // 7526
		 * number of columns (although each index is generated only as it is                                               // 7527
		 * needed), and holds the data that is used for sorting each column in the                                         // 7528
		 * row. We do this cache generation at the start of the sort in order that                                         // 7529
		 * the formatting of the sort data need be done only once for each cell                                            // 7530
		 * per sort. This array should not be read from or written to by anything                                          // 7531
		 * other than the master sorting methods.                                                                          // 7532
		 *  @type array                                                                                                    // 7533
		 *  @default []                                                                                                    // 7534
		 *  @private                                                                                                       // 7535
		 */                                                                                                                // 7536
		"_aSortData": [],                                                                                                  // 7537
	                                                                                                                    // 7538
		/**                                                                                                                // 7539
		 * Array of TD elements that are cached for hidden rows, so they can be                                            // 7540
		 * reinserted into the table if a column is made visible again (or to act                                          // 7541
		 * as a store if a column is made hidden). Only hidden columns have a                                              // 7542
		 * reference in the array. For non-hidden columns the value is either                                              // 7543
		 * undefined or null.                                                                                              // 7544
		 *  @type array nodes                                                                                              // 7545
		 *  @default []                                                                                                    // 7546
		 *  @private                                                                                                       // 7547
		 */                                                                                                                // 7548
		"_anHidden": [],                                                                                                   // 7549
	                                                                                                                    // 7550
		/**                                                                                                                // 7551
		 * Cache of the class name that DataTables has applied to the row, so we                                           // 7552
		 * can quickly look at this variable rather than needing to do a DOM check                                         // 7553
		 * on className for the nTr property.                                                                              // 7554
		 *  @type string                                                                                                   // 7555
		 *  @default <i>Empty string</i>                                                                                   // 7556
		 *  @private                                                                                                       // 7557
		 */                                                                                                                // 7558
		"_sRowStripe": ""                                                                                                  // 7559
	};                                                                                                                  // 7560
	                                                                                                                    // 7561
	                                                                                                                    // 7562
	                                                                                                                    // 7563
	/**                                                                                                                 // 7564
	 * Template object for the column information object in DataTables. This object                                     // 7565
	 * is held in the settings aoColumns array and contains all the information that                                    // 7566
	 * DataTables needs about each individual column.                                                                   // 7567
	 *                                                                                                                  // 7568
	 * Note that this object is related to {@link DataTable.defaults.columns}                                           // 7569
	 * but this one is the internal data store for DataTables's cache of columns.                                       // 7570
	 * It should NOT be manipulated outside of DataTables. Any configuration should                                     // 7571
	 * be done through the initialisation options.                                                                      // 7572
	 *  @namespace                                                                                                      // 7573
	 */                                                                                                                 // 7574
	DataTable.models.oColumn = {                                                                                        // 7575
		/**                                                                                                                // 7576
		 * A list of the columns that sorting should occur on when this column                                             // 7577
		 * is sorted. That this property is an array allows multi-column sorting                                           // 7578
		 * to be defined for a column (for example first name / last name columns                                          // 7579
		 * would benefit from this). The values are integers pointing to the                                               // 7580
		 * columns to be sorted on (typically it will be a single integer pointing                                         // 7581
		 * at itself, but that doesn't need to be the case).                                                               // 7582
		 *  @type array                                                                                                    // 7583
		 */                                                                                                                // 7584
		"aDataSort": null,                                                                                                 // 7585
	                                                                                                                    // 7586
		/**                                                                                                                // 7587
		 * Define the sorting directions that are applied to the column, in sequence                                       // 7588
		 * as the column is repeatedly sorted upon - i.e. the first value is used                                          // 7589
		 * as the sorting direction when the column if first sorted (clicked on).                                          // 7590
		 * Sort it again (click again) and it will move on to the next index.                                              // 7591
		 * Repeat until loop.                                                                                              // 7592
		 *  @type array                                                                                                    // 7593
		 */                                                                                                                // 7594
		"asSorting": null,                                                                                                 // 7595
		                                                                                                                   // 7596
		/**                                                                                                                // 7597
		 * Flag to indicate if the column is searchable, and thus should be included                                       // 7598
		 * in the filtering or not.                                                                                        // 7599
		 *  @type boolean                                                                                                  // 7600
		 */                                                                                                                // 7601
		"bSearchable": null,                                                                                               // 7602
		                                                                                                                   // 7603
		/**                                                                                                                // 7604
		 * Flag to indicate if the column is sortable or not.                                                              // 7605
		 *  @type boolean                                                                                                  // 7606
		 */                                                                                                                // 7607
		"bSortable": null,                                                                                                 // 7608
		                                                                                                                   // 7609
		/**                                                                                                                // 7610
		 * <code>Deprecated</code> When using fnRender, you have two options for what                                      // 7611
		 * to do with the data, and this property serves as the switch. Firstly, you                                       // 7612
		 * can have the sorting and filtering use the rendered value (true - default),                                     // 7613
		 * or you can have the sorting and filtering us the original value (false).                                        // 7614
		 *                                                                                                                 // 7615
		 * Please note that this option has now been deprecated and will be removed                                        // 7616
		 * in the next version of DataTables. Please use mRender / mData rather than                                       // 7617
		 * fnRender.                                                                                                       // 7618
		 *  @type boolean                                                                                                  // 7619
		 *  @deprecated                                                                                                    // 7620
		 */                                                                                                                // 7621
		"bUseRendered": null,                                                                                              // 7622
		                                                                                                                   // 7623
		/**                                                                                                                // 7624
		 * Flag to indicate if the column is currently visible in the table or not                                         // 7625
		 *  @type boolean                                                                                                  // 7626
		 */                                                                                                                // 7627
		"bVisible": null,                                                                                                  // 7628
		                                                                                                                   // 7629
		/**                                                                                                                // 7630
		 * Flag to indicate to the type detection method if the automatic type                                             // 7631
		 * detection should be used, or if a column type (sType) has been specified                                        // 7632
		 *  @type boolean                                                                                                  // 7633
		 *  @default true                                                                                                  // 7634
		 *  @private                                                                                                       // 7635
		 */                                                                                                                // 7636
		"_bAutoType": true,                                                                                                // 7637
		                                                                                                                   // 7638
		/**                                                                                                                // 7639
		 * Developer definable function that is called whenever a cell is created (Ajax source,                            // 7640
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender                           // 7641
		 * allowing you to modify the DOM element (add background colour for example) when the                             // 7642
		 * element is available.                                                                                           // 7643
		 *  @type function                                                                                                 // 7644
		 *  @param {element} nTd The TD node that has been created                                                         // 7645
		 *  @param {*} sData The Data for the cell                                                                         // 7646
		 *  @param {array|object} oData The data for the whole row                                                         // 7647
		 *  @param {int} iRow The row index for the aoData data store                                                      // 7648
		 *  @default null                                                                                                  // 7649
		 */                                                                                                                // 7650
		"fnCreatedCell": null,                                                                                             // 7651
		                                                                                                                   // 7652
		/**                                                                                                                // 7653
		 * Function to get data from a cell in a column. You should <b>never</b>                                           // 7654
		 * access data directly through _aData internally in DataTables - always use                                       // 7655
		 * the method attached to this property. It allows mData to function as                                            // 7656
		 * required. This function is automatically assigned by the column                                                 // 7657
		 * initialisation method                                                                                           // 7658
		 *  @type function                                                                                                 // 7659
		 *  @param {array|object} oData The data array/object for the array                                                // 7660
		 *    (i.e. aoData[]._aData)                                                                                       // 7661
		 *  @param {string} sSpecific The specific data type you want to get -                                             // 7662
		 *    'display', 'type' 'filter' 'sort'                                                                            // 7663
		 *  @returns {*} The data for the cell from the given row's data                                                   // 7664
		 *  @default null                                                                                                  // 7665
		 */                                                                                                                // 7666
		"fnGetData": null,                                                                                                 // 7667
		                                                                                                                   // 7668
		/**                                                                                                                // 7669
		 * <code>Deprecated</code> Custom display function that will be called for the                                     // 7670
		 * display of each cell in this column.                                                                            // 7671
		 *                                                                                                                 // 7672
		 * Please note that this option has now been deprecated and will be removed                                        // 7673
		 * in the next version of DataTables. Please use mRender / mData rather than                                       // 7674
		 * fnRender.                                                                                                       // 7675
		 *  @type function                                                                                                 // 7676
		 *  @param {object} o Object with the following parameters:                                                        // 7677
		 *  @param {int}    o.iDataRow The row in aoData                                                                   // 7678
		 *  @param {int}    o.iDataColumn The column in question                                                           // 7679
		 *  @param {array}  o.aData The data for the row in question                                                       // 7680
		 *  @param {object} o.oSettings The settings object for this DataTables instance                                   // 7681
		 *  @returns {string} The string you which to use in the display                                                   // 7682
		 *  @default null                                                                                                  // 7683
		 *  @deprecated                                                                                                    // 7684
		 */                                                                                                                // 7685
		"fnRender": null,                                                                                                  // 7686
		                                                                                                                   // 7687
		/**                                                                                                                // 7688
		 * Function to set data for a cell in the column. You should <b>never</b>                                          // 7689
		 * set the data directly to _aData internally in DataTables - always use                                           // 7690
		 * this method. It allows mData to function as required. This function                                             // 7691
		 * is automatically assigned by the column initialisation method                                                   // 7692
		 *  @type function                                                                                                 // 7693
		 *  @param {array|object} oData The data array/object for the array                                                // 7694
		 *    (i.e. aoData[]._aData)                                                                                       // 7695
		 *  @param {*} sValue Value to set                                                                                 // 7696
		 *  @default null                                                                                                  // 7697
		 */                                                                                                                // 7698
		"fnSetData": null,                                                                                                 // 7699
		                                                                                                                   // 7700
		/**                                                                                                                // 7701
		 * Property to read the value for the cells in the column from the data                                            // 7702
		 * source array / object. If null, then the default content is used, if a                                          // 7703
		 * function is given then the return from the function is used.                                                    // 7704
		 *  @type function|int|string|null                                                                                 // 7705
		 *  @default null                                                                                                  // 7706
		 */                                                                                                                // 7707
		"mData": null,                                                                                                     // 7708
		                                                                                                                   // 7709
		/**                                                                                                                // 7710
		 * Partner property to mData which is used (only when defined) to get                                              // 7711
		 * the data - i.e. it is basically the same as mData, but without the                                              // 7712
		 * 'set' option, and also the data fed to it is the result from mData.                                             // 7713
		 * This is the rendering method to match the data method of mData.                                                 // 7714
		 *  @type function|int|string|null                                                                                 // 7715
		 *  @default null                                                                                                  // 7716
		 */                                                                                                                // 7717
		"mRender": null,                                                                                                   // 7718
		                                                                                                                   // 7719
		/**                                                                                                                // 7720
		 * Unique header TH/TD element for this column - this is what the sorting                                          // 7721
		 * listener is attached to (if sorting is enabled.)                                                                // 7722
		 *  @type node                                                                                                     // 7723
		 *  @default null                                                                                                  // 7724
		 */                                                                                                                // 7725
		"nTh": null,                                                                                                       // 7726
		                                                                                                                   // 7727
		/**                                                                                                                // 7728
		 * Unique footer TH/TD element for this column (if there is one). Not used                                         // 7729
		 * in DataTables as such, but can be used for plug-ins to reference the                                            // 7730
		 * footer for each column.                                                                                         // 7731
		 *  @type node                                                                                                     // 7732
		 *  @default null                                                                                                  // 7733
		 */                                                                                                                // 7734
		"nTf": null,                                                                                                       // 7735
		                                                                                                                   // 7736
		/**                                                                                                                // 7737
		 * The class to apply to all TD elements in the table's TBODY for the column                                       // 7738
		 *  @type string                                                                                                   // 7739
		 *  @default null                                                                                                  // 7740
		 */                                                                                                                // 7741
		"sClass": null,                                                                                                    // 7742
		                                                                                                                   // 7743
		/**                                                                                                                // 7744
		 * When DataTables calculates the column widths to assign to each column,                                          // 7745
		 * it finds the longest string in each column and then constructs a                                                // 7746
		 * temporary table and reads the widths from that. The problem with this                                           // 7747
		 * is that "mmm" is much wider then "iiii", but the latter is a longer                                             // 7748
		 * string - thus the calculation can go wrong (doing it properly and putting                                       // 7749
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as                                          // 7750
		 * a "work around" we provide this option. It will append its value to the                                         // 7751
		 * text that is found to be the longest string for the column - i.e. padding.                                      // 7752
		 *  @type string                                                                                                   // 7753
		 */                                                                                                                // 7754
		"sContentPadding": null,                                                                                           // 7755
		                                                                                                                   // 7756
		/**                                                                                                                // 7757
		 * Allows a default value to be given for a column's data, and will be used                                        // 7758
		 * whenever a null data source is encountered (this can be because mData                                           // 7759
		 * is set to null, or because the data source itself is null).                                                     // 7760
		 *  @type string                                                                                                   // 7761
		 *  @default null                                                                                                  // 7762
		 */                                                                                                                // 7763
		"sDefaultContent": null,                                                                                           // 7764
		                                                                                                                   // 7765
		/**                                                                                                                // 7766
		 * Name for the column, allowing reference to the column by name as well as                                        // 7767
		 * by index (needs a lookup to work by name).                                                                      // 7768
		 *  @type string                                                                                                   // 7769
		 */                                                                                                                // 7770
		"sName": null,                                                                                                     // 7771
		                                                                                                                   // 7772
		/**                                                                                                                // 7773
		 * Custom sorting data type - defines which of the available plug-ins in                                           // 7774
		 * afnSortData the custom sorting will use - if any is defined.                                                    // 7775
		 *  @type string                                                                                                   // 7776
		 *  @default std                                                                                                   // 7777
		 */                                                                                                                // 7778
		"sSortDataType": 'std',                                                                                            // 7779
		                                                                                                                   // 7780
		/**                                                                                                                // 7781
		 * Class to be applied to the header element when sorting on this column                                           // 7782
		 *  @type string                                                                                                   // 7783
		 *  @default null                                                                                                  // 7784
		 */                                                                                                                // 7785
		"sSortingClass": null,                                                                                             // 7786
		                                                                                                                   // 7787
		/**                                                                                                                // 7788
		 * Class to be applied to the header element when sorting on this column -                                         // 7789
		 * when jQuery UI theming is used.                                                                                 // 7790
		 *  @type string                                                                                                   // 7791
		 *  @default null                                                                                                  // 7792
		 */                                                                                                                // 7793
		"sSortingClassJUI": null,                                                                                          // 7794
		                                                                                                                   // 7795
		/**                                                                                                                // 7796
		 * Title of the column - what is seen in the TH element (nTh).                                                     // 7797
		 *  @type string                                                                                                   // 7798
		 */                                                                                                                // 7799
		"sTitle": null,                                                                                                    // 7800
		                                                                                                                   // 7801
		/**                                                                                                                // 7802
		 * Column sorting and filtering type                                                                               // 7803
		 *  @type string                                                                                                   // 7804
		 *  @default null                                                                                                  // 7805
		 */                                                                                                                // 7806
		"sType": null,                                                                                                     // 7807
		                                                                                                                   // 7808
		/**                                                                                                                // 7809
		 * Width of the column                                                                                             // 7810
		 *  @type string                                                                                                   // 7811
		 *  @default null                                                                                                  // 7812
		 */                                                                                                                // 7813
		"sWidth": null,                                                                                                    // 7814
		                                                                                                                   // 7815
		/**                                                                                                                // 7816
		 * Width of the column when it was first "encountered"                                                             // 7817
		 *  @type string                                                                                                   // 7818
		 *  @default null                                                                                                  // 7819
		 */                                                                                                                // 7820
		"sWidthOrig": null                                                                                                 // 7821
	};                                                                                                                  // 7822
	                                                                                                                    // 7823
	                                                                                                                    // 7824
	                                                                                                                    // 7825
	/**                                                                                                                 // 7826
	 * Initialisation options that can be given to DataTables at initialisation                                         // 7827
	 * time.                                                                                                            // 7828
	 *  @namespace                                                                                                      // 7829
	 */                                                                                                                 // 7830
	DataTable.defaults = {                                                                                              // 7831
		/**                                                                                                                // 7832
		 * An array of data to use for the table, passed in at initialisation which                                        // 7833
		 * will be used in preference to any data which is already in the DOM. This is                                     // 7834
		 * particularly useful for constructing tables purely in Javascript, for                                           // 7835
		 * example with a custom Ajax call.                                                                                // 7836
		 *  @type array                                                                                                    // 7837
		 *  @default null                                                                                                  // 7838
		 *  @dtopt Option                                                                                                  // 7839
		 *                                                                                                                 // 7840
		 *  @example                                                                                                       // 7841
		 *    // Using a 2D array data source                                                                              // 7842
		 *    $(document).ready( function () {                                                                             // 7843
		 *      $('#example').dataTable( {                                                                                 // 7844
		 *        "aaData": [                                                                                              // 7845
		 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],                                               // 7846
		 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],                                               // 7847
		 *        ],                                                                                                       // 7848
		 *        "aoColumns": [                                                                                           // 7849
		 *          { "sTitle": "Engine" },                                                                                // 7850
		 *          { "sTitle": "Browser" },                                                                               // 7851
		 *          { "sTitle": "Platform" },                                                                              // 7852
		 *          { "sTitle": "Version" },                                                                               // 7853
		 *          { "sTitle": "Grade" }                                                                                  // 7854
		 *        ]                                                                                                        // 7855
		 *      } );                                                                                                       // 7856
		 *    } );                                                                                                         // 7857
		 *                                                                                                                 // 7858
		 *  @example                                                                                                       // 7859
		 *    // Using an array of objects as a data source (mData)                                                        // 7860
		 *    $(document).ready( function () {                                                                             // 7861
		 *      $('#example').dataTable( {                                                                                 // 7862
		 *        "aaData": [                                                                                              // 7863
		 *          {                                                                                                      // 7864
		 *            "engine":   "Trident",                                                                               // 7865
		 *            "browser":  "Internet Explorer 4.0",                                                                 // 7866
		 *            "platform": "Win 95+",                                                                               // 7867
		 *            "version":  4,                                                                                       // 7868
		 *            "grade":    "X"                                                                                      // 7869
		 *          },                                                                                                     // 7870
		 *          {                                                                                                      // 7871
		 *            "engine":   "Trident",                                                                               // 7872
		 *            "browser":  "Internet Explorer 5.0",                                                                 // 7873
		 *            "platform": "Win 95+",                                                                               // 7874
		 *            "version":  5,                                                                                       // 7875
		 *            "grade":    "C"                                                                                      // 7876
		 *          }                                                                                                      // 7877
		 *        ],                                                                                                       // 7878
		 *        "aoColumns": [                                                                                           // 7879
		 *          { "sTitle": "Engine",   "mData": "engine" },                                                           // 7880
		 *          { "sTitle": "Browser",  "mData": "browser" },                                                          // 7881
		 *          { "sTitle": "Platform", "mData": "platform" },                                                         // 7882
		 *          { "sTitle": "Version",  "mData": "version" },                                                          // 7883
		 *          { "sTitle": "Grade",    "mData": "grade" }                                                             // 7884
		 *        ]                                                                                                        // 7885
		 *      } );                                                                                                       // 7886
		 *    } );                                                                                                         // 7887
		 */                                                                                                                // 7888
		"aaData": null,                                                                                                    // 7889
	                                                                                                                    // 7890
	                                                                                                                    // 7891
		/**                                                                                                                // 7892
		 * If sorting is enabled, then DataTables will perform a first pass sort on                                        // 7893
		 * initialisation. You can define which column(s) the sort is performed upon,                                      // 7894
		 * and the sorting direction, with this variable. The aaSorting array should                                       // 7895
		 * contain an array for each column to be sorted initially containing the                                          // 7896
		 * column's index and a direction string ('asc' or 'desc').                                                        // 7897
		 *  @type array                                                                                                    // 7898
		 *  @default [[0,'asc']]                                                                                           // 7899
		 *  @dtopt Option                                                                                                  // 7900
		 *                                                                                                                 // 7901
		 *  @example                                                                                                       // 7902
		 *    // Sort by 3rd column first, and then 4th column                                                             // 7903
		 *    $(document).ready( function() {                                                                              // 7904
		 *      $('#example').dataTable( {                                                                                 // 7905
		 *        "aaSorting": [[2,'asc'], [3,'desc']]                                                                     // 7906
		 *      } );                                                                                                       // 7907
		 *    } );                                                                                                         // 7908
		 *                                                                                                                 // 7909
		 *    // No initial sorting                                                                                        // 7910
		 *    $(document).ready( function() {                                                                              // 7911
		 *      $('#example').dataTable( {                                                                                 // 7912
		 *        "aaSorting": []                                                                                          // 7913
		 *      } );                                                                                                       // 7914
		 *    } );                                                                                                         // 7915
		 */                                                                                                                // 7916
		"aaSorting": [[0,'asc']],                                                                                          // 7917
	                                                                                                                    // 7918
	                                                                                                                    // 7919
		/**                                                                                                                // 7920
		 * This parameter is basically identical to the aaSorting parameter, but                                           // 7921
		 * cannot be overridden by user interaction with the table. What this means                                        // 7922
		 * is that you could have a column (visible or hidden) which the sorting will                                      // 7923
		 * always be forced on first - any sorting after that (from the user) will                                         // 7924
		 * then be performed as required. This can be useful for grouping rows                                             // 7925
		 * together.                                                                                                       // 7926
		 *  @type array                                                                                                    // 7927
		 *  @default null                                                                                                  // 7928
		 *  @dtopt Option                                                                                                  // 7929
		 *                                                                                                                 // 7930
		 *  @example                                                                                                       // 7931
		 *    $(document).ready( function() {                                                                              // 7932
		 *      $('#example').dataTable( {                                                                                 // 7933
		 *        "aaSortingFixed": [[0,'asc']]                                                                            // 7934
		 *      } );                                                                                                       // 7935
		 *    } )                                                                                                          // 7936
		 */                                                                                                                // 7937
		"aaSortingFixed": null,                                                                                            // 7938
	                                                                                                                    // 7939
	                                                                                                                    // 7940
		/**                                                                                                                // 7941
		 * This parameter allows you to readily specify the entries in the length drop                                     // 7942
		 * down menu that DataTables shows when pagination is enabled. It can be                                           // 7943
		 * either a 1D array of options which will be used for both the displayed                                          // 7944
		 * option and the value, or a 2D array which will use the array in the first                                       // 7945
		 * position as the value, and the array in the second position as the                                              // 7946
		 * displayed options (useful for language strings such as 'All').                                                  // 7947
		 *  @type array                                                                                                    // 7948
		 *  @default [ 10, 25, 50, 100 ]                                                                                   // 7949
		 *  @dtopt Option                                                                                                  // 7950
		 *                                                                                                                 // 7951
		 *  @example                                                                                                       // 7952
		 *    $(document).ready( function() {                                                                              // 7953
		 *      $('#example').dataTable( {                                                                                 // 7954
		 *        "aLengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]                                                   // 7955
		 *      } );                                                                                                       // 7956
		 *    } );                                                                                                         // 7957
		 *                                                                                                                 // 7958
		 *  @example                                                                                                       // 7959
		 *    // Setting the default display length as well as length menu                                                 // 7960
		 *    // This is likely to be wanted if you remove the '10' option which                                           // 7961
		 *    // is the iDisplayLength default.                                                                            // 7962
		 *    $(document).ready( function() {                                                                              // 7963
		 *      $('#example').dataTable( {                                                                                 // 7964
		 *        "iDisplayLength": 25,                                                                                    // 7965
		 *        "aLengthMenu": [[25, 50, 100, -1], [25, 50, 100, "All"]]                                                 // 7966
		 *      } );                                                                                                       // 7967
		 *    } );                                                                                                         // 7968
		 */                                                                                                                // 7969
		"aLengthMenu": [ 10, 25, 50, 100 ],                                                                                // 7970
	                                                                                                                    // 7971
	                                                                                                                    // 7972
		/**                                                                                                                // 7973
		 * The aoColumns option in the initialisation parameter allows you to define                                       // 7974
		 * details about the way individual columns behave. For a full list of                                             // 7975
		 * column options that can be set, please see                                                                      // 7976
		 * {@link DataTable.defaults.columns}. Note that if you use aoColumns to                                           // 7977
		 * define your columns, you must have an entry in the array for every single                                       // 7978
		 * column that you have in your table (these can be null if you don't which                                        // 7979
		 * to specify any options).                                                                                        // 7980
		 *  @member                                                                                                        // 7981
		 */                                                                                                                // 7982
		"aoColumns": null,                                                                                                 // 7983
	                                                                                                                    // 7984
		/**                                                                                                                // 7985
		 * Very similar to aoColumns, aoColumnDefs allows you to target a specific                                         // 7986
		 * column, multiple columns, or all columns, using the aTargets property of                                        // 7987
		 * each object in the array. This allows great flexibility when creating                                           // 7988
		 * tables, as the aoColumnDefs arrays can be of any length, targeting the                                          // 7989
		 * columns you specifically want. aoColumnDefs may use any of the column                                           // 7990
		 * options available: {@link DataTable.defaults.columns}, but it _must_                                            // 7991
		 * have aTargets defined in each object in the array. Values in the aTargets                                       // 7992
		 * array may be:                                                                                                   // 7993
		 *   <ul>                                                                                                          // 7994
		 *     <li>a string - class name will be matched on the TH for the column</li>                                     // 7995
		 *     <li>0 or a positive integer - column index counting from the left</li>                                      // 7996
		 *     <li>a negative integer - column index counting from the right</li>                                          // 7997
		 *     <li>the string "_all" - all columns (i.e. assign a default)</li>                                            // 7998
		 *   </ul>                                                                                                         // 7999
		 *  @member                                                                                                        // 8000
		 */                                                                                                                // 8001
		"aoColumnDefs": null,                                                                                              // 8002
	                                                                                                                    // 8003
	                                                                                                                    // 8004
		/**                                                                                                                // 8005
		 * Basically the same as oSearch, this parameter defines the individual column                                     // 8006
		 * filtering state at initialisation time. The array must be of the same size                                      // 8007
		 * as the number of columns, and each element be an object with the parameters                                     // 8008
		 * "sSearch" and "bEscapeRegex" (the latter is optional). 'null' is also                                           // 8009
		 * accepted and the default will be used.                                                                          // 8010
		 *  @type array                                                                                                    // 8011
		 *  @default []                                                                                                    // 8012
		 *  @dtopt Option                                                                                                  // 8013
		 *                                                                                                                 // 8014
		 *  @example                                                                                                       // 8015
		 *    $(document).ready( function() {                                                                              // 8016
		 *      $('#example').dataTable( {                                                                                 // 8017
		 *        "aoSearchCols": [                                                                                        // 8018
		 *          null,                                                                                                  // 8019
		 *          { "sSearch": "My filter" },                                                                            // 8020
		 *          null,                                                                                                  // 8021
		 *          { "sSearch": "^[0-9]", "bEscapeRegex": false }                                                         // 8022
		 *        ]                                                                                                        // 8023
		 *      } );                                                                                                       // 8024
		 *    } )                                                                                                          // 8025
		 */                                                                                                                // 8026
		"aoSearchCols": [],                                                                                                // 8027
	                                                                                                                    // 8028
	                                                                                                                    // 8029
		/**                                                                                                                // 8030
		 * An array of CSS classes that should be applied to displayed rows. This                                          // 8031
		 * array may be of any length, and DataTables will apply each class                                                // 8032
		 * sequentially, looping when required.                                                                            // 8033
		 *  @type array                                                                                                    // 8034
		 *  @default null <i>Will take the values determined by the oClasses.sStripe*                                      // 8035
		 *    options</i>                                                                                                  // 8036
		 *  @dtopt Option                                                                                                  // 8037
		 *                                                                                                                 // 8038
		 *  @example                                                                                                       // 8039
		 *    $(document).ready( function() {                                                                              // 8040
		 *      $('#example').dataTable( {                                                                                 // 8041
		 *        "asStripeClasses": [ 'strip1', 'strip2', 'strip3' ]                                                      // 8042
		 *      } );                                                                                                       // 8043
		 *    } )                                                                                                          // 8044
		 */                                                                                                                // 8045
		"asStripeClasses": null,                                                                                           // 8046
	                                                                                                                    // 8047
	                                                                                                                    // 8048
		/**                                                                                                                // 8049
		 * Enable or disable automatic column width calculation. This can be disabled                                      // 8050
		 * as an optimisation (it takes some time to calculate the widths) if the                                          // 8051
		 * tables widths are passed in using aoColumns.                                                                    // 8052
		 *  @type boolean                                                                                                  // 8053
		 *  @default true                                                                                                  // 8054
		 *  @dtopt Features                                                                                                // 8055
		 *                                                                                                                 // 8056
		 *  @example                                                                                                       // 8057
		 *    $(document).ready( function () {                                                                             // 8058
		 *      $('#example').dataTable( {                                                                                 // 8059
		 *        "bAutoWidth": false                                                                                      // 8060
		 *      } );                                                                                                       // 8061
		 *    } );                                                                                                         // 8062
		 */                                                                                                                // 8063
		"bAutoWidth": true,                                                                                                // 8064
	                                                                                                                    // 8065
	                                                                                                                    // 8066
		/**                                                                                                                // 8067
		 * Deferred rendering can provide DataTables with a huge speed boost when you                                      // 8068
		 * are using an Ajax or JS data source for the table. This option, when set to                                     // 8069
		 * true, will cause DataTables to defer the creation of the table elements for                                     // 8070
		 * each row until they are needed for a draw - saving a significant amount of                                      // 8071
		 * time.                                                                                                           // 8072
		 *  @type boolean                                                                                                  // 8073
		 *  @default false                                                                                                 // 8074
		 *  @dtopt Features                                                                                                // 8075
		 *                                                                                                                 // 8076
		 *  @example                                                                                                       // 8077
		 *    $(document).ready( function() {                                                                              // 8078
		 *      var oTable = $('#example').dataTable( {                                                                    // 8079
		 *        "sAjaxSource": "sources/arrays.txt",                                                                     // 8080
		 *        "bDeferRender": true                                                                                     // 8081
		 *      } );                                                                                                       // 8082
		 *    } );                                                                                                         // 8083
		 */                                                                                                                // 8084
		"bDeferRender": false,                                                                                             // 8085
	                                                                                                                    // 8086
	                                                                                                                    // 8087
		/**                                                                                                                // 8088
		 * Replace a DataTable which matches the given selector and replace it with                                        // 8089
		 * one which has the properties of the new initialisation object passed. If no                                     // 8090
		 * table matches the selector, then the new DataTable will be constructed as                                       // 8091
		 * per normal.                                                                                                     // 8092
		 *  @type boolean                                                                                                  // 8093
		 *  @default false                                                                                                 // 8094
		 *  @dtopt Options                                                                                                 // 8095
		 *                                                                                                                 // 8096
		 *  @example                                                                                                       // 8097
		 *    $(document).ready( function() {                                                                              // 8098
		 *      $('#example').dataTable( {                                                                                 // 8099
		 *        "sScrollY": "200px",                                                                                     // 8100
		 *        "bPaginate": false                                                                                       // 8101
		 *      } );                                                                                                       // 8102
		 *                                                                                                                 // 8103
		 *      // Some time later....                                                                                     // 8104
		 *      $('#example').dataTable( {                                                                                 // 8105
		 *        "bFilter": false,                                                                                        // 8106
		 *        "bDestroy": true                                                                                         // 8107
		 *      } );                                                                                                       // 8108
		 *    } );                                                                                                         // 8109
		 */                                                                                                                // 8110
		"bDestroy": false,                                                                                                 // 8111
	                                                                                                                    // 8112
	                                                                                                                    // 8113
		/**                                                                                                                // 8114
		 * Enable or disable filtering of data. Filtering in DataTables is "smart" in                                      // 8115
		 * that it allows the end user to input multiple words (space separated) and                                       // 8116
		 * will match a row containing those words, even if not in the order that was                                      // 8117
		 * specified (this allow matching across multiple columns). Note that if you                                       // 8118
		 * wish to use filtering in DataTables this must remain 'true' - to remove the                                     // 8119
		 * default filtering input box and retain filtering abilities, please use                                          // 8120
		 * {@link DataTable.defaults.sDom}.                                                                                // 8121
		 *  @type boolean                                                                                                  // 8122
		 *  @default true                                                                                                  // 8123
		 *  @dtopt Features                                                                                                // 8124
		 *                                                                                                                 // 8125
		 *  @example                                                                                                       // 8126
		 *    $(document).ready( function () {                                                                             // 8127
		 *      $('#example').dataTable( {                                                                                 // 8128
		 *        "bFilter": false                                                                                         // 8129
		 *      } );                                                                                                       // 8130
		 *    } );                                                                                                         // 8131
		 */                                                                                                                // 8132
		"bFilter": true,                                                                                                   // 8133
	                                                                                                                    // 8134
	                                                                                                                    // 8135
		/**                                                                                                                // 8136
		 * Enable or disable the table information display. This shows information                                         // 8137
		 * about the data that is currently visible on the page, including information                                     // 8138
		 * about filtered data if that action is being performed.                                                          // 8139
		 *  @type boolean                                                                                                  // 8140
		 *  @default true                                                                                                  // 8141
		 *  @dtopt Features                                                                                                // 8142
		 *                                                                                                                 // 8143
		 *  @example                                                                                                       // 8144
		 *    $(document).ready( function () {                                                                             // 8145
		 *      $('#example').dataTable( {                                                                                 // 8146
		 *        "bInfo": false                                                                                           // 8147
		 *      } );                                                                                                       // 8148
		 *    } );                                                                                                         // 8149
		 */                                                                                                                // 8150
		"bInfo": true,                                                                                                     // 8151
	                                                                                                                    // 8152
	                                                                                                                    // 8153
		/**                                                                                                                // 8154
		 * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some                                     // 8155
		 * slightly different and additional mark-up from what DataTables has                                              // 8156
		 * traditionally used).                                                                                            // 8157
		 *  @type boolean                                                                                                  // 8158
		 *  @default false                                                                                                 // 8159
		 *  @dtopt Features                                                                                                // 8160
		 *                                                                                                                 // 8161
		 *  @example                                                                                                       // 8162
		 *    $(document).ready( function() {                                                                              // 8163
		 *      $('#example').dataTable( {                                                                                 // 8164
		 *        "bJQueryUI": true                                                                                        // 8165
		 *      } );                                                                                                       // 8166
		 *    } );                                                                                                         // 8167
		 */                                                                                                                // 8168
		"bJQueryUI": false,                                                                                                // 8169
	                                                                                                                    // 8170
	                                                                                                                    // 8171
		/**                                                                                                                // 8172
		 * Allows the end user to select the size of a formatted page from a select                                        // 8173
		 * menu (sizes are 10, 25, 50 and 100). Requires pagination (bPaginate).                                           // 8174
		 *  @type boolean                                                                                                  // 8175
		 *  @default true                                                                                                  // 8176
		 *  @dtopt Features                                                                                                // 8177
		 *                                                                                                                 // 8178
		 *  @example                                                                                                       // 8179
		 *    $(document).ready( function () {                                                                             // 8180
		 *      $('#example').dataTable( {                                                                                 // 8181
		 *        "bLengthChange": false                                                                                   // 8182
		 *      } );                                                                                                       // 8183
		 *    } );                                                                                                         // 8184
		 */                                                                                                                // 8185
		"bLengthChange": true,                                                                                             // 8186
	                                                                                                                    // 8187
	                                                                                                                    // 8188
		/**                                                                                                                // 8189
		 * Enable or disable pagination.                                                                                   // 8190
		 *  @type boolean                                                                                                  // 8191
		 *  @default true                                                                                                  // 8192
		 *  @dtopt Features                                                                                                // 8193
		 *                                                                                                                 // 8194
		 *  @example                                                                                                       // 8195
		 *    $(document).ready( function () {                                                                             // 8196
		 *      $('#example').dataTable( {                                                                                 // 8197
		 *        "bPaginate": false                                                                                       // 8198
		 *      } );                                                                                                       // 8199
		 *    } );                                                                                                         // 8200
		 */                                                                                                                // 8201
		"bPaginate": true,                                                                                                 // 8202
	                                                                                                                    // 8203
	                                                                                                                    // 8204
		/**                                                                                                                // 8205
		 * Enable or disable the display of a 'processing' indicator when the table is                                     // 8206
		 * being processed (e.g. a sort). This is particularly useful for tables with                                      // 8207
		 * large amounts of data where it can take a noticeable amount of time to sort                                     // 8208
		 * the entries.                                                                                                    // 8209
		 *  @type boolean                                                                                                  // 8210
		 *  @default false                                                                                                 // 8211
		 *  @dtopt Features                                                                                                // 8212
		 *                                                                                                                 // 8213
		 *  @example                                                                                                       // 8214
		 *    $(document).ready( function () {                                                                             // 8215
		 *      $('#example').dataTable( {                                                                                 // 8216
		 *        "bProcessing": true                                                                                      // 8217
		 *      } );                                                                                                       // 8218
		 *    } );                                                                                                         // 8219
		 */                                                                                                                // 8220
		"bProcessing": false,                                                                                              // 8221
	                                                                                                                    // 8222
	                                                                                                                    // 8223
		/**                                                                                                                // 8224
		 * Retrieve the DataTables object for the given selector. Note that if the                                         // 8225
		 * table has already been initialised, this parameter will cause DataTables                                        // 8226
		 * to simply return the object that has already been set up - it will not take                                     // 8227
		 * account of any changes you might have made to the initialisation object                                         // 8228
		 * passed to DataTables (setting this parameter to true is an acknowledgement                                      // 8229
		 * that you understand this). bDestroy can be used to reinitialise a table if                                      // 8230
		 * you need.                                                                                                       // 8231
		 *  @type boolean                                                                                                  // 8232
		 *  @default false                                                                                                 // 8233
		 *  @dtopt Options                                                                                                 // 8234
		 *                                                                                                                 // 8235
		 *  @example                                                                                                       // 8236
		 *    $(document).ready( function() {                                                                              // 8237
		 *      initTable();                                                                                               // 8238
		 *      tableActions();                                                                                            // 8239
		 *    } );                                                                                                         // 8240
		 *                                                                                                                 // 8241
		 *    function initTable ()                                                                                        // 8242
		 *    {                                                                                                            // 8243
		 *      return $('#example').dataTable( {                                                                          // 8244
		 *        "sScrollY": "200px",                                                                                     // 8245
		 *        "bPaginate": false,                                                                                      // 8246
		 *        "bRetrieve": true                                                                                        // 8247
		 *      } );                                                                                                       // 8248
		 *    }                                                                                                            // 8249
		 *                                                                                                                 // 8250
		 *    function tableActions ()                                                                                     // 8251
		 *    {                                                                                                            // 8252
		 *      var oTable = initTable();                                                                                  // 8253
		 *      // perform API operations with oTable                                                                      // 8254
		 *    }                                                                                                            // 8255
		 */                                                                                                                // 8256
		"bRetrieve": false,                                                                                                // 8257
	                                                                                                                    // 8258
	                                                                                                                    // 8259
		/**                                                                                                                // 8260
		 * Indicate if DataTables should be allowed to set the padding / margin                                            // 8261
		 * etc for the scrolling header elements or not. Typically you will want                                           // 8262
		 * this.                                                                                                           // 8263
		 *  @type boolean                                                                                                  // 8264
		 *  @default true                                                                                                  // 8265
		 *  @dtopt Options                                                                                                 // 8266
		 *                                                                                                                 // 8267
		 *  @example                                                                                                       // 8268
		 *    $(document).ready( function() {                                                                              // 8269
		 *      $('#example').dataTable( {                                                                                 // 8270
		 *        "bScrollAutoCss": false,                                                                                 // 8271
		 *        "sScrollY": "200px"                                                                                      // 8272
		 *      } );                                                                                                       // 8273
		 *    } );                                                                                                         // 8274
		 */                                                                                                                // 8275
		"bScrollAutoCss": true,                                                                                            // 8276
	                                                                                                                    // 8277
	                                                                                                                    // 8278
		/**                                                                                                                // 8279
		 * When vertical (y) scrolling is enabled, DataTables will force the height of                                     // 8280
		 * the table's viewport to the given height at all times (useful for layout).                                      // 8281
		 * However, this can look odd when filtering data down to a small data set,                                        // 8282
		 * and the footer is left "floating" further down. This parameter (when                                            // 8283
		 * enabled) will cause DataTables to collapse the table's viewport down when                                       // 8284
		 * the result set will fit within the given Y height.                                                              // 8285
		 *  @type boolean                                                                                                  // 8286
		 *  @default false                                                                                                 // 8287
		 *  @dtopt Options                                                                                                 // 8288
		 *                                                                                                                 // 8289
		 *  @example                                                                                                       // 8290
		 *    $(document).ready( function() {                                                                              // 8291
		 *      $('#example').dataTable( {                                                                                 // 8292
		 *        "sScrollY": "200",                                                                                       // 8293
		 *        "bScrollCollapse": true                                                                                  // 8294
		 *      } );                                                                                                       // 8295
		 *    } );                                                                                                         // 8296
		 */                                                                                                                // 8297
		"bScrollCollapse": false,                                                                                          // 8298
	                                                                                                                    // 8299
	                                                                                                                    // 8300
		/**                                                                                                                // 8301
		 * Enable infinite scrolling for DataTables (to be used in combination with                                        // 8302
		 * sScrollY). Infinite scrolling means that DataTables will continually load                                       // 8303
		 * data as a user scrolls through a table, which is very useful for large                                          // 8304
		 * dataset. This cannot be used with pagination, which is automatically                                            // 8305
		 * disabled. Note - the Scroller extra for DataTables is recommended in                                            // 8306
		 * in preference to this option.                                                                                   // 8307
		 *  @type boolean                                                                                                  // 8308
		 *  @default false                                                                                                 // 8309
		 *  @dtopt Features                                                                                                // 8310
		 *                                                                                                                 // 8311
		 *  @example                                                                                                       // 8312
		 *    $(document).ready( function() {                                                                              // 8313
		 *      $('#example').dataTable( {                                                                                 // 8314
		 *        "bScrollInfinite": true,                                                                                 // 8315
		 *        "bScrollCollapse": true,                                                                                 // 8316
		 *        "sScrollY": "200px"                                                                                      // 8317
		 *      } );                                                                                                       // 8318
		 *    } );                                                                                                         // 8319
		 */                                                                                                                // 8320
		"bScrollInfinite": false,                                                                                          // 8321
	                                                                                                                    // 8322
	                                                                                                                    // 8323
		/**                                                                                                                // 8324
		 * Configure DataTables to use server-side processing. Note that the                                               // 8325
		 * sAjaxSource parameter must also be given in order to give DataTables a                                          // 8326
		 * source to obtain the required data for each draw.                                                               // 8327
		 *  @type boolean                                                                                                  // 8328
		 *  @default false                                                                                                 // 8329
		 *  @dtopt Features                                                                                                // 8330
		 *  @dtopt Server-side                                                                                             // 8331
		 *                                                                                                                 // 8332
		 *  @example                                                                                                       // 8333
		 *    $(document).ready( function () {                                                                             // 8334
		 *      $('#example').dataTable( {                                                                                 // 8335
		 *        "bServerSide": true,                                                                                     // 8336
		 *        "sAjaxSource": "xhr.php"                                                                                 // 8337
		 *      } );                                                                                                       // 8338
		 *    } );                                                                                                         // 8339
		 */                                                                                                                // 8340
		"bServerSide": false,                                                                                              // 8341
	                                                                                                                    // 8342
	                                                                                                                    // 8343
		/**                                                                                                                // 8344
		 * Enable or disable sorting of columns. Sorting of individual columns can be                                      // 8345
		 * disabled by the "bSortable" option for each column.                                                             // 8346
		 *  @type boolean                                                                                                  // 8347
		 *  @default true                                                                                                  // 8348
		 *  @dtopt Features                                                                                                // 8349
		 *                                                                                                                 // 8350
		 *  @example                                                                                                       // 8351
		 *    $(document).ready( function () {                                                                             // 8352
		 *      $('#example').dataTable( {                                                                                 // 8353
		 *        "bSort": false                                                                                           // 8354
		 *      } );                                                                                                       // 8355
		 *    } );                                                                                                         // 8356
		 */                                                                                                                // 8357
		"bSort": true,                                                                                                     // 8358
	                                                                                                                    // 8359
	                                                                                                                    // 8360
		/**                                                                                                                // 8361
		 * Allows control over whether DataTables should use the top (true) unique                                         // 8362
		 * cell that is found for a single column, or the bottom (false - default).                                        // 8363
		 * This is useful when using complex headers.                                                                      // 8364
		 *  @type boolean                                                                                                  // 8365
		 *  @default false                                                                                                 // 8366
		 *  @dtopt Options                                                                                                 // 8367
		 *                                                                                                                 // 8368
		 *  @example                                                                                                       // 8369
		 *    $(document).ready( function() {                                                                              // 8370
		 *      $('#example').dataTable( {                                                                                 // 8371
		 *        "bSortCellsTop": true                                                                                    // 8372
		 *      } );                                                                                                       // 8373
		 *    } );                                                                                                         // 8374
		 */                                                                                                                // 8375
		"bSortCellsTop": false,                                                                                            // 8376
	                                                                                                                    // 8377
	                                                                                                                    // 8378
		/**                                                                                                                // 8379
		 * Enable or disable the addition of the classes 'sorting_1', 'sorting_2' and                                      // 8380
		 * 'sorting_3' to the columns which are currently being sorted on. This is                                         // 8381
		 * presented as a feature switch as it can increase processing time (while                                         // 8382
		 * classes are removed and added) so for large data sets you might want to                                         // 8383
		 * turn this off.                                                                                                  // 8384
		 *  @type boolean                                                                                                  // 8385
		 *  @default true                                                                                                  // 8386
		 *  @dtopt Features                                                                                                // 8387
		 *                                                                                                                 // 8388
		 *  @example                                                                                                       // 8389
		 *    $(document).ready( function () {                                                                             // 8390
		 *      $('#example').dataTable( {                                                                                 // 8391
		 *        "bSortClasses": false                                                                                    // 8392
		 *      } );                                                                                                       // 8393
		 *    } );                                                                                                         // 8394
		 */                                                                                                                // 8395
		"bSortClasses": true,                                                                                              // 8396
	                                                                                                                    // 8397
	                                                                                                                    // 8398
		/**                                                                                                                // 8399
		 * Enable or disable state saving. When enabled a cookie will be used to save                                      // 8400
		 * table display information such as pagination information, display length,                                       // 8401
		 * filtering and sorting. As such when the end user reloads the page the                                           // 8402
		 * display display will match what thy had previously set up.                                                      // 8403
		 *  @type boolean                                                                                                  // 8404
		 *  @default false                                                                                                 // 8405
		 *  @dtopt Features                                                                                                // 8406
		 *                                                                                                                 // 8407
		 *  @example                                                                                                       // 8408
		 *    $(document).ready( function () {                                                                             // 8409
		 *      $('#example').dataTable( {                                                                                 // 8410
		 *        "bStateSave": true                                                                                       // 8411
		 *      } );                                                                                                       // 8412
		 *    } );                                                                                                         // 8413
		 */                                                                                                                // 8414
		"bStateSave": false,                                                                                               // 8415
	                                                                                                                    // 8416
	                                                                                                                    // 8417
		/**                                                                                                                // 8418
		 * Customise the cookie and / or the parameters being stored when using                                            // 8419
		 * DataTables with state saving enabled. This function is called whenever                                          // 8420
		 * the cookie is modified, and it expects a fully formed cookie string to be                                       // 8421
		 * returned. Note that the data object passed in is a Javascript object which                                      // 8422
		 * must be converted to a string (JSON.stringify for example).                                                     // 8423
		 *  @type function                                                                                                 // 8424
		 *  @param {string} sName Name of the cookie defined by DataTables                                                 // 8425
		 *  @param {object} oData Data to be stored in the cookie                                                          // 8426
		 *  @param {string} sExpires Cookie expires string                                                                 // 8427
		 *  @param {string} sPath Path of the cookie to set                                                                // 8428
		 *  @returns {string} Cookie formatted string (which should be encoded by                                          // 8429
		 *    using encodeURIComponent())                                                                                  // 8430
		 *  @dtopt Callbacks                                                                                               // 8431
		 *                                                                                                                 // 8432
		 *  @example                                                                                                       // 8433
		 *    $(document).ready( function () {                                                                             // 8434
		 *      $('#example').dataTable( {                                                                                 // 8435
		 *        "fnCookieCallback": function (sName, oData, sExpires, sPath) {                                           // 8436
		 *          // Customise oData or sName or whatever else here                                                      // 8437
		 *          return sName + "="+JSON.stringify(oData)+"; expires=" + sExpires +"; path=" + sPath;                   // 8438
		 *        }                                                                                                        // 8439
		 *      } );                                                                                                       // 8440
		 *    } );                                                                                                         // 8441
		 */                                                                                                                // 8442
		"fnCookieCallback": null,                                                                                          // 8443
	                                                                                                                    // 8444
	                                                                                                                    // 8445
		/**                                                                                                                // 8446
		 * This function is called when a TR element is created (and all TD child                                          // 8447
		 * elements have been inserted), or registered if using a DOM source, allowing                                     // 8448
		 * manipulation of the TR element (adding classes etc).                                                            // 8449
		 *  @type function                                                                                                 // 8450
		 *  @param {node} nRow "TR" element for the current row                                                            // 8451
		 *  @param {array} aData Raw data array for this row                                                               // 8452
		 *  @param {int} iDataIndex The index of this row in aoData                                                        // 8453
		 *  @dtopt Callbacks                                                                                               // 8454
		 *                                                                                                                 // 8455
		 *  @example                                                                                                       // 8456
		 *    $(document).ready( function() {                                                                              // 8457
		 *      $('#example').dataTable( {                                                                                 // 8458
		 *        "fnCreatedRow": function( nRow, aData, iDataIndex ) {                                                    // 8459
		 *          // Bold the grade for all 'A' grade browsers                                                           // 8460
		 *          if ( aData[4] == "A" )                                                                                 // 8461
		 *          {                                                                                                      // 8462
		 *            $('td:eq(4)', nRow).html( '<b>A</b>' );                                                              // 8463
		 *          }                                                                                                      // 8464
		 *        }                                                                                                        // 8465
		 *      } );                                                                                                       // 8466
		 *    } );                                                                                                         // 8467
		 */                                                                                                                // 8468
		"fnCreatedRow": null,                                                                                              // 8469
	                                                                                                                    // 8470
	                                                                                                                    // 8471
		/**                                                                                                                // 8472
		 * This function is called on every 'draw' event, and allows you to                                                // 8473
		 * dynamically modify any aspect you want about the created DOM.                                                   // 8474
		 *  @type function                                                                                                 // 8475
		 *  @param {object} oSettings DataTables settings object                                                           // 8476
		 *  @dtopt Callbacks                                                                                               // 8477
		 *                                                                                                                 // 8478
		 *  @example                                                                                                       // 8479
		 *    $(document).ready( function() {                                                                              // 8480
		 *      $('#example').dataTable( {                                                                                 // 8481
		 *        "fnDrawCallback": function( oSettings ) {                                                                // 8482
		 *          alert( 'DataTables has redrawn the table' );                                                           // 8483
		 *        }                                                                                                        // 8484
		 *      } );                                                                                                       // 8485
		 *    } );                                                                                                         // 8486
		 */                                                                                                                // 8487
		"fnDrawCallback": null,                                                                                            // 8488
	                                                                                                                    // 8489
	                                                                                                                    // 8490
		/**                                                                                                                // 8491
		 * Identical to fnHeaderCallback() but for the table footer this function                                          // 8492
		 * allows you to modify the table footer on every 'draw' even.                                                     // 8493
		 *  @type function                                                                                                 // 8494
		 *  @param {node} nFoot "TR" element for the footer                                                                // 8495
		 *  @param {array} aData Full table data (as derived from the original HTML)                                       // 8496
		 *  @param {int} iStart Index for the current display starting point in the                                        // 8497
		 *    display array                                                                                                // 8498
		 *  @param {int} iEnd Index for the current display ending point in the                                            // 8499
		 *    display array                                                                                                // 8500
		 *  @param {array int} aiDisplay Index array to translate the visual position                                      // 8501
		 *    to the full data array                                                                                       // 8502
		 *  @dtopt Callbacks                                                                                               // 8503
		 *                                                                                                                 // 8504
		 *  @example                                                                                                       // 8505
		 *    $(document).ready( function() {                                                                              // 8506
		 *      $('#example').dataTable( {                                                                                 // 8507
		 *        "fnFooterCallback": function( nFoot, aData, iStart, iEnd, aiDisplay ) {                                  // 8508
		 *          nFoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+iStart;                           // 8509
		 *        }                                                                                                        // 8510
		 *      } );                                                                                                       // 8511
		 *    } )                                                                                                          // 8512
		 */                                                                                                                // 8513
		"fnFooterCallback": null,                                                                                          // 8514
	                                                                                                                    // 8515
	                                                                                                                    // 8516
		/**                                                                                                                // 8517
		 * When rendering large numbers in the information element for the table                                           // 8518
		 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers                                     // 8519
		 * to have a comma separator for the 'thousands' units (e.g. 1 million is                                          // 8520
		 * rendered as "1,000,000") to help readability for the end user. This                                             // 8521
		 * function will override the default method DataTables uses.                                                      // 8522
		 *  @type function                                                                                                 // 8523
		 *  @member                                                                                                        // 8524
		 *  @param {int} iIn number to be formatted                                                                        // 8525
		 *  @returns {string} formatted string for DataTables to show the number                                           // 8526
		 *  @dtopt Callbacks                                                                                               // 8527
		 *                                                                                                                 // 8528
		 *  @example                                                                                                       // 8529
		 *    $(document).ready( function() {                                                                              // 8530
		 *      $('#example').dataTable( {                                                                                 // 8531
		 *        "fnFormatNumber": function ( iIn ) {                                                                     // 8532
		 *          if ( iIn &lt; 1000 ) {                                                                                 // 8533
		 *            return iIn;                                                                                          // 8534
		 *          } else {                                                                                               // 8535
		 *            var                                                                                                  // 8536
		 *              s=(iIn+""),                                                                                        // 8537
		 *              a=s.split(""), out="",                                                                             // 8538
		 *              iLen=s.length;                                                                                     // 8539
		 *                                                                                                                 // 8540
		 *            for ( var i=0 ; i&lt;iLen ; i++ ) {                                                                  // 8541
		 *              if ( i%3 === 0 &amp;&amp; i !== 0 ) {                                                              // 8542
		 *                out = "'"+out;                                                                                   // 8543
		 *              }                                                                                                  // 8544
		 *              out = a[iLen-i-1]+out;                                                                             // 8545
		 *            }                                                                                                    // 8546
		 *          }                                                                                                      // 8547
		 *          return out;                                                                                            // 8548
		 *        };                                                                                                       // 8549
		 *      } );                                                                                                       // 8550
		 *    } );                                                                                                         // 8551
		 */                                                                                                                // 8552
		"fnFormatNumber": function ( iIn ) {                                                                               // 8553
			if ( iIn < 1000 )                                                                                                 // 8554
			{                                                                                                                 // 8555
				// A small optimisation for what is likely to be the majority of use cases                                       // 8556
				return iIn;                                                                                                      // 8557
			}                                                                                                                 // 8558
	                                                                                                                    // 8559
			var s=(iIn+""), a=s.split(""), out="", iLen=s.length;                                                             // 8560
			                                                                                                                  // 8561
			for ( var i=0 ; i<iLen ; i++ )                                                                                    // 8562
			{                                                                                                                 // 8563
				if ( i%3 === 0 && i !== 0 )                                                                                      // 8564
				{                                                                                                                // 8565
					out = this.oLanguage.sInfoThousands+out;                                                                        // 8566
				}                                                                                                                // 8567
				out = a[iLen-i-1]+out;                                                                                           // 8568
			}                                                                                                                 // 8569
			return out;                                                                                                       // 8570
		},                                                                                                                 // 8571
	                                                                                                                    // 8572
	                                                                                                                    // 8573
		/**                                                                                                                // 8574
		 * This function is called on every 'draw' event, and allows you to                                                // 8575
		 * dynamically modify the header row. This can be used to calculate and                                            // 8576
		 * display useful information about the table.                                                                     // 8577
		 *  @type function                                                                                                 // 8578
		 *  @param {node} nHead "TR" element for the header                                                                // 8579
		 *  @param {array} aData Full table data (as derived from the original HTML)                                       // 8580
		 *  @param {int} iStart Index for the current display starting point in the                                        // 8581
		 *    display array                                                                                                // 8582
		 *  @param {int} iEnd Index for the current display ending point in the                                            // 8583
		 *    display array                                                                                                // 8584
		 *  @param {array int} aiDisplay Index array to translate the visual position                                      // 8585
		 *    to the full data array                                                                                       // 8586
		 *  @dtopt Callbacks                                                                                               // 8587
		 *                                                                                                                 // 8588
		 *  @example                                                                                                       // 8589
		 *    $(document).ready( function() {                                                                              // 8590
		 *      $('#example').dataTable( {                                                                                 // 8591
		 *        "fnHeaderCallback": function( nHead, aData, iStart, iEnd, aiDisplay ) {                                  // 8592
		 *          nHead.getElementsByTagName('th')[0].innerHTML = "Displaying "+(iEnd-iStart)+" records";                // 8593
		 *        }                                                                                                        // 8594
		 *      } );                                                                                                       // 8595
		 *    } )                                                                                                          // 8596
		 */                                                                                                                // 8597
		"fnHeaderCallback": null,                                                                                          // 8598
	                                                                                                                    // 8599
	                                                                                                                    // 8600
		/**                                                                                                                // 8601
		 * The information element can be used to convey information about the current                                     // 8602
		 * state of the table. Although the internationalisation options presented by                                      // 8603
		 * DataTables are quite capable of dealing with most customisations, there may                                     // 8604
		 * be times where you wish to customise the string further. This callback                                          // 8605
		 * allows you to do exactly that.                                                                                  // 8606
		 *  @type function                                                                                                 // 8607
		 *  @param {object} oSettings DataTables settings object                                                           // 8608
		 *  @param {int} iStart Starting position in data for the draw                                                     // 8609
		 *  @param {int} iEnd End position in data for the draw                                                            // 8610
		 *  @param {int} iMax Total number of rows in the table (regardless of                                             // 8611
		 *    filtering)                                                                                                   // 8612
		 *  @param {int} iTotal Total number of rows in the data set, after filtering                                      // 8613
		 *  @param {string} sPre The string that DataTables has formatted using it's                                       // 8614
		 *    own rules                                                                                                    // 8615
		 *  @returns {string} The string to be displayed in the information element.                                       // 8616
		 *  @dtopt Callbacks                                                                                               // 8617
		 *                                                                                                                 // 8618
		 *  @example                                                                                                       // 8619
		 *    $('#example').dataTable( {                                                                                   // 8620
		 *      "fnInfoCallback": function( oSettings, iStart, iEnd, iMax, iTotal, sPre ) {                                // 8621
		 *        return iStart +" to "+ iEnd;                                                                             // 8622
		 *      }                                                                                                          // 8623
		 *    } );                                                                                                         // 8624
		 */                                                                                                                // 8625
		"fnInfoCallback": null,                                                                                            // 8626
	                                                                                                                    // 8627
	                                                                                                                    // 8628
		/**                                                                                                                // 8629
		 * Called when the table has been initialised. Normally DataTables will                                            // 8630
		 * initialise sequentially and there will be no need for this function,                                            // 8631
		 * however, this does not hold true when using external language information                                       // 8632
		 * since that is obtained using an async XHR call.                                                                 // 8633
		 *  @type function                                                                                                 // 8634
		 *  @param {object} oSettings DataTables settings object                                                           // 8635
		 *  @param {object} json The JSON object request from the server - only                                            // 8636
		 *    present if client-side Ajax sourced data is used                                                             // 8637
		 *  @dtopt Callbacks                                                                                               // 8638
		 *                                                                                                                 // 8639
		 *  @example                                                                                                       // 8640
		 *    $(document).ready( function() {                                                                              // 8641
		 *      $('#example').dataTable( {                                                                                 // 8642
		 *        "fnInitComplete": function(oSettings, json) {                                                            // 8643
		 *          alert( 'DataTables has finished its initialisation.' );                                                // 8644
		 *        }                                                                                                        // 8645
		 *      } );                                                                                                       // 8646
		 *    } )                                                                                                          // 8647
		 */                                                                                                                // 8648
		"fnInitComplete": null,                                                                                            // 8649
	                                                                                                                    // 8650
	                                                                                                                    // 8651
		/**                                                                                                                // 8652
		 * Called at the very start of each table draw and can be used to cancel the                                       // 8653
		 * draw by returning false, any other return (including undefined) results in                                      // 8654
		 * the full draw occurring).                                                                                       // 8655
		 *  @type function                                                                                                 // 8656
		 *  @param {object} oSettings DataTables settings object                                                           // 8657
		 *  @returns {boolean} False will cancel the draw, anything else (including no                                     // 8658
		 *    return) will allow it to complete.                                                                           // 8659
		 *  @dtopt Callbacks                                                                                               // 8660
		 *                                                                                                                 // 8661
		 *  @example                                                                                                       // 8662
		 *    $(document).ready( function() {                                                                              // 8663
		 *      $('#example').dataTable( {                                                                                 // 8664
		 *        "fnPreDrawCallback": function( oSettings ) {                                                             // 8665
		 *          if ( $('#test').val() == 1 ) {                                                                         // 8666
		 *            return false;                                                                                        // 8667
		 *          }                                                                                                      // 8668
		 *        }                                                                                                        // 8669
		 *      } );                                                                                                       // 8670
		 *    } );                                                                                                         // 8671
		 */                                                                                                                // 8672
		"fnPreDrawCallback": null,                                                                                         // 8673
	                                                                                                                    // 8674
	                                                                                                                    // 8675
		/**                                                                                                                // 8676
		 * This function allows you to 'post process' each row after it have been                                          // 8677
		 * generated for each table draw, but before it is rendered on screen. This                                        // 8678
		 * function might be used for setting the row class name etc.                                                      // 8679
		 *  @type function                                                                                                 // 8680
		 *  @param {node} nRow "TR" element for the current row                                                            // 8681
		 *  @param {array} aData Raw data array for this row                                                               // 8682
		 *  @param {int} iDisplayIndex The display index for the current table draw                                        // 8683
		 *  @param {int} iDisplayIndexFull The index of the data in the full list of                                       // 8684
		 *    rows (after filtering)                                                                                       // 8685
		 *  @dtopt Callbacks                                                                                               // 8686
		 *                                                                                                                 // 8687
		 *  @example                                                                                                       // 8688
		 *    $(document).ready( function() {                                                                              // 8689
		 *      $('#example').dataTable( {                                                                                 // 8690
		 *        "fnRowCallback": function( nRow, aData, iDisplayIndex, iDisplayIndexFull ) {                             // 8691
		 *          // Bold the grade for all 'A' grade browsers                                                           // 8692
		 *          if ( aData[4] == "A" )                                                                                 // 8693
		 *          {                                                                                                      // 8694
		 *            $('td:eq(4)', nRow).html( '<b>A</b>' );                                                              // 8695
		 *          }                                                                                                      // 8696
		 *        }                                                                                                        // 8697
		 *      } );                                                                                                       // 8698
		 *    } );                                                                                                         // 8699
		 */                                                                                                                // 8700
		"fnRowCallback": null,                                                                                             // 8701
	                                                                                                                    // 8702
	                                                                                                                    // 8703
		/**                                                                                                                // 8704
		 * This parameter allows you to override the default function which obtains                                        // 8705
		 * the data from the server ($.getJSON) so something more suitable for your                                        // 8706
		 * application. For example you could use POST data, or pull information from                                      // 8707
		 * a Gears or AIR database.                                                                                        // 8708
		 *  @type function                                                                                                 // 8709
		 *  @member                                                                                                        // 8710
		 *  @param {string} sSource HTTP source to obtain the data from (sAjaxSource)                                      // 8711
		 *  @param {array} aoData A key/value pair object containing the data to send                                      // 8712
		 *    to the server                                                                                                // 8713
		 *  @param {function} fnCallback to be called on completion of the data get                                        // 8714
		 *    process that will draw the data on the page.                                                                 // 8715
		 *  @param {object} oSettings DataTables settings object                                                           // 8716
		 *  @dtopt Callbacks                                                                                               // 8717
		 *  @dtopt Server-side                                                                                             // 8718
		 *                                                                                                                 // 8719
		 *  @example                                                                                                       // 8720
		 *    // POST data to server                                                                                       // 8721
		 *    $(document).ready( function() {                                                                              // 8722
		 *      $('#example').dataTable( {                                                                                 // 8723
		 *        "bProcessing": true,                                                                                     // 8724
		 *        "bServerSide": true,                                                                                     // 8725
		 *        "sAjaxSource": "xhr.php",                                                                                // 8726
		 *        "fnServerData": function ( sSource, aoData, fnCallback, oSettings ) {                                    // 8727
		 *          oSettings.jqXHR = $.ajax( {                                                                            // 8728
		 *            "dataType": 'json',                                                                                  // 8729
		 *            "type": "POST",                                                                                      // 8730
		 *            "url": sSource,                                                                                      // 8731
		 *            "data": aoData,                                                                                      // 8732
		 *            "success": fnCallback                                                                                // 8733
		 *          } );                                                                                                   // 8734
		 *        }                                                                                                        // 8735
		 *      } );                                                                                                       // 8736
		 *    } );                                                                                                         // 8737
		 */                                                                                                                // 8738
		"fnServerData": function ( sUrl, aoData, fnCallback, oSettings ) {                                                 // 8739
			oSettings.jqXHR = $.ajax( {                                                                                       // 8740
				"url":  sUrl,                                                                                                    // 8741
				"data": aoData,                                                                                                  // 8742
				"success": function (json) {                                                                                     // 8743
					if ( json.sError ) {                                                                                            // 8744
						oSettings.oApi._fnLog( oSettings, 0, json.sError );                                                            // 8745
					}                                                                                                               // 8746
					                                                                                                                // 8747
					$(oSettings.oInstance).trigger('xhr', [oSettings, json]);                                                       // 8748
					fnCallback( json );                                                                                             // 8749
				},                                                                                                               // 8750
				"dataType": "json",                                                                                              // 8751
				"cache": false,                                                                                                  // 8752
				"type": oSettings.sServerMethod,                                                                                 // 8753
				"error": function (xhr, error, thrown) {                                                                         // 8754
					if ( error == "parsererror" ) {                                                                                 // 8755
						oSettings.oApi._fnLog( oSettings, 0, "DataTables warning: JSON data from "+                                    // 8756
							"server could not be parsed. This is caused by a JSON formatting error." );                                   // 8757
					}                                                                                                               // 8758
				}                                                                                                                // 8759
			} );                                                                                                              // 8760
		},                                                                                                                 // 8761
	                                                                                                                    // 8762
	                                                                                                                    // 8763
		/**                                                                                                                // 8764
		 * It is often useful to send extra data to the server when making an Ajax                                         // 8765
		 * request - for example custom filtering information, and this callback                                           // 8766
		 * function makes it trivial to send extra information to the server. The                                          // 8767
		 * passed in parameter is the data set that has been constructed by                                                // 8768
		 * DataTables, and you can add to this or modify it as you require.                                                // 8769
		 *  @type function                                                                                                 // 8770
		 *  @param {array} aoData Data array (array of objects which are name/value                                        // 8771
		 *    pairs) that has been constructed by DataTables and will be sent to the                                       // 8772
		 *    server. In the case of Ajax sourced data with server-side processing                                         // 8773
		 *    this will be an empty array, for server-side processing there will be a                                      // 8774
		 *    significant number of parameters!                                                                            // 8775
		 *  @returns {undefined} Ensure that you modify the aoData array passed in,                                        // 8776
		 *    as this is passed by reference.                                                                              // 8777
		 *  @dtopt Callbacks                                                                                               // 8778
		 *  @dtopt Server-side                                                                                             // 8779
		 *                                                                                                                 // 8780
		 *  @example                                                                                                       // 8781
		 *    $(document).ready( function() {                                                                              // 8782
		 *      $('#example').dataTable( {                                                                                 // 8783
		 *        "bProcessing": true,                                                                                     // 8784
		 *        "bServerSide": true,                                                                                     // 8785
		 *        "sAjaxSource": "scripts/server_processing.php",                                                          // 8786
		 *        "fnServerParams": function ( aoData ) {                                                                  // 8787
		 *          aoData.push( { "name": "more_data", "value": "my_value" } );                                           // 8788
		 *        }                                                                                                        // 8789
		 *      } );                                                                                                       // 8790
		 *    } );                                                                                                         // 8791
		 */                                                                                                                // 8792
		"fnServerParams": null,                                                                                            // 8793
	                                                                                                                    // 8794
	                                                                                                                    // 8795
		/**                                                                                                                // 8796
		 * Load the table state. With this function you can define from where, and how, the                                // 8797
		 * state of a table is loaded. By default DataTables will load from its state saving                               // 8798
		 * cookie, but you might wish to use local storage (HTML5) or a server-side database.                              // 8799
		 *  @type function                                                                                                 // 8800
		 *  @member                                                                                                        // 8801
		 *  @param {object} oSettings DataTables settings object                                                           // 8802
		 *  @return {object} The DataTables state object to be loaded                                                      // 8803
		 *  @dtopt Callbacks                                                                                               // 8804
		 *                                                                                                                 // 8805
		 *  @example                                                                                                       // 8806
		 *    $(document).ready( function() {                                                                              // 8807
		 *      $('#example').dataTable( {                                                                                 // 8808
		 *        "bStateSave": true,                                                                                      // 8809
		 *        "fnStateLoad": function (oSettings) {                                                                    // 8810
		 *          var o;                                                                                                 // 8811
		 *                                                                                                                 // 8812
		 *          // Send an Ajax request to the server to get the data. Note that                                       // 8813
		 *          // this is a synchronous request.                                                                      // 8814
		 *          $.ajax( {                                                                                              // 8815
		 *            "url": "/state_load",                                                                                // 8816
		 *            "async": false,                                                                                      // 8817
		 *            "dataType": "json",                                                                                  // 8818
		 *            "success": function (json) {                                                                         // 8819
		 *              o = json;                                                                                          // 8820
		 *            }                                                                                                    // 8821
		 *          } );                                                                                                   // 8822
		 *                                                                                                                 // 8823
		 *          return o;                                                                                              // 8824
		 *        }                                                                                                        // 8825
		 *      } );                                                                                                       // 8826
		 *    } );                                                                                                         // 8827
		 */                                                                                                                // 8828
		"fnStateLoad": function ( oSettings ) {                                                                            // 8829
			var sData = this.oApi._fnReadCookie( oSettings.sCookiePrefix+oSettings.sInstance );                               // 8830
			var oData;                                                                                                        // 8831
	                                                                                                                    // 8832
			try {                                                                                                             // 8833
				oData = (typeof $.parseJSON === 'function') ?                                                                    // 8834
					$.parseJSON(sData) : eval( '('+sData+')' );                                                                     // 8835
			} catch (e) {                                                                                                     // 8836
				oData = null;                                                                                                    // 8837
			}                                                                                                                 // 8838
	                                                                                                                    // 8839
			return oData;                                                                                                     // 8840
		},                                                                                                                 // 8841
	                                                                                                                    // 8842
	                                                                                                                    // 8843
		/**                                                                                                                // 8844
		 * Callback which allows modification of the saved state prior to loading that state.                              // 8845
		 * This callback is called when the table is loading state from the stored data, but                               // 8846
		 * prior to the settings object being modified by the saved state. Note that for                                   // 8847
		 * plug-in authors, you should use the 'stateLoadParams' event to load parameters for                              // 8848
		 * a plug-in.                                                                                                      // 8849
		 *  @type function                                                                                                 // 8850
		 *  @param {object} oSettings DataTables settings object                                                           // 8851
		 *  @param {object} oData The state object that is to be loaded                                                    // 8852
		 *  @dtopt Callbacks                                                                                               // 8853
		 *                                                                                                                 // 8854
		 *  @example                                                                                                       // 8855
		 *    // Remove a saved filter, so filtering is never loaded                                                       // 8856
		 *    $(document).ready( function() {                                                                              // 8857
		 *      $('#example').dataTable( {                                                                                 // 8858
		 *        "bStateSave": true,                                                                                      // 8859
		 *        "fnStateLoadParams": function (oSettings, oData) {                                                       // 8860
		 *          oData.oSearch.sSearch = "";                                                                            // 8861
		 *        }                                                                                                        // 8862
		 *      } );                                                                                                       // 8863
		 *    } );                                                                                                         // 8864
		 *                                                                                                                 // 8865
		 *  @example                                                                                                       // 8866
		 *    // Disallow state loading by returning false                                                                 // 8867
		 *    $(document).ready( function() {                                                                              // 8868
		 *      $('#example').dataTable( {                                                                                 // 8869
		 *        "bStateSave": true,                                                                                      // 8870
		 *        "fnStateLoadParams": function (oSettings, oData) {                                                       // 8871
		 *          return false;                                                                                          // 8872
		 *        }                                                                                                        // 8873
		 *      } );                                                                                                       // 8874
		 *    } );                                                                                                         // 8875
		 */                                                                                                                // 8876
		"fnStateLoadParams": null,                                                                                         // 8877
	                                                                                                                    // 8878
	                                                                                                                    // 8879
		/**                                                                                                                // 8880
		 * Callback that is called when the state has been loaded from the state saving method                             // 8881
		 * and the DataTables settings object has been modified as a result of the loaded state.                           // 8882
		 *  @type function                                                                                                 // 8883
		 *  @param {object} oSettings DataTables settings object                                                           // 8884
		 *  @param {object} oData The state object that was loaded                                                         // 8885
		 *  @dtopt Callbacks                                                                                               // 8886
		 *                                                                                                                 // 8887
		 *  @example                                                                                                       // 8888
		 *    // Show an alert with the filtering value that was saved                                                     // 8889
		 *    $(document).ready( function() {                                                                              // 8890
		 *      $('#example').dataTable( {                                                                                 // 8891
		 *        "bStateSave": true,                                                                                      // 8892
		 *        "fnStateLoaded": function (oSettings, oData) {                                                           // 8893
		 *          alert( 'Saved filter was: '+oData.oSearch.sSearch );                                                   // 8894
		 *        }                                                                                                        // 8895
		 *      } );                                                                                                       // 8896
		 *    } );                                                                                                         // 8897
		 */                                                                                                                // 8898
		"fnStateLoaded": null,                                                                                             // 8899
	                                                                                                                    // 8900
	                                                                                                                    // 8901
		/**                                                                                                                // 8902
		 * Save the table state. This function allows you to define where and how the state                                // 8903
		 * information for the table is stored - by default it will use a cookie, but you                                  // 8904
		 * might want to use local storage (HTML5) or a server-side database.                                              // 8905
		 *  @type function                                                                                                 // 8906
		 *  @member                                                                                                        // 8907
		 *  @param {object} oSettings DataTables settings object                                                           // 8908
		 *  @param {object} oData The state object to be saved                                                             // 8909
		 *  @dtopt Callbacks                                                                                               // 8910
		 *                                                                                                                 // 8911
		 *  @example                                                                                                       // 8912
		 *    $(document).ready( function() {                                                                              // 8913
		 *      $('#example').dataTable( {                                                                                 // 8914
		 *        "bStateSave": true,                                                                                      // 8915
		 *        "fnStateSave": function (oSettings, oData) {                                                             // 8916
		 *          // Send an Ajax request to the server with the state object                                            // 8917
		 *          $.ajax( {                                                                                              // 8918
		 *            "url": "/state_save",                                                                                // 8919
		 *            "data": oData,                                                                                       // 8920
		 *            "dataType": "json",                                                                                  // 8921
		 *            "method": "POST"                                                                                     // 8922
		 *            "success": function () {}                                                                            // 8923
		 *          } );                                                                                                   // 8924
		 *        }                                                                                                        // 8925
		 *      } );                                                                                                       // 8926
		 *    } );                                                                                                         // 8927
		 */                                                                                                                // 8928
		"fnStateSave": function ( oSettings, oData ) {                                                                     // 8929
			this.oApi._fnCreateCookie(                                                                                        // 8930
				oSettings.sCookiePrefix+oSettings.sInstance,                                                                     // 8931
				this.oApi._fnJsonString(oData),                                                                                  // 8932
				oSettings.iCookieDuration,                                                                                       // 8933
				oSettings.sCookiePrefix,                                                                                         // 8934
				oSettings.fnCookieCallback                                                                                       // 8935
			);                                                                                                                // 8936
		},                                                                                                                 // 8937
	                                                                                                                    // 8938
	                                                                                                                    // 8939
		/**                                                                                                                // 8940
		 * Callback which allows modification of the state to be saved. Called when the table                              // 8941
		 * has changed state a new state save is required. This method allows modification of                              // 8942
		 * the state saving object prior to actually doing the save, including addition or                                 // 8943
		 * other state properties or modification. Note that for plug-in authors, you should                               // 8944
		 * use the 'stateSaveParams' event to save parameters for a plug-in.                                               // 8945
		 *  @type function                                                                                                 // 8946
		 *  @param {object} oSettings DataTables settings object                                                           // 8947
		 *  @param {object} oData The state object to be saved                                                             // 8948
		 *  @dtopt Callbacks                                                                                               // 8949
		 *                                                                                                                 // 8950
		 *  @example                                                                                                       // 8951
		 *    // Remove a saved filter, so filtering is never saved                                                        // 8952
		 *    $(document).ready( function() {                                                                              // 8953
		 *      $('#example').dataTable( {                                                                                 // 8954
		 *        "bStateSave": true,                                                                                      // 8955
		 *        "fnStateSaveParams": function (oSettings, oData) {                                                       // 8956
		 *          oData.oSearch.sSearch = "";                                                                            // 8957
		 *        }                                                                                                        // 8958
		 *      } );                                                                                                       // 8959
		 *    } );                                                                                                         // 8960
		 */                                                                                                                // 8961
		"fnStateSaveParams": null,                                                                                         // 8962
	                                                                                                                    // 8963
	                                                                                                                    // 8964
		/**                                                                                                                // 8965
		 * Duration of the cookie which is used for storing session information. This                                      // 8966
		 * value is given in seconds.                                                                                      // 8967
		 *  @type int                                                                                                      // 8968
		 *  @default 7200 <i>(2 hours)</i>                                                                                 // 8969
		 *  @dtopt Options                                                                                                 // 8970
		 *                                                                                                                 // 8971
		 *  @example                                                                                                       // 8972
		 *    $(document).ready( function() {                                                                              // 8973
		 *      $('#example').dataTable( {                                                                                 // 8974
		 *        "iCookieDuration": 60*60*24; // 1 day                                                                    // 8975
		 *      } );                                                                                                       // 8976
		 *    } )                                                                                                          // 8977
		 */                                                                                                                // 8978
		"iCookieDuration": 7200,                                                                                           // 8979
	                                                                                                                    // 8980
	                                                                                                                    // 8981
		/**                                                                                                                // 8982
		 * When enabled DataTables will not make a request to the server for the first                                     // 8983
		 * page draw - rather it will use the data already on the page (no sorting etc                                     // 8984
		 * will be applied to it), thus saving on an XHR at load time. iDeferLoading                                       // 8985
		 * is used to indicate that deferred loading is required, but it is also used                                      // 8986
		 * to tell DataTables how many records there are in the full table (allowing                                       // 8987
		 * the information element and pagination to be displayed correctly). In the case                                  // 8988
		 * where a filtering is applied to the table on initial load, this can be                                          // 8989
		 * indicated by giving the parameter as an array, where the first element is                                       // 8990
		 * the number of records available after filtering and the second element is the                                   // 8991
		 * number of records without filtering (allowing the table information element                                     // 8992
		 * to be shown correctly).                                                                                         // 8993
		 *  @type int | array                                                                                              // 8994
		 *  @default null                                                                                                  // 8995
		 *  @dtopt Options                                                                                                 // 8996
		 *                                                                                                                 // 8997
		 *  @example                                                                                                       // 8998
		 *    // 57 records available in the table, no filtering applied                                                   // 8999
		 *    $(document).ready( function() {                                                                              // 9000
		 *      $('#example').dataTable( {                                                                                 // 9001
		 *        "bServerSide": true,                                                                                     // 9002
		 *        "sAjaxSource": "scripts/server_processing.php",                                                          // 9003
		 *        "iDeferLoading": 57                                                                                      // 9004
		 *      } );                                                                                                       // 9005
		 *    } );                                                                                                         // 9006
		 *                                                                                                                 // 9007
		 *  @example                                                                                                       // 9008
		 *    // 57 records after filtering, 100 without filtering (an initial filter applied)                             // 9009
		 *    $(document).ready( function() {                                                                              // 9010
		 *      $('#example').dataTable( {                                                                                 // 9011
		 *        "bServerSide": true,                                                                                     // 9012
		 *        "sAjaxSource": "scripts/server_processing.php",                                                          // 9013
		 *        "iDeferLoading": [ 57, 100 ],                                                                            // 9014
		 *        "oSearch": {                                                                                             // 9015
		 *          "sSearch": "my_filter"                                                                                 // 9016
		 *        }                                                                                                        // 9017
		 *      } );                                                                                                       // 9018
		 *    } );                                                                                                         // 9019
		 */                                                                                                                // 9020
		"iDeferLoading": null,                                                                                             // 9021
	                                                                                                                    // 9022
	                                                                                                                    // 9023
		/**                                                                                                                // 9024
		 * Number of rows to display on a single page when using pagination. If                                            // 9025
		 * feature enabled (bLengthChange) then the end user will be able to override                                      // 9026
		 * this to a custom setting using a pop-up menu.                                                                   // 9027
		 *  @type int                                                                                                      // 9028
		 *  @default 10                                                                                                    // 9029
		 *  @dtopt Options                                                                                                 // 9030
		 *                                                                                                                 // 9031
		 *  @example                                                                                                       // 9032
		 *    $(document).ready( function() {                                                                              // 9033
		 *      $('#example').dataTable( {                                                                                 // 9034
		 *        "iDisplayLength": 50                                                                                     // 9035
		 *      } );                                                                                                       // 9036
		 *    } )                                                                                                          // 9037
		 */                                                                                                                // 9038
		"iDisplayLength": 10,                                                                                              // 9039
	                                                                                                                    // 9040
	                                                                                                                    // 9041
		/**                                                                                                                // 9042
		 * Define the starting point for data display when using DataTables with                                           // 9043
		 * pagination. Note that this parameter is the number of records, rather than                                      // 9044
		 * the page number, so if you have 10 records per page and want to start on                                        // 9045
		 * the third page, it should be "20".                                                                              // 9046
		 *  @type int                                                                                                      // 9047
		 *  @default 0                                                                                                     // 9048
		 *  @dtopt Options                                                                                                 // 9049
		 *                                                                                                                 // 9050
		 *  @example                                                                                                       // 9051
		 *    $(document).ready( function() {                                                                              // 9052
		 *      $('#example').dataTable( {                                                                                 // 9053
		 *        "iDisplayStart": 20                                                                                      // 9054
		 *      } );                                                                                                       // 9055
		 *    } )                                                                                                          // 9056
		 */                                                                                                                // 9057
		"iDisplayStart": 0,                                                                                                // 9058
	                                                                                                                    // 9059
	                                                                                                                    // 9060
		/**                                                                                                                // 9061
		 * The scroll gap is the amount of scrolling that is left to go before                                             // 9062
		 * DataTables will load the next 'page' of data automatically. You typically                                       // 9063
		 * want a gap which is big enough that the scrolling will be smooth for the                                        // 9064
		 * user, while not so large that it will load more data than need.                                                 // 9065
		 *  @type int                                                                                                      // 9066
		 *  @default 100                                                                                                   // 9067
		 *  @dtopt Options                                                                                                 // 9068
		 *                                                                                                                 // 9069
		 *  @example                                                                                                       // 9070
		 *    $(document).ready( function() {                                                                              // 9071
		 *      $('#example').dataTable( {                                                                                 // 9072
		 *        "bScrollInfinite": true,                                                                                 // 9073
		 *        "bScrollCollapse": true,                                                                                 // 9074
		 *        "sScrollY": "200px",                                                                                     // 9075
		 *        "iScrollLoadGap": 50                                                                                     // 9076
		 *      } );                                                                                                       // 9077
		 *    } );                                                                                                         // 9078
		 */                                                                                                                // 9079
		"iScrollLoadGap": 100,                                                                                             // 9080
	                                                                                                                    // 9081
	                                                                                                                    // 9082
		/**                                                                                                                // 9083
		 * By default DataTables allows keyboard navigation of the table (sorting, paging,                                 // 9084
		 * and filtering) by adding a tabindex attribute to the required elements. This                                    // 9085
		 * allows you to tab through the controls and press the enter key to activate them.                                // 9086
		 * The tabindex is default 0, meaning that the tab follows the flow of the document.                               // 9087
		 * You can overrule this using this parameter if you wish. Use a value of -1 to                                    // 9088
		 * disable built-in keyboard navigation.                                                                           // 9089
		 *  @type int                                                                                                      // 9090
		 *  @default 0                                                                                                     // 9091
		 *  @dtopt Options                                                                                                 // 9092
		 *                                                                                                                 // 9093
		 *  @example                                                                                                       // 9094
		 *    $(document).ready( function() {                                                                              // 9095
		 *      $('#example').dataTable( {                                                                                 // 9096
		 *        "iTabIndex": 1                                                                                           // 9097
		 *      } );                                                                                                       // 9098
		 *    } );                                                                                                         // 9099
		 */                                                                                                                // 9100
		"iTabIndex": 0,                                                                                                    // 9101
	                                                                                                                    // 9102
	                                                                                                                    // 9103
		/**                                                                                                                // 9104
		 * All strings that DataTables uses in the user interface that it creates                                          // 9105
		 * are defined in this object, allowing you to modified them individually or                                       // 9106
		 * completely replace them all as required.                                                                        // 9107
		 *  @namespace                                                                                                     // 9108
		 */                                                                                                                // 9109
		"oLanguage": {                                                                                                     // 9110
			/**                                                                                                               // 9111
			 * Strings that are used for WAI-ARIA labels and controls only (these are not                                     // 9112
			 * actually visible on the page, but will be read by screenreaders, and thus                                      // 9113
			 * must be internationalised as well).                                                                            // 9114
			 *  @namespace                                                                                                    // 9115
			 */                                                                                                               // 9116
			"oAria": {                                                                                                        // 9117
				/**                                                                                                              // 9118
				 * ARIA label that is added to the table headers when the column may be                                          // 9119
				 * sorted ascending by activing the column (click or return when focused).                                       // 9120
				 * Note that the column header is prefixed to this string.                                                       // 9121
				 *  @type string                                                                                                 // 9122
				 *  @default : activate to sort column ascending                                                                 // 9123
				 *  @dtopt Language                                                                                              // 9124
				 *                                                                                                               // 9125
				 *  @example                                                                                                     // 9126
				 *    $(document).ready( function() {                                                                            // 9127
				 *      $('#example').dataTable( {                                                                               // 9128
				 *        "oLanguage": {                                                                                         // 9129
				 *          "oAria": {                                                                                           // 9130
				 *            "sSortAscending": " - click/return to sort ascending"                                              // 9131
				 *          }                                                                                                    // 9132
				 *        }                                                                                                      // 9133
				 *      } );                                                                                                     // 9134
				 *    } );                                                                                                       // 9135
				 */                                                                                                              // 9136
				"sSortAscending": ": activate to sort column ascending",                                                         // 9137
	                                                                                                                    // 9138
				/**                                                                                                              // 9139
				 * ARIA label that is added to the table headers when the column may be                                          // 9140
				 * sorted descending by activing the column (click or return when focused).                                      // 9141
				 * Note that the column header is prefixed to this string.                                                       // 9142
				 *  @type string                                                                                                 // 9143
				 *  @default : activate to sort column ascending                                                                 // 9144
				 *  @dtopt Language                                                                                              // 9145
				 *                                                                                                               // 9146
				 *  @example                                                                                                     // 9147
				 *    $(document).ready( function() {                                                                            // 9148
				 *      $('#example').dataTable( {                                                                               // 9149
				 *        "oLanguage": {                                                                                         // 9150
				 *          "oAria": {                                                                                           // 9151
				 *            "sSortDescending": " - click/return to sort descending"                                            // 9152
				 *          }                                                                                                    // 9153
				 *        }                                                                                                      // 9154
				 *      } );                                                                                                     // 9155
				 *    } );                                                                                                       // 9156
				 */                                                                                                              // 9157
				"sSortDescending": ": activate to sort column descending"                                                        // 9158
			},                                                                                                                // 9159
	                                                                                                                    // 9160
			/**                                                                                                               // 9161
			 * Pagination string used by DataTables for the two built-in pagination                                           // 9162
			 * control types ("two_button" and "full_numbers")                                                                // 9163
			 *  @namespace                                                                                                    // 9164
			 */                                                                                                               // 9165
			"oPaginate": {                                                                                                    // 9166
				/**                                                                                                              // 9167
				 * Text to use when using the 'full_numbers' type of pagination for the                                          // 9168
				 * button to take the user to the first page.                                                                    // 9169
				 *  @type string                                                                                                 // 9170
				 *  @default First                                                                                               // 9171
				 *  @dtopt Language                                                                                              // 9172
				 *                                                                                                               // 9173
				 *  @example                                                                                                     // 9174
				 *    $(document).ready( function() {                                                                            // 9175
				 *      $('#example').dataTable( {                                                                               // 9176
				 *        "oLanguage": {                                                                                         // 9177
				 *          "oPaginate": {                                                                                       // 9178
				 *            "sFirst": "First page"                                                                             // 9179
				 *          }                                                                                                    // 9180
				 *        }                                                                                                      // 9181
				 *      } );                                                                                                     // 9182
				 *    } );                                                                                                       // 9183
				 */                                                                                                              // 9184
				"sFirst": "First",                                                                                               // 9185
			                                                                                                                  // 9186
			                                                                                                                  // 9187
				/**                                                                                                              // 9188
				 * Text to use when using the 'full_numbers' type of pagination for the                                          // 9189
				 * button to take the user to the last page.                                                                     // 9190
				 *  @type string                                                                                                 // 9191
				 *  @default Last                                                                                                // 9192
				 *  @dtopt Language                                                                                              // 9193
				 *                                                                                                               // 9194
				 *  @example                                                                                                     // 9195
				 *    $(document).ready( function() {                                                                            // 9196
				 *      $('#example').dataTable( {                                                                               // 9197
				 *        "oLanguage": {                                                                                         // 9198
				 *          "oPaginate": {                                                                                       // 9199
				 *            "sLast": "Last page"                                                                               // 9200
				 *          }                                                                                                    // 9201
				 *        }                                                                                                      // 9202
				 *      } );                                                                                                     // 9203
				 *    } );                                                                                                       // 9204
				 */                                                                                                              // 9205
				"sLast": "Last",                                                                                                 // 9206
			                                                                                                                  // 9207
			                                                                                                                  // 9208
				/**                                                                                                              // 9209
				 * Text to use for the 'next' pagination button (to take the user to the                                         // 9210
				 * next page).                                                                                                   // 9211
				 *  @type string                                                                                                 // 9212
				 *  @default Next                                                                                                // 9213
				 *  @dtopt Language                                                                                              // 9214
				 *                                                                                                               // 9215
				 *  @example                                                                                                     // 9216
				 *    $(document).ready( function() {                                                                            // 9217
				 *      $('#example').dataTable( {                                                                               // 9218
				 *        "oLanguage": {                                                                                         // 9219
				 *          "oPaginate": {                                                                                       // 9220
				 *            "sNext": "Next page"                                                                               // 9221
				 *          }                                                                                                    // 9222
				 *        }                                                                                                      // 9223
				 *      } );                                                                                                     // 9224
				 *    } );                                                                                                       // 9225
				 */                                                                                                              // 9226
				"sNext": "Next",                                                                                                 // 9227
			                                                                                                                  // 9228
			                                                                                                                  // 9229
				/**                                                                                                              // 9230
				 * Text to use for the 'previous' pagination button (to take the user to                                         // 9231
				 * the previous page).                                                                                           // 9232
				 *  @type string                                                                                                 // 9233
				 *  @default Previous                                                                                            // 9234
				 *  @dtopt Language                                                                                              // 9235
				 *                                                                                                               // 9236
				 *  @example                                                                                                     // 9237
				 *    $(document).ready( function() {                                                                            // 9238
				 *      $('#example').dataTable( {                                                                               // 9239
				 *        "oLanguage": {                                                                                         // 9240
				 *          "oPaginate": {                                                                                       // 9241
				 *            "sPrevious": "Previous page"                                                                       // 9242
				 *          }                                                                                                    // 9243
				 *        }                                                                                                      // 9244
				 *      } );                                                                                                     // 9245
				 *    } );                                                                                                       // 9246
				 */                                                                                                              // 9247
				"sPrevious": "Previous"                                                                                          // 9248
			},                                                                                                                // 9249
		                                                                                                                   // 9250
			/**                                                                                                               // 9251
			 * This string is shown in preference to sZeroRecords when the table is                                           // 9252
			 * empty of data (regardless of filtering). Note that this is an optional                                         // 9253
			 * parameter - if it is not given, the value of sZeroRecords will be used                                         // 9254
			 * instead (either the default or given value).                                                                   // 9255
			 *  @type string                                                                                                  // 9256
			 *  @default No data available in table                                                                           // 9257
			 *  @dtopt Language                                                                                               // 9258
			 *                                                                                                                // 9259
			 *  @example                                                                                                      // 9260
			 *    $(document).ready( function() {                                                                             // 9261
			 *      $('#example').dataTable( {                                                                                // 9262
			 *        "oLanguage": {                                                                                          // 9263
			 *          "sEmptyTable": "No data available in table"                                                           // 9264
			 *        }                                                                                                       // 9265
			 *      } );                                                                                                      // 9266
			 *    } );                                                                                                        // 9267
			 */                                                                                                               // 9268
			"sEmptyTable": "No data available in table",                                                                      // 9269
		                                                                                                                   // 9270
		                                                                                                                   // 9271
			/**                                                                                                               // 9272
			 * This string gives information to the end user about the information that                                       // 9273
			 * is current on display on the page. The _START_, _END_ and _TOTAL_                                              // 9274
			 * variables are all dynamically replaced as the table display updates, and                                       // 9275
			 * can be freely moved or removed as the language requirements change.                                            // 9276
			 *  @type string                                                                                                  // 9277
			 *  @default Showing _START_ to _END_ of _TOTAL_ entries                                                          // 9278
			 *  @dtopt Language                                                                                               // 9279
			 *                                                                                                                // 9280
			 *  @example                                                                                                      // 9281
			 *    $(document).ready( function() {                                                                             // 9282
			 *      $('#example').dataTable( {                                                                                // 9283
			 *        "oLanguage": {                                                                                          // 9284
			 *          "sInfo": "Got a total of _TOTAL_ entries to show (_START_ to _END_)"                                  // 9285
			 *        }                                                                                                       // 9286
			 *      } );                                                                                                      // 9287
			 *    } );                                                                                                        // 9288
			 */                                                                                                               // 9289
			"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",                                                           // 9290
		                                                                                                                   // 9291
		                                                                                                                   // 9292
			/**                                                                                                               // 9293
			 * Display information string for when the table is empty. Typically the                                          // 9294
			 * format of this string should match sInfo.                                                                      // 9295
			 *  @type string                                                                                                  // 9296
			 *  @default Showing 0 to 0 of 0 entries                                                                          // 9297
			 *  @dtopt Language                                                                                               // 9298
			 *                                                                                                                // 9299
			 *  @example                                                                                                      // 9300
			 *    $(document).ready( function() {                                                                             // 9301
			 *      $('#example').dataTable( {                                                                                // 9302
			 *        "oLanguage": {                                                                                          // 9303
			 *          "sInfoEmpty": "No entries to show"                                                                    // 9304
			 *        }                                                                                                       // 9305
			 *      } );                                                                                                      // 9306
			 *    } );                                                                                                        // 9307
			 */                                                                                                               // 9308
			"sInfoEmpty": "Showing 0 to 0 of 0 entries",                                                                      // 9309
		                                                                                                                   // 9310
		                                                                                                                   // 9311
			/**                                                                                                               // 9312
			 * When a user filters the information in a table, this string is appended                                        // 9313
			 * to the information (sInfo) to give an idea of how strong the filtering                                         // 9314
			 * is. The variable _MAX_ is dynamically updated.                                                                 // 9315
			 *  @type string                                                                                                  // 9316
			 *  @default (filtered from _MAX_ total entries)                                                                  // 9317
			 *  @dtopt Language                                                                                               // 9318
			 *                                                                                                                // 9319
			 *  @example                                                                                                      // 9320
			 *    $(document).ready( function() {                                                                             // 9321
			 *      $('#example').dataTable( {                                                                                // 9322
			 *        "oLanguage": {                                                                                          // 9323
			 *          "sInfoFiltered": " - filtering from _MAX_ records"                                                    // 9324
			 *        }                                                                                                       // 9325
			 *      } );                                                                                                      // 9326
			 *    } );                                                                                                        // 9327
			 */                                                                                                               // 9328
			"sInfoFiltered": "(filtered from _MAX_ total entries)",                                                           // 9329
		                                                                                                                   // 9330
		                                                                                                                   // 9331
			/**                                                                                                               // 9332
			 * If can be useful to append extra information to the info string at times,                                      // 9333
			 * and this variable does exactly that. This information will be appended to                                      // 9334
			 * the sInfo (sInfoEmpty and sInfoFiltered in whatever combination they are                                       // 9335
			 * being used) at all times.                                                                                      // 9336
			 *  @type string                                                                                                  // 9337
			 *  @default <i>Empty string</i>                                                                                  // 9338
			 *  @dtopt Language                                                                                               // 9339
			 *                                                                                                                // 9340
			 *  @example                                                                                                      // 9341
			 *    $(document).ready( function() {                                                                             // 9342
			 *      $('#example').dataTable( {                                                                                // 9343
			 *        "oLanguage": {                                                                                          // 9344
			 *          "sInfoPostFix": "All records shown are derived from real information."                                // 9345
			 *        }                                                                                                       // 9346
			 *      } );                                                                                                      // 9347
			 *    } );                                                                                                        // 9348
			 */                                                                                                               // 9349
			"sInfoPostFix": "",                                                                                               // 9350
		                                                                                                                   // 9351
		                                                                                                                   // 9352
			/**                                                                                                               // 9353
			 * DataTables has a build in number formatter (fnFormatNumber) which is used                                      // 9354
			 * to format large numbers that are used in the table information. By                                             // 9355
			 * default a comma is used, but this can be trivially changed to any                                              // 9356
			 * character you wish with this parameter.                                                                        // 9357
			 *  @type string                                                                                                  // 9358
			 *  @default ,                                                                                                    // 9359
			 *  @dtopt Language                                                                                               // 9360
			 *                                                                                                                // 9361
			 *  @example                                                                                                      // 9362
			 *    $(document).ready( function() {                                                                             // 9363
			 *      $('#example').dataTable( {                                                                                // 9364
			 *        "oLanguage": {                                                                                          // 9365
			 *          "sInfoThousands": "'"                                                                                 // 9366
			 *        }                                                                                                       // 9367
			 *      } );                                                                                                      // 9368
			 *    } );                                                                                                        // 9369
			 */                                                                                                               // 9370
			"sInfoThousands": ",",                                                                                            // 9371
		                                                                                                                   // 9372
		                                                                                                                   // 9373
			/**                                                                                                               // 9374
			 * Detail the action that will be taken when the drop down menu for the                                           // 9375
			 * pagination length option is changed. The '_MENU_' variable is replaced                                         // 9376
			 * with a default select list of 10, 25, 50 and 100, and can be replaced                                          // 9377
			 * with a custom select box if required.                                                                          // 9378
			 *  @type string                                                                                                  // 9379
			 *  @default Show _MENU_ entries                                                                                  // 9380
			 *  @dtopt Language                                                                                               // 9381
			 *                                                                                                                // 9382
			 *  @example                                                                                                      // 9383
			 *    // Language change only                                                                                     // 9384
			 *    $(document).ready( function() {                                                                             // 9385
			 *      $('#example').dataTable( {                                                                                // 9386
			 *        "oLanguage": {                                                                                          // 9387
			 *          "sLengthMenu": "Display _MENU_ records"                                                               // 9388
			 *        }                                                                                                       // 9389
			 *      } );                                                                                                      // 9390
			 *    } );                                                                                                        // 9391
			 *                                                                                                                // 9392
			 *  @example                                                                                                      // 9393
			 *    // Language and options change                                                                              // 9394
			 *    $(document).ready( function() {                                                                             // 9395
			 *      $('#example').dataTable( {                                                                                // 9396
			 *        "oLanguage": {                                                                                          // 9397
			 *          "sLengthMenu": 'Display <select>'+                                                                    // 9398
			 *            '<option value="10">10</option>'+                                                                   // 9399
			 *            '<option value="20">20</option>'+                                                                   // 9400
			 *            '<option value="30">30</option>'+                                                                   // 9401
			 *            '<option value="40">40</option>'+                                                                   // 9402
			 *            '<option value="50">50</option>'+                                                                   // 9403
			 *            '<option value="-1">All</option>'+                                                                  // 9404
			 *            '</select> records'                                                                                 // 9405
			 *        }                                                                                                       // 9406
			 *      } );                                                                                                      // 9407
			 *    } );                                                                                                        // 9408
			 */                                                                                                               // 9409
			"sLengthMenu": "Show _MENU_ entries",                                                                             // 9410
		                                                                                                                   // 9411
		                                                                                                                   // 9412
			/**                                                                                                               // 9413
			 * When using Ajax sourced data and during the first draw when DataTables is                                      // 9414
			 * gathering the data, this message is shown in an empty row in the table to                                      // 9415
			 * indicate to the end user the the data is being loaded. Note that this                                          // 9416
			 * parameter is not used when loading data by server-side processing, just                                        // 9417
			 * Ajax sourced data with client-side processing.                                                                 // 9418
			 *  @type string                                                                                                  // 9419
			 *  @default Loading...                                                                                           // 9420
			 *  @dtopt Language                                                                                               // 9421
			 *                                                                                                                // 9422
			 *  @example                                                                                                      // 9423
			 *    $(document).ready( function() {                                                                             // 9424
			 *      $('#example').dataTable( {                                                                                // 9425
			 *        "oLanguage": {                                                                                          // 9426
			 *          "sLoadingRecords": "Please wait - loading..."                                                         // 9427
			 *        }                                                                                                       // 9428
			 *      } );                                                                                                      // 9429
			 *    } );                                                                                                        // 9430
			 */                                                                                                               // 9431
			"sLoadingRecords": "Loading...",                                                                                  // 9432
		                                                                                                                   // 9433
		                                                                                                                   // 9434
			/**                                                                                                               // 9435
			 * Text which is displayed when the table is processing a user action                                             // 9436
			 * (usually a sort command or similar).                                                                           // 9437
			 *  @type string                                                                                                  // 9438
			 *  @default Processing...                                                                                        // 9439
			 *  @dtopt Language                                                                                               // 9440
			 *                                                                                                                // 9441
			 *  @example                                                                                                      // 9442
			 *    $(document).ready( function() {                                                                             // 9443
			 *      $('#example').dataTable( {                                                                                // 9444
			 *        "oLanguage": {                                                                                          // 9445
			 *          "sProcessing": "DataTables is currently busy"                                                         // 9446
			 *        }                                                                                                       // 9447
			 *      } );                                                                                                      // 9448
			 *    } );                                                                                                        // 9449
			 */                                                                                                               // 9450
			"sProcessing": "Processing...",                                                                                   // 9451
		                                                                                                                   // 9452
		                                                                                                                   // 9453
			/**                                                                                                               // 9454
			 * Details the actions that will be taken when the user types into the                                            // 9455
			 * filtering input text box. The variable "_INPUT_", if used in the string,                                       // 9456
			 * is replaced with the HTML text box for the filtering input allowing                                            // 9457
			 * control over where it appears in the string. If "_INPUT_" is not given                                         // 9458
			 * then the input box is appended to the string automatically.                                                    // 9459
			 *  @type string                                                                                                  // 9460
			 *  @default Search:                                                                                              // 9461
			 *  @dtopt Language                                                                                               // 9462
			 *                                                                                                                // 9463
			 *  @example                                                                                                      // 9464
			 *    // Input text box will be appended at the end automatically                                                 // 9465
			 *    $(document).ready( function() {                                                                             // 9466
			 *      $('#example').dataTable( {                                                                                // 9467
			 *        "oLanguage": {                                                                                          // 9468
			 *          "sSearch": "Filter records:"                                                                          // 9469
			 *        }                                                                                                       // 9470
			 *      } );                                                                                                      // 9471
			 *    } );                                                                                                        // 9472
			 *                                                                                                                // 9473
			 *  @example                                                                                                      // 9474
			 *    // Specify where the filter should appear                                                                   // 9475
			 *    $(document).ready( function() {                                                                             // 9476
			 *      $('#example').dataTable( {                                                                                // 9477
			 *        "oLanguage": {                                                                                          // 9478
			 *          "sSearch": "Apply filter _INPUT_ to table"                                                            // 9479
			 *        }                                                                                                       // 9480
			 *      } );                                                                                                      // 9481
			 *    } );                                                                                                        // 9482
			 */                                                                                                               // 9483
			"sSearch": "Search:",                                                                                             // 9484
		                                                                                                                   // 9485
		                                                                                                                   // 9486
			/**                                                                                                               // 9487
			 * All of the language information can be stored in a file on the                                                 // 9488
			 * server-side, which DataTables will look up if this parameter is passed.                                        // 9489
			 * It must store the URL of the language file, which is in a JSON format,                                         // 9490
			 * and the object has the same properties as the oLanguage object in the                                          // 9491
			 * initialiser object (i.e. the above parameters). Please refer to one of                                         // 9492
			 * the example language files to see how this works in action.                                                    // 9493
			 *  @type string                                                                                                  // 9494
			 *  @default <i>Empty string - i.e. disabled</i>                                                                  // 9495
			 *  @dtopt Language                                                                                               // 9496
			 *                                                                                                                // 9497
			 *  @example                                                                                                      // 9498
			 *    $(document).ready( function() {                                                                             // 9499
			 *      $('#example').dataTable( {                                                                                // 9500
			 *        "oLanguage": {                                                                                          // 9501
			 *          "sUrl": "http://www.sprymedia.co.uk/dataTables/lang.txt"                                              // 9502
			 *        }                                                                                                       // 9503
			 *      } );                                                                                                      // 9504
			 *    } );                                                                                                        // 9505
			 */                                                                                                               // 9506
			"sUrl": "",                                                                                                       // 9507
		                                                                                                                   // 9508
		                                                                                                                   // 9509
			/**                                                                                                               // 9510
			 * Text shown inside the table records when the is no information to be                                           // 9511
			 * displayed after filtering. sEmptyTable is shown when there is simply no                                        // 9512
			 * information in the table at all (regardless of filtering).                                                     // 9513
			 *  @type string                                                                                                  // 9514
			 *  @default No matching records found                                                                            // 9515
			 *  @dtopt Language                                                                                               // 9516
			 *                                                                                                                // 9517
			 *  @example                                                                                                      // 9518
			 *    $(document).ready( function() {                                                                             // 9519
			 *      $('#example').dataTable( {                                                                                // 9520
			 *        "oLanguage": {                                                                                          // 9521
			 *          "sZeroRecords": "No records to display"                                                               // 9522
			 *        }                                                                                                       // 9523
			 *      } );                                                                                                      // 9524
			 *    } );                                                                                                        // 9525
			 */                                                                                                               // 9526
			"sZeroRecords": "No matching records found"                                                                       // 9527
		},                                                                                                                 // 9528
	                                                                                                                    // 9529
	                                                                                                                    // 9530
		/**                                                                                                                // 9531
		 * This parameter allows you to have define the global filtering state at                                          // 9532
		 * initialisation time. As an object the "sSearch" parameter must be                                               // 9533
		 * defined, but all other parameters are optional. When "bRegex" is true,                                          // 9534
		 * the search string will be treated as a regular expression, when false                                           // 9535
		 * (default) it will be treated as a straight string. When "bSmart"                                                // 9536
		 * DataTables will use it's smart filtering methods (to word match at                                              // 9537
		 * any point in the data), when false this will not be done.                                                       // 9538
		 *  @namespace                                                                                                     // 9539
		 *  @extends DataTable.models.oSearch                                                                              // 9540
		 *  @dtopt Options                                                                                                 // 9541
		 *                                                                                                                 // 9542
		 *  @example                                                                                                       // 9543
		 *    $(document).ready( function() {                                                                              // 9544
		 *      $('#example').dataTable( {                                                                                 // 9545
		 *        "oSearch": {"sSearch": "Initial search"}                                                                 // 9546
		 *      } );                                                                                                       // 9547
		 *    } )                                                                                                          // 9548
		 */                                                                                                                // 9549
		"oSearch": $.extend( {}, DataTable.models.oSearch ),                                                               // 9550
	                                                                                                                    // 9551
	                                                                                                                    // 9552
		/**                                                                                                                // 9553
		 * By default DataTables will look for the property 'aaData' when obtaining                                        // 9554
		 * data from an Ajax source or for server-side processing - this parameter                                         // 9555
		 * allows that property to be changed. You can use Javascript dotted object                                        // 9556
		 * notation to get a data source for multiple levels of nesting.                                                   // 9557
		 *  @type string                                                                                                   // 9558
		 *  @default aaData                                                                                                // 9559
		 *  @dtopt Options                                                                                                 // 9560
		 *  @dtopt Server-side                                                                                             // 9561
		 *                                                                                                                 // 9562
		 *  @example                                                                                                       // 9563
		 *    // Get data from { "data": [...] }                                                                           // 9564
		 *    $(document).ready( function() {                                                                              // 9565
		 *      var oTable = $('#example').dataTable( {                                                                    // 9566
		 *        "sAjaxSource": "sources/data.txt",                                                                       // 9567
		 *        "sAjaxDataProp": "data"                                                                                  // 9568
		 *      } );                                                                                                       // 9569
		 *    } );                                                                                                         // 9570
		 *                                                                                                                 // 9571
		 *  @example                                                                                                       // 9572
		 *    // Get data from { "data": { "inner": [...] } }                                                              // 9573
		 *    $(document).ready( function() {                                                                              // 9574
		 *      var oTable = $('#example').dataTable( {                                                                    // 9575
		 *        "sAjaxSource": "sources/data.txt",                                                                       // 9576
		 *        "sAjaxDataProp": "data.inner"                                                                            // 9577
		 *      } );                                                                                                       // 9578
		 *    } );                                                                                                         // 9579
		 */                                                                                                                // 9580
		"sAjaxDataProp": "aaData",                                                                                         // 9581
	                                                                                                                    // 9582
	                                                                                                                    // 9583
		/**                                                                                                                // 9584
		 * You can instruct DataTables to load data from an external source using this                                     // 9585
		 * parameter (use aData if you want to pass data in you already have). Simply                                      // 9586
		 * provide a url a JSON object can be obtained from. This object must include                                      // 9587
		 * the parameter 'aaData' which is the data source for the table.                                                  // 9588
		 *  @type string                                                                                                   // 9589
		 *  @default null                                                                                                  // 9590
		 *  @dtopt Options                                                                                                 // 9591
		 *  @dtopt Server-side                                                                                             // 9592
		 *                                                                                                                 // 9593
		 *  @example                                                                                                       // 9594
		 *    $(document).ready( function() {                                                                              // 9595
		 *      $('#example').dataTable( {                                                                                 // 9596
		 *        "sAjaxSource": "http://www.sprymedia.co.uk/dataTables/json.php"                                          // 9597
		 *      } );                                                                                                       // 9598
		 *    } )                                                                                                          // 9599
		 */                                                                                                                // 9600
		"sAjaxSource": null,                                                                                               // 9601
	                                                                                                                    // 9602
	                                                                                                                    // 9603
		/**                                                                                                                // 9604
		 * This parameter can be used to override the default prefix that DataTables                                       // 9605
		 * assigns to a cookie when state saving is enabled.                                                               // 9606
		 *  @type string                                                                                                   // 9607
		 *  @default SpryMedia_DataTables_                                                                                 // 9608
		 *  @dtopt Options                                                                                                 // 9609
		 *                                                                                                                 // 9610
		 *  @example                                                                                                       // 9611
		 *    $(document).ready( function() {                                                                              // 9612
		 *      $('#example').dataTable( {                                                                                 // 9613
		 *        "sCookiePrefix": "my_datatable_",                                                                        // 9614
		 *      } );                                                                                                       // 9615
		 *    } );                                                                                                         // 9616
		 */                                                                                                                // 9617
		"sCookiePrefix": "SpryMedia_DataTables_",                                                                          // 9618
	                                                                                                                    // 9619
	                                                                                                                    // 9620
		/**                                                                                                                // 9621
		 * This initialisation variable allows you to specify exactly where in the                                         // 9622
		 * DOM you want DataTables to inject the various controls it adds to the page                                      // 9623
		 * (for example you might want the pagination controls at the top of the                                           // 9624
		 * table). DIV elements (with or without a custom class) can also be added to                                      // 9625
		 * aid styling. The follow syntax is used:                                                                         // 9626
		 *   <ul>                                                                                                          // 9627
		 *     <li>The following options are allowed:	                                                                     // 9628
		 *       <ul>                                                                                                      // 9629
		 *         <li>'l' - Length changing</li                                                                           // 9630
		 *         <li>'f' - Filtering input</li>                                                                          // 9631
		 *         <li>'t' - The table!</li>                                                                               // 9632
		 *         <li>'i' - Information</li>                                                                              // 9633
		 *         <li>'p' - Pagination</li>                                                                               // 9634
		 *         <li>'r' - pRocessing</li>                                                                               // 9635
		 *       </ul>                                                                                                     // 9636
		 *     </li>                                                                                                       // 9637
		 *     <li>The following constants are allowed:                                                                    // 9638
		 *       <ul>                                                                                                      // 9639
		 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
		 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
		 *       </ul>                                                                                                     // 9642
		 *     </li>                                                                                                       // 9643
		 *     <li>The following syntax is expected:                                                                       // 9644
		 *       <ul>                                                                                                      // 9645
		 *         <li>'&lt;' and '&gt;' - div elements</li>                                                               // 9646
		 *         <li>'&lt;"class" and '&gt;' - div with a class</li>                                                     // 9647
		 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>                                                         // 9648
		 *       </ul>                                                                                                     // 9649
		 *     </li>                                                                                                       // 9650
		 *     <li>Examples:                                                                                               // 9651
		 *       <ul>                                                                                                      // 9652
		 *         <li>'&lt;"wrapper"flipt&gt;'</li>                                                                       // 9653
		 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>                                                                        // 9654
		 *       </ul>                                                                                                     // 9655
		 *     </li>                                                                                                       // 9656
		 *   </ul>                                                                                                         // 9657
		 *  @type string                                                                                                   // 9658
		 *  @default lfrtip <i>(when bJQueryUI is false)</i> <b>or</b>                                                     // 9659
		 *    <"H"lfr>t<"F"ip> <i>(when bJQueryUI is true)</i>                                                             // 9660
		 *  @dtopt Options                                                                                                 // 9661
		 *                                                                                                                 // 9662
		 *  @example                                                                                                       // 9663
		 *    $(document).ready( function() {                                                                              // 9664
		 *      $('#example').dataTable( {                                                                                 // 9665
		 *        "sDom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'                                             // 9666
		 *      } );                                                                                                       // 9667
		 *    } );                                                                                                         // 9668
		 */                                                                                                                // 9669
		"sDom": "lfrtip",                                                                                                  // 9670
	                                                                                                                    // 9671
	                                                                                                                    // 9672
		/**                                                                                                                // 9673
		 * DataTables features two different built-in pagination interaction methods                                       // 9674
		 * ('two_button' or 'full_numbers') which present different page controls to                                       // 9675
		 * the end user. Further methods can be added using the API (see below).                                           // 9676
		 *  @type string                                                                                                   // 9677
		 *  @default two_button                                                                                            // 9678
		 *  @dtopt Options                                                                                                 // 9679
		 *                                                                                                                 // 9680
		 *  @example                                                                                                       // 9681
		 *    $(document).ready( function() {                                                                              // 9682
		 *      $('#example').dataTable( {                                                                                 // 9683
		 *        "sPaginationType": "full_numbers"                                                                        // 9684
		 *      } );                                                                                                       // 9685
		 *    } )                                                                                                          // 9686
		 */                                                                                                                // 9687
		"sPaginationType": "two_button",                                                                                   // 9688
	                                                                                                                    // 9689
	                                                                                                                    // 9690
		/**                                                                                                                // 9691
		 * Enable horizontal scrolling. When a table is too wide to fit into a certain                                     // 9692
		 * layout, or you have a large number of columns in the table, you can enable                                      // 9693
		 * x-scrolling to show the table in a viewport, which can be scrolled. This                                        // 9694
		 * property can be any CSS unit, or a number (in which case it will be treated                                     // 9695
		 * as a pixel measurement).                                                                                        // 9696
		 *  @type string                                                                                                   // 9697
		 *  @default <i>blank string - i.e. disabled</i>                                                                   // 9698
		 *  @dtopt Features                                                                                                // 9699
		 *                                                                                                                 // 9700
		 *  @example                                                                                                       // 9701
		 *    $(document).ready( function() {                                                                              // 9702
		 *      $('#example').dataTable( {                                                                                 // 9703
		 *        "sScrollX": "100%",                                                                                      // 9704
		 *        "bScrollCollapse": true                                                                                  // 9705
		 *      } );                                                                                                       // 9706
		 *    } );                                                                                                         // 9707
		 */                                                                                                                // 9708
		"sScrollX": "",                                                                                                    // 9709
	                                                                                                                    // 9710
	                                                                                                                    // 9711
		/**                                                                                                                // 9712
		 * This property can be used to force a DataTable to use more width than it                                        // 9713
		 * might otherwise do when x-scrolling is enabled. For example if you have a                                       // 9714
		 * table which requires to be well spaced, this parameter is useful for                                            // 9715
		 * "over-sizing" the table, and thus forcing scrolling. This property can by                                       // 9716
		 * any CSS unit, or a number (in which case it will be treated as a pixel                                          // 9717
		 * measurement).                                                                                                   // 9718
		 *  @type string                                                                                                   // 9719
		 *  @default <i>blank string - i.e. disabled</i>                                                                   // 9720
		 *  @dtopt Options                                                                                                 // 9721
		 *                                                                                                                 // 9722
		 *  @example                                                                                                       // 9723
		 *    $(document).ready( function() {                                                                              // 9724
		 *      $('#example').dataTable( {                                                                                 // 9725
		 *        "sScrollX": "100%",                                                                                      // 9726
		 *        "sScrollXInner": "110%"                                                                                  // 9727
		 *      } );                                                                                                       // 9728
		 *    } );                                                                                                         // 9729
		 */                                                                                                                // 9730
		"sScrollXInner": "",                                                                                               // 9731
	                                                                                                                    // 9732
	                                                                                                                    // 9733
		/**                                                                                                                // 9734
		 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable                                      // 9735
		 * to the given height, and enable scrolling for any data which overflows the                                      // 9736
		 * current viewport. This can be used as an alternative to paging to display                                       // 9737
		 * a lot of data in a small area (although paging and scrolling can both be                                        // 9738
		 * enabled at the same time). This property can be any CSS unit, or a number                                       // 9739
		 * (in which case it will be treated as a pixel measurement).                                                      // 9740
		 *  @type string                                                                                                   // 9741
		 *  @default <i>blank string - i.e. disabled</i>                                                                   // 9742
		 *  @dtopt Features                                                                                                // 9743
		 *                                                                                                                 // 9744
		 *  @example                                                                                                       // 9745
		 *    $(document).ready( function() {                                                                              // 9746
		 *      $('#example').dataTable( {                                                                                 // 9747
		 *        "sScrollY": "200px",                                                                                     // 9748
		 *        "bPaginate": false                                                                                       // 9749
		 *      } );                                                                                                       // 9750
		 *    } );                                                                                                         // 9751
		 */                                                                                                                // 9752
		"sScrollY": "",                                                                                                    // 9753
	                                                                                                                    // 9754
	                                                                                                                    // 9755
		/**                                                                                                                // 9756
		 * Set the HTTP method that is used to make the Ajax call for server-side                                          // 9757
		 * processing or Ajax sourced data.                                                                                // 9758
		 *  @type string                                                                                                   // 9759
		 *  @default GET                                                                                                   // 9760
		 *  @dtopt Options                                                                                                 // 9761
		 *  @dtopt Server-side                                                                                             // 9762
		 *                                                                                                                 // 9763
		 *  @example                                                                                                       // 9764
		 *    $(document).ready( function() {                                                                              // 9765
		 *      $('#example').dataTable( {                                                                                 // 9766
		 *        "bServerSide": true,                                                                                     // 9767
		 *        "sAjaxSource": "scripts/post.php",                                                                       // 9768
		 *        "sServerMethod": "POST"                                                                                  // 9769
		 *      } );                                                                                                       // 9770
		 *    } );                                                                                                         // 9771
		 */                                                                                                                // 9772
		"sServerMethod": "GET"                                                                                             // 9773
	};                                                                                                                  // 9774
	                                                                                                                    // 9775
	                                                                                                                    // 9776
	                                                                                                                    // 9777
	/**                                                                                                                 // 9778
	 * Column options that can be given to DataTables at initialisation time.                                           // 9779
	 *  @namespace                                                                                                      // 9780
	 */                                                                                                                 // 9781
	DataTable.defaults.columns = {                                                                                      // 9782
		/**                                                                                                                // 9783
		 * Allows a column's sorting to take multiple columns into account when                                            // 9784
		 * doing a sort. For example first name / last name columns make sense to                                          // 9785
		 * do a multi-column sort over the two columns.                                                                    // 9786
		 *  @type array                                                                                                    // 9787
		 *  @default null <i>Takes the value of the column index automatically</i>                                         // 9788
		 *  @dtopt Columns                                                                                                 // 9789
		 *                                                                                                                 // 9790
		 *  @example                                                                                                       // 9791
		 *    // Using aoColumnDefs                                                                                        // 9792
		 *    $(document).ready( function() {                                                                              // 9793
		 *      $('#example').dataTable( {                                                                                 // 9794
		 *        "aoColumnDefs": [                                                                                        // 9795
		 *          { "aDataSort": [ 0, 1 ], "aTargets": [ 0 ] },                                                          // 9796
		 *          { "aDataSort": [ 1, 0 ], "aTargets": [ 1 ] },                                                          // 9797
		 *          { "aDataSort": [ 2, 3, 4 ], "aTargets": [ 2 ] }                                                        // 9798
		 *        ]                                                                                                        // 9799
		 *      } );                                                                                                       // 9800
		 *    } );                                                                                                         // 9801
		 *                                                                                                                 // 9802
		 *  @example                                                                                                       // 9803
		 *    // Using aoColumns                                                                                           // 9804
		 *    $(document).ready( function() {                                                                              // 9805
		 *      $('#example').dataTable( {                                                                                 // 9806
		 *        "aoColumns": [                                                                                           // 9807
		 *          { "aDataSort": [ 0, 1 ] },                                                                             // 9808
		 *          { "aDataSort": [ 1, 0 ] },                                                                             // 9809
		 *          { "aDataSort": [ 2, 3, 4 ] },                                                                          // 9810
		 *          null,                                                                                                  // 9811
		 *          null                                                                                                   // 9812
		 *        ]                                                                                                        // 9813
		 *      } );                                                                                                       // 9814
		 *    } );                                                                                                         // 9815
		 */                                                                                                                // 9816
		"aDataSort": null,                                                                                                 // 9817
	                                                                                                                    // 9818
	                                                                                                                    // 9819
		/**                                                                                                                // 9820
		 * You can control the default sorting direction, and even alter the behaviour                                     // 9821
		 * of the sort handler (i.e. only allow ascending sorting etc) using this                                          // 9822
		 * parameter.                                                                                                      // 9823
		 *  @type array                                                                                                    // 9824
		 *  @default [ 'asc', 'desc' ]                                                                                     // 9825
		 *  @dtopt Columns                                                                                                 // 9826
		 *                                                                                                                 // 9827
		 *  @example                                                                                                       // 9828
		 *    // Using aoColumnDefs                                                                                        // 9829
		 *    $(document).ready( function() {                                                                              // 9830
		 *      $('#example').dataTable( {                                                                                 // 9831
		 *        "aoColumnDefs": [                                                                                        // 9832
		 *          { "asSorting": [ "asc" ], "aTargets": [ 1 ] },                                                         // 9833
		 *          { "asSorting": [ "desc", "asc", "asc" ], "aTargets": [ 2 ] },                                          // 9834
		 *          { "asSorting": [ "desc" ], "aTargets": [ 3 ] }                                                         // 9835
		 *        ]                                                                                                        // 9836
		 *      } );                                                                                                       // 9837
		 *    } );                                                                                                         // 9838
		 *                                                                                                                 // 9839
		 *  @example                                                                                                       // 9840
		 *    // Using aoColumns                                                                                           // 9841
		 *    $(document).ready( function() {                                                                              // 9842
		 *      $('#example').dataTable( {                                                                                 // 9843
		 *        "aoColumns": [                                                                                           // 9844
		 *          null,                                                                                                  // 9845
		 *          { "asSorting": [ "asc" ] },                                                                            // 9846
		 *          { "asSorting": [ "desc", "asc", "asc" ] },                                                             // 9847
		 *          { "asSorting": [ "desc" ] },                                                                           // 9848
		 *          null                                                                                                   // 9849
		 *        ]                                                                                                        // 9850
		 *      } );                                                                                                       // 9851
		 *    } );                                                                                                         // 9852
		 */                                                                                                                // 9853
		"asSorting": [ 'asc', 'desc' ],                                                                                    // 9854
	                                                                                                                    // 9855
	                                                                                                                    // 9856
		/**                                                                                                                // 9857
		 * Enable or disable filtering on the data in this column.                                                         // 9858
		 *  @type boolean                                                                                                  // 9859
		 *  @default true                                                                                                  // 9860
		 *  @dtopt Columns                                                                                                 // 9861
		 *                                                                                                                 // 9862
		 *  @example                                                                                                       // 9863
		 *    // Using aoColumnDefs                                                                                        // 9864
		 *    $(document).ready( function() {                                                                              // 9865
		 *      $('#example').dataTable( {                                                                                 // 9866
		 *        "aoColumnDefs": [                                                                                        // 9867
		 *          { "bSearchable": false, "aTargets": [ 0 ] }                                                            // 9868
		 *        ] } );                                                                                                   // 9869
		 *    } );                                                                                                         // 9870
		 *                                                                                                                 // 9871
		 *  @example                                                                                                       // 9872
		 *    // Using aoColumns                                                                                           // 9873
		 *    $(document).ready( function() {                                                                              // 9874
		 *      $('#example').dataTable( {                                                                                 // 9875
		 *        "aoColumns": [                                                                                           // 9876
		 *          { "bSearchable": false },                                                                              // 9877
		 *          null,                                                                                                  // 9878
		 *          null,                                                                                                  // 9879
		 *          null,                                                                                                  // 9880
		 *          null                                                                                                   // 9881
		 *        ] } );                                                                                                   // 9882
		 *    } );                                                                                                         // 9883
		 */                                                                                                                // 9884
		"bSearchable": true,                                                                                               // 9885
	                                                                                                                    // 9886
	                                                                                                                    // 9887
		/**                                                                                                                // 9888
		 * Enable or disable sorting on this column.                                                                       // 9889
		 *  @type boolean                                                                                                  // 9890
		 *  @default true                                                                                                  // 9891
		 *  @dtopt Columns                                                                                                 // 9892
		 *                                                                                                                 // 9893
		 *  @example                                                                                                       // 9894
		 *    // Using aoColumnDefs                                                                                        // 9895
		 *    $(document).ready( function() {                                                                              // 9896
		 *      $('#example').dataTable( {                                                                                 // 9897
		 *        "aoColumnDefs": [                                                                                        // 9898
		 *          { "bSortable": false, "aTargets": [ 0 ] }                                                              // 9899
		 *        ] } );                                                                                                   // 9900
		 *    } );                                                                                                         // 9901
		 *                                                                                                                 // 9902
		 *  @example                                                                                                       // 9903
		 *    // Using aoColumns                                                                                           // 9904
		 *    $(document).ready( function() {                                                                              // 9905
		 *      $('#example').dataTable( {                                                                                 // 9906
		 *        "aoColumns": [                                                                                           // 9907
		 *          { "bSortable": false },                                                                                // 9908
		 *          null,                                                                                                  // 9909
		 *          null,                                                                                                  // 9910
		 *          null,                                                                                                  // 9911
		 *          null                                                                                                   // 9912
		 *        ] } );                                                                                                   // 9913
		 *    } );                                                                                                         // 9914
		 */                                                                                                                // 9915
		"bSortable": true,                                                                                                 // 9916
	                                                                                                                    // 9917
	                                                                                                                    // 9918
		/**                                                                                                                // 9919
		 * <code>Deprecated</code> When using fnRender() for a column, you may wish                                        // 9920
		 * to use the original data (before rendering) for sorting and filtering                                           // 9921
		 * (the default is to used the rendered data that the user can see). This                                          // 9922
		 * may be useful for dates etc.                                                                                    // 9923
		 *                                                                                                                 // 9924
		 * Please note that this option has now been deprecated and will be removed                                        // 9925
		 * in the next version of DataTables. Please use mRender / mData rather than                                       // 9926
		 * fnRender.                                                                                                       // 9927
		 *  @type boolean                                                                                                  // 9928
		 *  @default true                                                                                                  // 9929
		 *  @dtopt Columns                                                                                                 // 9930
		 *  @deprecated                                                                                                    // 9931
		 */                                                                                                                // 9932
		"bUseRendered": true,                                                                                              // 9933
	                                                                                                                    // 9934
	                                                                                                                    // 9935
		/**                                                                                                                // 9936
		 * Enable or disable the display of this column.                                                                   // 9937
		 *  @type boolean                                                                                                  // 9938
		 *  @default true                                                                                                  // 9939
		 *  @dtopt Columns                                                                                                 // 9940
		 *                                                                                                                 // 9941
		 *  @example                                                                                                       // 9942
		 *    // Using aoColumnDefs                                                                                        // 9943
		 *    $(document).ready( function() {                                                                              // 9944
		 *      $('#example').dataTable( {                                                                                 // 9945
		 *        "aoColumnDefs": [                                                                                        // 9946
		 *          { "bVisible": false, "aTargets": [ 0 ] }                                                               // 9947
		 *        ] } );                                                                                                   // 9948
		 *    } );                                                                                                         // 9949
		 *                                                                                                                 // 9950
		 *  @example                                                                                                       // 9951
		 *    // Using aoColumns                                                                                           // 9952
		 *    $(document).ready( function() {                                                                              // 9953
		 *      $('#example').dataTable( {                                                                                 // 9954
		 *        "aoColumns": [                                                                                           // 9955
		 *          { "bVisible": false },                                                                                 // 9956
		 *          null,                                                                                                  // 9957
		 *          null,                                                                                                  // 9958
		 *          null,                                                                                                  // 9959
		 *          null                                                                                                   // 9960
		 *        ] } );                                                                                                   // 9961
		 *    } );                                                                                                         // 9962
		 */                                                                                                                // 9963
		"bVisible": true,                                                                                                  // 9964
		                                                                                                                   // 9965
		                                                                                                                   // 9966
		/**                                                                                                                // 9967
		 * Developer definable function that is called whenever a cell is created (Ajax source,                            // 9968
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender                           // 9969
		 * allowing you to modify the DOM element (add background colour for example) when the                             // 9970
		 * element is available.                                                                                           // 9971
		 *  @type function                                                                                                 // 9972
		 *  @param {element} nTd The TD node that has been created                                                         // 9973
		 *  @param {*} sData The Data for the cell                                                                         // 9974
		 *  @param {array|object} oData The data for the whole row                                                         // 9975
		 *  @param {int} iRow The row index for the aoData data store                                                      // 9976
		 *  @param {int} iCol The column index for aoColumns                                                               // 9977
		 *  @dtopt Columns                                                                                                 // 9978
		 *                                                                                                                 // 9979
		 *  @example                                                                                                       // 9980
		 *    $(document).ready( function() {                                                                              // 9981
		 *      $('#example').dataTable( {                                                                                 // 9982
		 *        "aoColumnDefs": [ {                                                                                      // 9983
		 *          "aTargets": [3],                                                                                       // 9984
		 *          "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {                                            // 9985
		 *            if ( sData == "1.7" ) {                                                                              // 9986
		 *              $(nTd).css('color', 'blue')                                                                        // 9987
		 *            }                                                                                                    // 9988
		 *          }                                                                                                      // 9989
		 *        } ]                                                                                                      // 9990
		 *      });                                                                                                        // 9991
		 *    } );                                                                                                         // 9992
		 */                                                                                                                // 9993
		"fnCreatedCell": null,                                                                                             // 9994
	                                                                                                                    // 9995
	                                                                                                                    // 9996
		/**                                                                                                                // 9997
		 * <code>Deprecated</code> Custom display function that will be called for the                                     // 9998
		 * display of each cell in this column.                                                                            // 9999
		 *                                                                                                                 // 10000
		 * Please note that this option has now been deprecated and will be removed                                        // 10001
		 * in the next version of DataTables. Please use mRender / mData rather than                                       // 10002
		 * fnRender.                                                                                                       // 10003
		 *  @type function                                                                                                 // 10004
		 *  @param {object} o Object with the following parameters:                                                        // 10005
		 *  @param {int}    o.iDataRow The row in aoData                                                                   // 10006
		 *  @param {int}    o.iDataColumn The column in question                                                           // 10007
		 *  @param {array}  o.aData The data for the row in question                                                       // 10008
		 *  @param {object} o.oSettings The settings object for this DataTables instance                                   // 10009
		 *  @param {object} o.mDataProp The data property used for this column                                             // 10010
		 *  @param {*}      val The current cell value                                                                     // 10011
		 *  @returns {string} The string you which to use in the display                                                   // 10012
		 *  @dtopt Columns                                                                                                 // 10013
		 *  @deprecated                                                                                                    // 10014
		 */                                                                                                                // 10015
		"fnRender": null,                                                                                                  // 10016
	                                                                                                                    // 10017
	                                                                                                                    // 10018
		/**                                                                                                                // 10019
		 * The column index (starting from 0!) that you wish a sort to be performed                                        // 10020
		 * upon when this column is selected for sorting. This can be used for sorting                                     // 10021
		 * on hidden columns for example.                                                                                  // 10022
		 *  @type int                                                                                                      // 10023
		 *  @default -1 <i>Use automatically calculated column index</i>                                                   // 10024
		 *  @dtopt Columns                                                                                                 // 10025
		 *                                                                                                                 // 10026
		 *  @example                                                                                                       // 10027
		 *    // Using aoColumnDefs                                                                                        // 10028
		 *    $(document).ready( function() {                                                                              // 10029
		 *      $('#example').dataTable( {                                                                                 // 10030
		 *        "aoColumnDefs": [                                                                                        // 10031
		 *          { "iDataSort": 1, "aTargets": [ 0 ] }                                                                  // 10032
		 *        ]                                                                                                        // 10033
		 *      } );                                                                                                       // 10034
		 *    } );                                                                                                         // 10035
		 *                                                                                                                 // 10036
		 *  @example                                                                                                       // 10037
		 *    // Using aoColumns                                                                                           // 10038
		 *    $(document).ready( function() {                                                                              // 10039
		 *      $('#example').dataTable( {                                                                                 // 10040
		 *        "aoColumns": [                                                                                           // 10041
		 *          { "iDataSort": 1 },                                                                                    // 10042
		 *          null,                                                                                                  // 10043
		 *          null,                                                                                                  // 10044
		 *          null,                                                                                                  // 10045
		 *          null                                                                                                   // 10046
		 *        ]                                                                                                        // 10047
		 *      } );                                                                                                       // 10048
		 *    } );                                                                                                         // 10049
		 */                                                                                                                // 10050
		"iDataSort": -1,                                                                                                   // 10051
	                                                                                                                    // 10052
	                                                                                                                    // 10053
		/**                                                                                                                // 10054
		 * This parameter has been replaced by mData in DataTables to ensure naming                                        // 10055
		 * consistency. mDataProp can still be used, as there is backwards compatibility                                   // 10056
		 * in DataTables for this option, but it is strongly recommended that you use                                      // 10057
		 * mData in preference to mDataProp.                                                                               // 10058
		 *  @name DataTable.defaults.columns.mDataProp                                                                     // 10059
		 */                                                                                                                // 10060
	                                                                                                                    // 10061
	                                                                                                                    // 10062
		/**                                                                                                                // 10063
		 * This property can be used to read data from any JSON data source property,                                      // 10064
		 * including deeply nested objects / properties. mData can be given in a                                           // 10065
		 * number of different ways which effect its behaviour:                                                            // 10066
		 *   <ul>                                                                                                          // 10067
		 *     <li>integer - treated as an array index for the data source. This is the                                    // 10068
		 *       default that DataTables uses (incrementally increased for each column).</li>                              // 10069
		 *     <li>string - read an object property from the data source. Note that you can                                // 10070
		 *       use Javascript dotted notation to read deep properties / arrays from the                                  // 10071
		 *       data source.</li>                                                                                         // 10072
		 *     <li>null - the sDefaultContent option will be used for the cell (null                                       // 10073
		 *       by default, so you will need to specify the default content you want -                                    // 10074
		 *       typically an empty string). This can be useful on generated columns such                                  // 10075
		 *       as edit / delete action columns.</li>                                                                     // 10076
		 *     <li>function - the function given will be executed whenever DataTables                                      // 10077
		 *       needs to set or get the data for a cell in the column. The function                                       // 10078
		 *       takes three parameters:                                                                                   // 10079
		 *       <ul>                                                                                                      // 10080
		 *         <li>{array|object} The data source for the row</li>                                                     // 10081
		 *         <li>{string} The type call data requested - this will be 'set' when                                     // 10082
		 *           setting data or 'filter', 'display', 'type', 'sort' or undefined when                                 // 10083
		 *           gathering data. Note that when <i>undefined</i> is given for the type                                 // 10084
		 *           DataTables expects to get the raw data for the object back</li>                                       // 10085
		 *         <li>{*} Data to set when the second parameter is 'set'.</li>                                            // 10086
		 *       </ul>                                                                                                     // 10087
		 *       The return value from the function is not required when 'set' is the type                                 // 10088
		 *       of call, but otherwise the return is what will be used for the data                                       // 10089
		 *       requested.</li>                                                                                           // 10090
		 *    </ul>                                                                                                        // 10091
		 *                                                                                                                 // 10092
		 * Note that prior to DataTables 1.9.2 mData was called mDataProp. The name change                                 // 10093
		 * reflects the flexibility of this property and is consistent with the naming of                                  // 10094
		 * mRender. If 'mDataProp' is given, then it will still be used by DataTables, as                                  // 10095
		 * it automatically maps the old name to the new if required.                                                      // 10096
		 *  @type string|int|function|null                                                                                 // 10097
		 *  @default null <i>Use automatically calculated column index</i>                                                 // 10098
		 *  @dtopt Columns                                                                                                 // 10099
		 *                                                                                                                 // 10100
		 *  @example                                                                                                       // 10101
		 *    // Read table data from objects                                                                              // 10102
		 *    $(document).ready( function() {                                                                              // 10103
		 *      var oTable = $('#example').dataTable( {                                                                    // 10104
		 *        "sAjaxSource": "sources/deep.txt",                                                                       // 10105
		 *        "aoColumns": [                                                                                           // 10106
		 *          { "mData": "engine" },                                                                                 // 10107
		 *          { "mData": "browser" },                                                                                // 10108
		 *          { "mData": "platform.inner" },                                                                         // 10109
		 *          { "mData": "platform.details.0" },                                                                     // 10110
		 *          { "mData": "platform.details.1" }                                                                      // 10111
		 *        ]                                                                                                        // 10112
		 *      } );                                                                                                       // 10113
		 *    } );                                                                                                         // 10114
		 *                                                                                                                 // 10115
		 *  @example                                                                                                       // 10116
		 *    // Using mData as a function to provide different information for                                            // 10117
		 *    // sorting, filtering and display. In this case, currency (price)                                            // 10118
		 *    $(document).ready( function() {                                                                              // 10119
		 *      var oTable = $('#example').dataTable( {                                                                    // 10120
		 *        "aoColumnDefs": [ {                                                                                      // 10121
		 *          "aTargets": [ 0 ],                                                                                     // 10122
		 *          "mData": function ( source, type, val ) {                                                              // 10123
		 *            if (type === 'set') {                                                                                // 10124
		 *              source.price = val;                                                                                // 10125
		 *              // Store the computed dislay and filter values for efficiency                                      // 10126
		 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);                                       // 10127
		 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;                               // 10128
		 *              return;                                                                                            // 10129
		 *            }                                                                                                    // 10130
		 *            else if (type === 'display') {                                                                       // 10131
		 *              return source.price_display;                                                                       // 10132
		 *            }                                                                                                    // 10133
		 *            else if (type === 'filter') {                                                                        // 10134
		 *              return source.price_filter;                                                                        // 10135
		 *            }                                                                                                    // 10136
		 *            // 'sort', 'type' and undefined all just use the integer                                             // 10137
		 *            return source.price;                                                                                 // 10138
		 *          }                                                                                                      // 10139
		 *        } ]                                                                                                      // 10140
		 *      } );                                                                                                       // 10141
		 *    } );                                                                                                         // 10142
		 */                                                                                                                // 10143
		"mData": null,                                                                                                     // 10144
	                                                                                                                    // 10145
	                                                                                                                    // 10146
		/**                                                                                                                // 10147
		 * This property is the rendering partner to mData and it is suggested that                                        // 10148
		 * when you want to manipulate data for display (including filtering, sorting etc)                                 // 10149
		 * but not altering the underlying data for the table, use this property. mData                                    // 10150
		 * can actually do everything this property can and more, but this parameter is                                    // 10151
		 * easier to use since there is no 'set' option. Like mData is can be given                                        // 10152
		 * in a number of different ways to effect its behaviour, with the addition of                                     // 10153
		 * supporting array syntax for easy outputting of arrays (including arrays of                                      // 10154
		 * objects):                                                                                                       // 10155
		 *   <ul>                                                                                                          // 10156
		 *     <li>integer - treated as an array index for the data source. This is the                                    // 10157
		 *       default that DataTables uses (incrementally increased for each column).</li>                              // 10158
		 *     <li>string - read an object property from the data source. Note that you can                                // 10159
		 *       use Javascript dotted notation to read deep properties / arrays from the                                  // 10160
		 *       data source and also array brackets to indicate that the data reader should                               // 10161
		 *       loop over the data source array. When characters are given between the array                              // 10162
		 *       brackets, these characters are used to join the data source array together.                               // 10163
		 *       For example: "accounts[, ].name" would result in a comma separated list with                              // 10164
		 *       the 'name' value from the 'accounts' array of objects.</li>                                               // 10165
		 *     <li>function - the function given will be executed whenever DataTables                                      // 10166
		 *       needs to set or get the data for a cell in the column. The function                                       // 10167
		 *       takes three parameters:                                                                                   // 10168
		 *       <ul>                                                                                                      // 10169
		 *         <li>{array|object} The data source for the row (based on mData)</li>                                    // 10170
		 *         <li>{string} The type call data requested - this will be 'filter', 'display',                           // 10171
		 *           'type' or 'sort'.</li>                                                                                // 10172
		 *         <li>{array|object} The full data source for the row (not based on mData)</li>                           // 10173
		 *       </ul>                                                                                                     // 10174
		 *       The return value from the function is what will be used for the data                                      // 10175
		 *       requested.</li>                                                                                           // 10176
		 *    </ul>                                                                                                        // 10177
		 *  @type string|int|function|null                                                                                 // 10178
		 *  @default null <i>Use mData</i>                                                                                 // 10179
		 *  @dtopt Columns                                                                                                 // 10180
		 *                                                                                                                 // 10181
		 *  @example                                                                                                       // 10182
		 *    // Create a comma separated list from an array of objects                                                    // 10183
		 *    $(document).ready( function() {                                                                              // 10184
		 *      var oTable = $('#example').dataTable( {                                                                    // 10185
		 *        "sAjaxSource": "sources/deep.txt",                                                                       // 10186
		 *        "aoColumns": [                                                                                           // 10187
		 *          { "mData": "engine" },                                                                                 // 10188
		 *          { "mData": "browser" },                                                                                // 10189
		 *          {                                                                                                      // 10190
		 *            "mData": "platform",                                                                                 // 10191
		 *            "mRender": "[, ].name"                                                                               // 10192
		 *          }                                                                                                      // 10193
		 *        ]                                                                                                        // 10194
		 *      } );                                                                                                       // 10195
		 *    } );                                                                                                         // 10196
		 *                                                                                                                 // 10197
		 *  @example                                                                                                       // 10198
		 *    // Use as a function to create a link from the data source                                                   // 10199
		 *    $(document).ready( function() {                                                                              // 10200
		 *      var oTable = $('#example').dataTable( {                                                                    // 10201
		 *        "aoColumnDefs": [                                                                                        // 10202
		 *        {                                                                                                        // 10203
		 *          "aTargets": [ 0 ],                                                                                     // 10204
		 *          "mData": "download_link",                                                                              // 10205
		 *          "mRender": function ( data, type, full ) {                                                             // 10206
		 *            return '<a href="'+data+'">Download</a>';                                                            // 10207
		 *          }                                                                                                      // 10208
		 *        ]                                                                                                        // 10209
		 *      } );                                                                                                       // 10210
		 *    } );                                                                                                         // 10211
		 */                                                                                                                // 10212
		"mRender": null,                                                                                                   // 10213
	                                                                                                                    // 10214
	                                                                                                                    // 10215
		/**                                                                                                                // 10216
		 * Change the cell type created for the column - either TD cells or TH cells. This                                 // 10217
		 * can be useful as TH cells have semantic meaning in the table body, allowing them                                // 10218
		 * to act as a header for a row (you may wish to add scope='row' to the TH elements).                              // 10219
		 *  @type string                                                                                                   // 10220
		 *  @default td                                                                                                    // 10221
		 *  @dtopt Columns                                                                                                 // 10222
		 *                                                                                                                 // 10223
		 *  @example                                                                                                       // 10224
		 *    // Make the first column use TH cells                                                                        // 10225
		 *    $(document).ready( function() {                                                                              // 10226
		 *      var oTable = $('#example').dataTable( {                                                                    // 10227
		 *        "aoColumnDefs": [ {                                                                                      // 10228
		 *          "aTargets": [ 0 ],                                                                                     // 10229
		 *          "sCellType": "th"                                                                                      // 10230
		 *        } ]                                                                                                      // 10231
		 *      } );                                                                                                       // 10232
		 *    } );                                                                                                         // 10233
		 */                                                                                                                // 10234
		"sCellType": "td",                                                                                                 // 10235
	                                                                                                                    // 10236
	                                                                                                                    // 10237
		/**                                                                                                                // 10238
		 * Class to give to each cell in this column.                                                                      // 10239
		 *  @type string                                                                                                   // 10240
		 *  @default <i>Empty string</i>                                                                                   // 10241
		 *  @dtopt Columns                                                                                                 // 10242
		 *                                                                                                                 // 10243
		 *  @example                                                                                                       // 10244
		 *    // Using aoColumnDefs                                                                                        // 10245
		 *    $(document).ready( function() {                                                                              // 10246
		 *      $('#example').dataTable( {                                                                                 // 10247
		 *        "aoColumnDefs": [                                                                                        // 10248
		 *          { "sClass": "my_class", "aTargets": [ 0 ] }                                                            // 10249
		 *        ]                                                                                                        // 10250
		 *      } );                                                                                                       // 10251
		 *    } );                                                                                                         // 10252
		 *                                                                                                                 // 10253
		 *  @example                                                                                                       // 10254
		 *    // Using aoColumns                                                                                           // 10255
		 *    $(document).ready( function() {                                                                              // 10256
		 *      $('#example').dataTable( {                                                                                 // 10257
		 *        "aoColumns": [                                                                                           // 10258
		 *          { "sClass": "my_class" },                                                                              // 10259
		 *          null,                                                                                                  // 10260
		 *          null,                                                                                                  // 10261
		 *          null,                                                                                                  // 10262
		 *          null                                                                                                   // 10263
		 *        ]                                                                                                        // 10264
		 *      } );                                                                                                       // 10265
		 *    } );                                                                                                         // 10266
		 */                                                                                                                // 10267
		"sClass": "",                                                                                                      // 10268
		                                                                                                                   // 10269
		/**                                                                                                                // 10270
		 * When DataTables calculates the column widths to assign to each column,                                          // 10271
		 * it finds the longest string in each column and then constructs a                                                // 10272
		 * temporary table and reads the widths from that. The problem with this                                           // 10273
		 * is that "mmm" is much wider then "iiii", but the latter is a longer                                             // 10274
		 * string - thus the calculation can go wrong (doing it properly and putting                                       // 10275
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as                                          // 10276
		 * a "work around" we provide this option. It will append its value to the                                         // 10277
		 * text that is found to be the longest string for the column - i.e. padding.                                      // 10278
		 * Generally you shouldn't need this, and it is not documented on the                                              // 10279
		 * general DataTables.net documentation                                                                            // 10280
		 *  @type string                                                                                                   // 10281
		 *  @default <i>Empty string<i>                                                                                    // 10282
		 *  @dtopt Columns                                                                                                 // 10283
		 *                                                                                                                 // 10284
		 *  @example                                                                                                       // 10285
		 *    // Using aoColumns                                                                                           // 10286
		 *    $(document).ready( function() {                                                                              // 10287
		 *      $('#example').dataTable( {                                                                                 // 10288
		 *        "aoColumns": [                                                                                           // 10289
		 *          null,                                                                                                  // 10290
		 *          null,                                                                                                  // 10291
		 *          null,                                                                                                  // 10292
		 *          {                                                                                                      // 10293
		 *            "sContentPadding": "mmm"                                                                             // 10294
		 *          }                                                                                                      // 10295
		 *        ]                                                                                                        // 10296
		 *      } );                                                                                                       // 10297
		 *    } );                                                                                                         // 10298
		 */                                                                                                                // 10299
		"sContentPadding": "",                                                                                             // 10300
	                                                                                                                    // 10301
	                                                                                                                    // 10302
		/**                                                                                                                // 10303
		 * Allows a default value to be given for a column's data, and will be used                                        // 10304
		 * whenever a null data source is encountered (this can be because mData                                           // 10305
		 * is set to null, or because the data source itself is null).                                                     // 10306
		 *  @type string                                                                                                   // 10307
		 *  @default null                                                                                                  // 10308
		 *  @dtopt Columns                                                                                                 // 10309
		 *                                                                                                                 // 10310
		 *  @example                                                                                                       // 10311
		 *    // Using aoColumnDefs                                                                                        // 10312
		 *    $(document).ready( function() {                                                                              // 10313
		 *      $('#example').dataTable( {                                                                                 // 10314
		 *        "aoColumnDefs": [                                                                                        // 10315
		 *          {                                                                                                      // 10316
		 *            "mData": null,                                                                                       // 10317
		 *            "sDefaultContent": "Edit",                                                                           // 10318
		 *            "aTargets": [ -1 ]                                                                                   // 10319
		 *          }                                                                                                      // 10320
		 *        ]                                                                                                        // 10321
		 *      } );                                                                                                       // 10322
		 *    } );                                                                                                         // 10323
		 *                                                                                                                 // 10324
		 *  @example                                                                                                       // 10325
		 *    // Using aoColumns                                                                                           // 10326
		 *    $(document).ready( function() {                                                                              // 10327
		 *      $('#example').dataTable( {                                                                                 // 10328
		 *        "aoColumns": [                                                                                           // 10329
		 *          null,                                                                                                  // 10330
		 *          null,                                                                                                  // 10331
		 *          null,                                                                                                  // 10332
		 *          {                                                                                                      // 10333
		 *            "mData": null,                                                                                       // 10334
		 *            "sDefaultContent": "Edit"                                                                            // 10335
		 *          }                                                                                                      // 10336
		 *        ]                                                                                                        // 10337
		 *      } );                                                                                                       // 10338
		 *    } );                                                                                                         // 10339
		 */                                                                                                                // 10340
		"sDefaultContent": null,                                                                                           // 10341
	                                                                                                                    // 10342
	                                                                                                                    // 10343
		/**                                                                                                                // 10344
		 * This parameter is only used in DataTables' server-side processing. It can                                       // 10345
		 * be exceptionally useful to know what columns are being displayed on the                                         // 10346
		 * client side, and to map these to database fields. When defined, the names                                       // 10347
		 * also allow DataTables to reorder information from the server if it comes                                        // 10348
		 * back in an unexpected order (i.e. if you switch your columns around on the                                      // 10349
		 * client-side, your server-side code does not also need updating).                                                // 10350
		 *  @type string                                                                                                   // 10351
		 *  @default <i>Empty string</i>                                                                                   // 10352
		 *  @dtopt Columns                                                                                                 // 10353
		 *                                                                                                                 // 10354
		 *  @example                                                                                                       // 10355
		 *    // Using aoColumnDefs                                                                                        // 10356
		 *    $(document).ready( function() {                                                                              // 10357
		 *      $('#example').dataTable( {                                                                                 // 10358
		 *        "aoColumnDefs": [                                                                                        // 10359
		 *          { "sName": "engine", "aTargets": [ 0 ] },                                                              // 10360
		 *          { "sName": "browser", "aTargets": [ 1 ] },                                                             // 10361
		 *          { "sName": "platform", "aTargets": [ 2 ] },                                                            // 10362
		 *          { "sName": "version", "aTargets": [ 3 ] },                                                             // 10363
		 *          { "sName": "grade", "aTargets": [ 4 ] }                                                                // 10364
		 *        ]                                                                                                        // 10365
		 *      } );                                                                                                       // 10366
		 *    } );                                                                                                         // 10367
		 *                                                                                                                 // 10368
		 *  @example                                                                                                       // 10369
		 *    // Using aoColumns                                                                                           // 10370
		 *    $(document).ready( function() {                                                                              // 10371
		 *      $('#example').dataTable( {                                                                                 // 10372
		 *        "aoColumns": [                                                                                           // 10373
		 *          { "sName": "engine" },                                                                                 // 10374
		 *          { "sName": "browser" },                                                                                // 10375
		 *          { "sName": "platform" },                                                                               // 10376
		 *          { "sName": "version" },                                                                                // 10377
		 *          { "sName": "grade" }                                                                                   // 10378
		 *        ]                                                                                                        // 10379
		 *      } );                                                                                                       // 10380
		 *    } );                                                                                                         // 10381
		 */                                                                                                                // 10382
		"sName": "",                                                                                                       // 10383
	                                                                                                                    // 10384
	                                                                                                                    // 10385
		/**                                                                                                                // 10386
		 * Defines a data source type for the sorting which can be used to read                                            // 10387
		 * real-time information from the table (updating the internally cached                                            // 10388
		 * version) prior to sorting. This allows sorting to occur on user editable                                        // 10389
		 * elements such as form inputs.                                                                                   // 10390
		 *  @type string                                                                                                   // 10391
		 *  @default std                                                                                                   // 10392
		 *  @dtopt Columns                                                                                                 // 10393
		 *                                                                                                                 // 10394
		 *  @example                                                                                                       // 10395
		 *    // Using aoColumnDefs                                                                                        // 10396
		 *    $(document).ready( function() {                                                                              // 10397
		 *      $('#example').dataTable( {                                                                                 // 10398
		 *        "aoColumnDefs": [                                                                                        // 10399
		 *          { "sSortDataType": "dom-text", "aTargets": [ 2, 3 ] },                                                 // 10400
		 *          { "sType": "numeric", "aTargets": [ 3 ] },                                                             // 10401
		 *          { "sSortDataType": "dom-select", "aTargets": [ 4 ] },                                                  // 10402
		 *          { "sSortDataType": "dom-checkbox", "aTargets": [ 5 ] }                                                 // 10403
		 *        ]                                                                                                        // 10404
		 *      } );                                                                                                       // 10405
		 *    } );                                                                                                         // 10406
		 *                                                                                                                 // 10407
		 *  @example                                                                                                       // 10408
		 *    // Using aoColumns                                                                                           // 10409
		 *    $(document).ready( function() {                                                                              // 10410
		 *      $('#example').dataTable( {                                                                                 // 10411
		 *        "aoColumns": [                                                                                           // 10412
		 *          null,                                                                                                  // 10413
		 *          null,                                                                                                  // 10414
		 *          { "sSortDataType": "dom-text" },                                                                       // 10415
		 *          { "sSortDataType": "dom-text", "sType": "numeric" },                                                   // 10416
		 *          { "sSortDataType": "dom-select" },                                                                     // 10417
		 *          { "sSortDataType": "dom-checkbox" }                                                                    // 10418
		 *        ]                                                                                                        // 10419
		 *      } );                                                                                                       // 10420
		 *    } );                                                                                                         // 10421
		 */                                                                                                                // 10422
		"sSortDataType": "std",                                                                                            // 10423
	                                                                                                                    // 10424
	                                                                                                                    // 10425
		/**                                                                                                                // 10426
		 * The title of this column.                                                                                       // 10427
		 *  @type string                                                                                                   // 10428
		 *  @default null <i>Derived from the 'TH' value for this column in the                                            // 10429
		 *    original HTML table.</i>                                                                                     // 10430
		 *  @dtopt Columns                                                                                                 // 10431
		 *                                                                                                                 // 10432
		 *  @example                                                                                                       // 10433
		 *    // Using aoColumnDefs                                                                                        // 10434
		 *    $(document).ready( function() {                                                                              // 10435
		 *      $('#example').dataTable( {                                                                                 // 10436
		 *        "aoColumnDefs": [                                                                                        // 10437
		 *          { "sTitle": "My column title", "aTargets": [ 0 ] }                                                     // 10438
		 *        ]                                                                                                        // 10439
		 *      } );                                                                                                       // 10440
		 *    } );                                                                                                         // 10441
		 *                                                                                                                 // 10442
		 *  @example                                                                                                       // 10443
		 *    // Using aoColumns                                                                                           // 10444
		 *    $(document).ready( function() {                                                                              // 10445
		 *      $('#example').dataTable( {                                                                                 // 10446
		 *        "aoColumns": [                                                                                           // 10447
		 *          { "sTitle": "My column title" },                                                                       // 10448
		 *          null,                                                                                                  // 10449
		 *          null,                                                                                                  // 10450
		 *          null,                                                                                                  // 10451
		 *          null                                                                                                   // 10452
		 *        ]                                                                                                        // 10453
		 *      } );                                                                                                       // 10454
		 *    } );                                                                                                         // 10455
		 */                                                                                                                // 10456
		"sTitle": null,                                                                                                    // 10457
	                                                                                                                    // 10458
	                                                                                                                    // 10459
		/**                                                                                                                // 10460
		 * The type allows you to specify how the data for this column will be sorted.                                     // 10461
		 * Four types (string, numeric, date and html (which will strip HTML tags                                          // 10462
		 * before sorting)) are currently available. Note that only date formats                                           // 10463
		 * understood by Javascript's Date() object will be accepted as type date. For                                     // 10464
		 * example: "Mar 26, 2008 5:03 PM". May take the values: 'string', 'numeric',                                      // 10465
		 * 'date' or 'html' (by default). Further types can be adding through                                              // 10466
		 * plug-ins.                                                                                                       // 10467
		 *  @type string                                                                                                   // 10468
		 *  @default null <i>Auto-detected from raw data</i>                                                               // 10469
		 *  @dtopt Columns                                                                                                 // 10470
		 *                                                                                                                 // 10471
		 *  @example                                                                                                       // 10472
		 *    // Using aoColumnDefs                                                                                        // 10473
		 *    $(document).ready( function() {                                                                              // 10474
		 *      $('#example').dataTable( {                                                                                 // 10475
		 *        "aoColumnDefs": [                                                                                        // 10476
		 *          { "sType": "html", "aTargets": [ 0 ] }                                                                 // 10477
		 *        ]                                                                                                        // 10478
		 *      } );                                                                                                       // 10479
		 *    } );                                                                                                         // 10480
		 *                                                                                                                 // 10481
		 *  @example                                                                                                       // 10482
		 *    // Using aoColumns                                                                                           // 10483
		 *    $(document).ready( function() {                                                                              // 10484
		 *      $('#example').dataTable( {                                                                                 // 10485
		 *        "aoColumns": [                                                                                           // 10486
		 *          { "sType": "html" },                                                                                   // 10487
		 *          null,                                                                                                  // 10488
		 *          null,                                                                                                  // 10489
		 *          null,                                                                                                  // 10490
		 *          null                                                                                                   // 10491
		 *        ]                                                                                                        // 10492
		 *      } );                                                                                                       // 10493
		 *    } );                                                                                                         // 10494
		 */                                                                                                                // 10495
		"sType": null,                                                                                                     // 10496
	                                                                                                                    // 10497
	                                                                                                                    // 10498
		/**                                                                                                                // 10499
		 * Defining the width of the column, this parameter may take any CSS value                                         // 10500
		 * (3em, 20px etc). DataTables apples 'smart' widths to columns which have not                                     // 10501
		 * been given a specific width through this interface ensuring that the table                                      // 10502
		 * remains readable.                                                                                               // 10503
		 *  @type string                                                                                                   // 10504
		 *  @default null <i>Automatic</i>                                                                                 // 10505
		 *  @dtopt Columns                                                                                                 // 10506
		 *                                                                                                                 // 10507
		 *  @example                                                                                                       // 10508
		 *    // Using aoColumnDefs                                                                                        // 10509
		 *    $(document).ready( function() {                                                                              // 10510
		 *      $('#example').dataTable( {                                                                                 // 10511
		 *        "aoColumnDefs": [                                                                                        // 10512
		 *          { "sWidth": "20%", "aTargets": [ 0 ] }                                                                 // 10513
		 *        ]                                                                                                        // 10514
		 *      } );                                                                                                       // 10515
		 *    } );                                                                                                         // 10516
		 *                                                                                                                 // 10517
		 *  @example                                                                                                       // 10518
		 *    // Using aoColumns                                                                                           // 10519
		 *    $(document).ready( function() {                                                                              // 10520
		 *      $('#example').dataTable( {                                                                                 // 10521
		 *        "aoColumns": [                                                                                           // 10522
		 *          { "sWidth": "20%" },                                                                                   // 10523
		 *          null,                                                                                                  // 10524
		 *          null,                                                                                                  // 10525
		 *          null,                                                                                                  // 10526
		 *          null                                                                                                   // 10527
		 *        ]                                                                                                        // 10528
		 *      } );                                                                                                       // 10529
		 *    } );                                                                                                         // 10530
		 */                                                                                                                // 10531
		"sWidth": null                                                                                                     // 10532
	};                                                                                                                  // 10533
	                                                                                                                    // 10534
	                                                                                                                    // 10535
	                                                                                                                    // 10536
	/**                                                                                                                 // 10537
	 * DataTables settings object - this holds all the information needed for a                                         // 10538
	 * given table, including configuration, data and current application of the                                        // 10539
	 * table options. DataTables does not have a single instance for each DataTable                                     // 10540
	 * with the settings attached to that instance, but rather instances of the                                         // 10541
	 * DataTable "class" are created on-the-fly as needed (typically by a                                               // 10542
	 * $().dataTable() call) and the settings object is then applied to that                                            // 10543
	 * instance.                                                                                                        // 10544
	 *                                                                                                                  // 10545
	 * Note that this object is related to {@link DataTable.defaults} but this                                          // 10546
	 * one is the internal data store for DataTables's cache of columns. It should                                      // 10547
	 * NOT be manipulated outside of DataTables. Any configuration should be done                                       // 10548
	 * through the initialisation options.                                                                              // 10549
	 *  @namespace                                                                                                      // 10550
	 *  @todo Really should attach the settings object to individual instances so we                                    // 10551
	 *    don't need to create new instances on each $().dataTable() call (if the                                       // 10552
	 *    table already exists). It would also save passing oSettings around and                                        // 10553
	 *    into every single function. However, this is a very significant                                               // 10554
	 *    architecture change for DataTables and will almost certainly break                                            // 10555
	 *    backwards compatibility with older installations. This is something that                                      // 10556
	 *    will be done in 2.0.                                                                                          // 10557
	 */                                                                                                                 // 10558
	DataTable.models.oSettings = {                                                                                      // 10559
		/**                                                                                                                // 10560
		 * Primary features of DataTables and their enablement state.                                                      // 10561
		 *  @namespace                                                                                                     // 10562
		 */                                                                                                                // 10563
		"oFeatures": {                                                                                                     // 10564
			                                                                                                                  // 10565
			/**                                                                                                               // 10566
			 * Flag to say if DataTables should automatically try to calculate the                                            // 10567
			 * optimum table and columns widths (true) or not (false).                                                        // 10568
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10569
			 * set a default use {@link DataTable.defaults}.                                                                  // 10570
			 *  @type boolean                                                                                                 // 10571
			 */                                                                                                               // 10572
			"bAutoWidth": null,                                                                                               // 10573
	                                                                                                                    // 10574
			/**                                                                                                               // 10575
			 * Delay the creation of TR and TD elements until they are actually                                               // 10576
			 * needed by a driven page draw. This can give a significant speed                                                // 10577
			 * increase for Ajax source and Javascript source data, but makes no                                              // 10578
			 * difference at all fro DOM and server-side processing tables.                                                   // 10579
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10580
			 * set a default use {@link DataTable.defaults}.                                                                  // 10581
			 *  @type boolean                                                                                                 // 10582
			 */                                                                                                               // 10583
			"bDeferRender": null,                                                                                             // 10584
			                                                                                                                  // 10585
			/**                                                                                                               // 10586
			 * Enable filtering on the table or not. Note that if this is disabled                                            // 10587
			 * then there is no filtering at all on the table, including fnFilter.                                            // 10588
			 * To just remove the filtering input use sDom and remove the 'f' option.                                         // 10589
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10590
			 * set a default use {@link DataTable.defaults}.                                                                  // 10591
			 *  @type boolean                                                                                                 // 10592
			 */                                                                                                               // 10593
			"bFilter": null,                                                                                                  // 10594
			                                                                                                                  // 10595
			/**                                                                                                               // 10596
			 * Table information element (the 'Showing x of y records' div) enable                                            // 10597
			 * flag.                                                                                                          // 10598
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10599
			 * set a default use {@link DataTable.defaults}.                                                                  // 10600
			 *  @type boolean                                                                                                 // 10601
			 */                                                                                                               // 10602
			"bInfo": null,                                                                                                    // 10603
			                                                                                                                  // 10604
			/**                                                                                                               // 10605
			 * Present a user control allowing the end user to change the page size                                           // 10606
			 * when pagination is enabled.                                                                                    // 10607
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10608
			 * set a default use {@link DataTable.defaults}.                                                                  // 10609
			 *  @type boolean                                                                                                 // 10610
			 */                                                                                                               // 10611
			"bLengthChange": null,                                                                                            // 10612
	                                                                                                                    // 10613
			/**                                                                                                               // 10614
			 * Pagination enabled or not. Note that if this is disabled then length                                           // 10615
			 * changing must also be disabled.                                                                                // 10616
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10617
			 * set a default use {@link DataTable.defaults}.                                                                  // 10618
			 *  @type boolean                                                                                                 // 10619
			 */                                                                                                               // 10620
			"bPaginate": null,                                                                                                // 10621
			                                                                                                                  // 10622
			/**                                                                                                               // 10623
			 * Processing indicator enable flag whenever DataTables is enacting a                                             // 10624
			 * user request - typically an Ajax request for server-side processing.                                           // 10625
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10626
			 * set a default use {@link DataTable.defaults}.                                                                  // 10627
			 *  @type boolean                                                                                                 // 10628
			 */                                                                                                               // 10629
			"bProcessing": null,                                                                                              // 10630
			                                                                                                                  // 10631
			/**                                                                                                               // 10632
			 * Server-side processing enabled flag - when enabled DataTables will                                             // 10633
			 * get all data from the server for every draw - there is no filtering,                                           // 10634
			 * sorting or paging done on the client-side.                                                                     // 10635
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10636
			 * set a default use {@link DataTable.defaults}.                                                                  // 10637
			 *  @type boolean                                                                                                 // 10638
			 */                                                                                                               // 10639
			"bServerSide": null,                                                                                              // 10640
			                                                                                                                  // 10641
			/**                                                                                                               // 10642
			 * Sorting enablement flag.                                                                                       // 10643
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10644
			 * set a default use {@link DataTable.defaults}.                                                                  // 10645
			 *  @type boolean                                                                                                 // 10646
			 */                                                                                                               // 10647
			"bSort": null,                                                                                                    // 10648
			                                                                                                                  // 10649
			/**                                                                                                               // 10650
			 * Apply a class to the columns which are being sorted to provide a                                               // 10651
			 * visual highlight or not. This can slow things down when enabled since                                          // 10652
			 * there is a lot of DOM interaction.                                                                             // 10653
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10654
			 * set a default use {@link DataTable.defaults}.                                                                  // 10655
			 *  @type boolean                                                                                                 // 10656
			 */                                                                                                               // 10657
			"bSortClasses": null,                                                                                             // 10658
			                                                                                                                  // 10659
			/**                                                                                                               // 10660
			 * State saving enablement flag.                                                                                  // 10661
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10662
			 * set a default use {@link DataTable.defaults}.                                                                  // 10663
			 *  @type boolean                                                                                                 // 10664
			 */                                                                                                               // 10665
			"bStateSave": null                                                                                                // 10666
		},                                                                                                                 // 10667
		                                                                                                                   // 10668
	                                                                                                                    // 10669
		/**                                                                                                                // 10670
		 * Scrolling settings for a table.                                                                                 // 10671
		 *  @namespace                                                                                                     // 10672
		 */                                                                                                                // 10673
		"oScroll": {                                                                                                       // 10674
			/**                                                                                                               // 10675
			 * Indicate if DataTables should be allowed to set the padding / margin                                           // 10676
			 * etc for the scrolling header elements or not. Typically you will want                                          // 10677
			 * this.                                                                                                          // 10678
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10679
			 * set a default use {@link DataTable.defaults}.                                                                  // 10680
			 *  @type boolean                                                                                                 // 10681
			 */                                                                                                               // 10682
			"bAutoCss": null,                                                                                                 // 10683
			                                                                                                                  // 10684
			/**                                                                                                               // 10685
			 * When the table is shorter in height than sScrollY, collapse the                                                // 10686
			 * table container down to the height of the table (when true).                                                   // 10687
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10688
			 * set a default use {@link DataTable.defaults}.                                                                  // 10689
			 *  @type boolean                                                                                                 // 10690
			 */                                                                                                               // 10691
			"bCollapse": null,                                                                                                // 10692
			                                                                                                                  // 10693
			/**                                                                                                               // 10694
			 * Infinite scrolling enablement flag. Now deprecated in favour of                                                // 10695
			 * using the Scroller plug-in.                                                                                    // 10696
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10697
			 * set a default use {@link DataTable.defaults}.                                                                  // 10698
			 *  @type boolean                                                                                                 // 10699
			 */                                                                                                               // 10700
			"bInfinite": null,                                                                                                // 10701
			                                                                                                                  // 10702
			/**                                                                                                               // 10703
			 * Width of the scrollbar for the web-browser's platform. Calculated                                              // 10704
			 * during table initialisation.                                                                                   // 10705
			 *  @type int                                                                                                     // 10706
			 *  @default 0                                                                                                    // 10707
			 */                                                                                                               // 10708
			"iBarWidth": 0,                                                                                                   // 10709
			                                                                                                                  // 10710
			/**                                                                                                               // 10711
			 * Space (in pixels) between the bottom of the scrolling container and                                            // 10712
			 * the bottom of the scrolling viewport before the next page is loaded                                            // 10713
			 * when using infinite scrolling.                                                                                 // 10714
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10715
			 * set a default use {@link DataTable.defaults}.                                                                  // 10716
			 *  @type int                                                                                                     // 10717
			 */                                                                                                               // 10718
			"iLoadGap": null,                                                                                                 // 10719
			                                                                                                                  // 10720
			/**                                                                                                               // 10721
			 * Viewport width for horizontal scrolling. Horizontal scrolling is                                               // 10722
			 * disabled if an empty string.                                                                                   // 10723
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10724
			 * set a default use {@link DataTable.defaults}.                                                                  // 10725
			 *  @type string                                                                                                  // 10726
			 */                                                                                                               // 10727
			"sX": null,                                                                                                       // 10728
			                                                                                                                  // 10729
			/**                                                                                                               // 10730
			 * Width to expand the table to when using x-scrolling. Typically you                                             // 10731
			 * should not need to use this.                                                                                   // 10732
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10733
			 * set a default use {@link DataTable.defaults}.                                                                  // 10734
			 *  @type string                                                                                                  // 10735
			 *  @deprecated                                                                                                   // 10736
			 */                                                                                                               // 10737
			"sXInner": null,                                                                                                  // 10738
			                                                                                                                  // 10739
			/**                                                                                                               // 10740
			 * Viewport height for vertical scrolling. Vertical scrolling is disabled                                         // 10741
			 * if an empty string.                                                                                            // 10742
			 * Note that this parameter will be set by the initialisation routine. To                                         // 10743
			 * set a default use {@link DataTable.defaults}.                                                                  // 10744
			 *  @type string                                                                                                  // 10745
			 */                                                                                                               // 10746
			"sY": null                                                                                                        // 10747
		},                                                                                                                 // 10748
		                                                                                                                   // 10749
		/**                                                                                                                // 10750
		 * Language information for the table.                                                                             // 10751
		 *  @namespace                                                                                                     // 10752
		 *  @extends DataTable.defaults.oLanguage                                                                          // 10753
		 */                                                                                                                // 10754
		"oLanguage": {                                                                                                     // 10755
			/**                                                                                                               // 10756
			 * Information callback function. See                                                                             // 10757
			 * {@link DataTable.defaults.fnInfoCallback}                                                                      // 10758
			 *  @type function                                                                                                // 10759
			 *  @default null                                                                                                 // 10760
			 */                                                                                                               // 10761
			"fnInfoCallback": null                                                                                            // 10762
		},                                                                                                                 // 10763
		                                                                                                                   // 10764
		/**                                                                                                                // 10765
		 * Browser support parameters                                                                                      // 10766
		 *  @namespace                                                                                                     // 10767
		 */                                                                                                                // 10768
		"oBrowser": {                                                                                                      // 10769
			/**                                                                                                               // 10770
			 * Indicate if the browser incorrectly calculates width:100% inside a                                             // 10771
			 * scrolling element (IE6/7)                                                                                      // 10772
			 *  @type boolean                                                                                                 // 10773
			 *  @default false                                                                                                // 10774
			 */                                                                                                               // 10775
			"bScrollOversize": false                                                                                          // 10776
		},                                                                                                                 // 10777
		                                                                                                                   // 10778
		/**                                                                                                                // 10779
		 * Array referencing the nodes which are used for the features. The                                                // 10780
		 * parameters of this object match what is allowed by sDom - i.e.                                                  // 10781
		 *   <ul>                                                                                                          // 10782
		 *     <li>'l' - Length changing</li>                                                                              // 10783
		 *     <li>'f' - Filtering input</li>                                                                              // 10784
		 *     <li>'t' - The table!</li>                                                                                   // 10785
		 *     <li>'i' - Information</li>                                                                                  // 10786
		 *     <li>'p' - Pagination</li>                                                                                   // 10787
		 *     <li>'r' - pRocessing</li>                                                                                   // 10788
		 *   </ul>                                                                                                         // 10789
		 *  @type array                                                                                                    // 10790
		 *  @default []                                                                                                    // 10791
		 */                                                                                                                // 10792
		"aanFeatures": [],                                                                                                 // 10793
		                                                                                                                   // 10794
		/**                                                                                                                // 10795
		 * Store data information - see {@link DataTable.models.oRow} for detailed                                         // 10796
		 * information.                                                                                                    // 10797
		 *  @type array                                                                                                    // 10798
		 *  @default []                                                                                                    // 10799
		 */                                                                                                                // 10800
		"aoData": [],                                                                                                      // 10801
		                                                                                                                   // 10802
		/**                                                                                                                // 10803
		 * Array of indexes which are in the current display (after filtering etc)                                         // 10804
		 *  @type array                                                                                                    // 10805
		 *  @default []                                                                                                    // 10806
		 */                                                                                                                // 10807
		"aiDisplay": [],                                                                                                   // 10808
		                                                                                                                   // 10809
		/**                                                                                                                // 10810
		 * Array of indexes for display - no filtering                                                                     // 10811
		 *  @type array                                                                                                    // 10812
		 *  @default []                                                                                                    // 10813
		 */                                                                                                                // 10814
		"aiDisplayMaster": [],                                                                                             // 10815
		                                                                                                                   // 10816
		/**                                                                                                                // 10817
		 * Store information about each column that is in use                                                              // 10818
		 *  @type array                                                                                                    // 10819
		 *  @default []                                                                                                    // 10820
		 */                                                                                                                // 10821
		"aoColumns": [],                                                                                                   // 10822
		                                                                                                                   // 10823
		/**                                                                                                                // 10824
		 * Store information about the table's header                                                                      // 10825
		 *  @type array                                                                                                    // 10826
		 *  @default []                                                                                                    // 10827
		 */                                                                                                                // 10828
		"aoHeader": [],                                                                                                    // 10829
		                                                                                                                   // 10830
		/**                                                                                                                // 10831
		 * Store information about the table's footer                                                                      // 10832
		 *  @type array                                                                                                    // 10833
		 *  @default []                                                                                                    // 10834
		 */                                                                                                                // 10835
		"aoFooter": [],                                                                                                    // 10836
		                                                                                                                   // 10837
		/**                                                                                                                // 10838
		 * Search data array for regular expression searching                                                              // 10839
		 *  @type array                                                                                                    // 10840
		 *  @default []                                                                                                    // 10841
		 */                                                                                                                // 10842
		"asDataSearch": [],                                                                                                // 10843
		                                                                                                                   // 10844
		/**                                                                                                                // 10845
		 * Store the applied global search information in case we want to force a                                          // 10846
		 * research or compare the old search to a new one.                                                                // 10847
		 * Note that this parameter will be set by the initialisation routine. To                                          // 10848
		 * set a default use {@link DataTable.defaults}.                                                                   // 10849
		 *  @namespace                                                                                                     // 10850
		 *  @extends DataTable.models.oSearch                                                                              // 10851
		 */                                                                                                                // 10852
		"oPreviousSearch": {},                                                                                             // 10853
		                                                                                                                   // 10854
		/**                                                                                                                // 10855
		 * Store the applied search for each column - see                                                                  // 10856
		 * {@link DataTable.models.oSearch} for the format that is used for the                                            // 10857
		 * filtering information for each column.                                                                          // 10858
		 *  @type array                                                                                                    // 10859
		 *  @default []                                                                                                    // 10860
		 */                                                                                                                // 10861
		"aoPreSearchCols": [],                                                                                             // 10862
		                                                                                                                   // 10863
		/**                                                                                                                // 10864
		 * Sorting that is applied to the table. Note that the inner arrays are                                            // 10865
		 * used in the following manner:                                                                                   // 10866
		 * <ul>                                                                                                            // 10867
		 *   <li>Index 0 - column number</li>                                                                              // 10868
		 *   <li>Index 1 - current sorting direction</li>                                                                  // 10869
		 *   <li>Index 2 - index of asSorting for this column</li>                                                         // 10870
		 * </ul>                                                                                                           // 10871
		 * Note that this parameter will be set by the initialisation routine. To                                          // 10872
		 * set a default use {@link DataTable.defaults}.                                                                   // 10873
		 *  @type array                                                                                                    // 10874
		 *  @todo These inner arrays should really be objects                                                              // 10875
		 */                                                                                                                // 10876
		"aaSorting": null,                                                                                                 // 10877
		                                                                                                                   // 10878
		/**                                                                                                                // 10879
		 * Sorting that is always applied to the table (i.e. prefixed in front of                                          // 10880
		 * aaSorting).                                                                                                     // 10881
		 * Note that this parameter will be set by the initialisation routine. To                                          // 10882
		 * set a default use {@link DataTable.defaults}.                                                                   // 10883
		 *  @type array|null                                                                                               // 10884
		 *  @default null                                                                                                  // 10885
		 */                                                                                                                // 10886
		"aaSortingFixed": null,                                                                                            // 10887
		                                                                                                                   // 10888
		/**                                                                                                                // 10889
		 * Classes to use for the striping of a table.                                                                     // 10890
		 * Note that this parameter will be set by the initialisation routine. To                                          // 10891
		 * set a default use {@link DataTable.defaults}.                                                                   // 10892
		 *  @type array                                                                                                    // 10893
		 *  @default []                                                                                                    // 10894
		 */                                                                                                                // 10895
		"asStripeClasses": null,                                                                                           // 10896
		                                                                                                                   // 10897
		/**                                                                                                                // 10898
		 * If restoring a table - we should restore its striping classes as well                                           // 10899
		 *  @type array                                                                                                    // 10900
		 *  @default []                                                                                                    // 10901
		 */                                                                                                                // 10902
		"asDestroyStripes": [],                                                                                            // 10903
		                                                                                                                   // 10904
		/**                                                                                                                // 10905
		 * If restoring a table - we should restore its width                                                              // 10906
		 *  @type int                                                                                                      // 10907
		 *  @default 0                                                                                                     // 10908
		 */                                                                                                                // 10909
		"sDestroyWidth": 0,                                                                                                // 10910
		                                                                                                                   // 10911
		/**                                                                                                                // 10912
		 * Callback functions array for every time a row is inserted (i.e. on a draw).                                     // 10913
		 *  @type array                                                                                                    // 10914
		 *  @default []                                                                                                    // 10915
		 */                                                                                                                // 10916
		"aoRowCallback": [],                                                                                               // 10917
		                                                                                                                   // 10918
		/**                                                                                                                // 10919
		 * Callback functions for the header on each draw.                                                                 // 10920
		 *  @type array                                                                                                    // 10921
		 *  @default []                                                                                                    // 10922
		 */                                                                                                                // 10923
		"aoHeaderCallback": [],                                                                                            // 10924
		                                                                                                                   // 10925
		/**                                                                                                                // 10926
		 * Callback function for the footer on each draw.                                                                  // 10927
		 *  @type array                                                                                                    // 10928
		 *  @default []                                                                                                    // 10929
		 */                                                                                                                // 10930
		"aoFooterCallback": [],                                                                                            // 10931
		                                                                                                                   // 10932
		/**                                                                                                                // 10933
		 * Array of callback functions for draw callback functions                                                         // 10934
		 *  @type array                                                                                                    // 10935
		 *  @default []                                                                                                    // 10936
		 */                                                                                                                // 10937
		"aoDrawCallback": [],                                                                                              // 10938
		                                                                                                                   // 10939
		/**                                                                                                                // 10940
		 * Array of callback functions for row created function                                                            // 10941
		 *  @type array                                                                                                    // 10942
		 *  @default []                                                                                                    // 10943
		 */                                                                                                                // 10944
		"aoRowCreatedCallback": [],                                                                                        // 10945
		                                                                                                                   // 10946
		/**                                                                                                                // 10947
		 * Callback functions for just before the table is redrawn. A return of                                            // 10948
		 * false will be used to cancel the draw.                                                                          // 10949
		 *  @type array                                                                                                    // 10950
		 *  @default []                                                                                                    // 10951
		 */                                                                                                                // 10952
		"aoPreDrawCallback": [],                                                                                           // 10953
		                                                                                                                   // 10954
		/**                                                                                                                // 10955
		 * Callback functions for when the table has been initialised.                                                     // 10956
		 *  @type array                                                                                                    // 10957
		 *  @default []                                                                                                    // 10958
		 */                                                                                                                // 10959
		"aoInitComplete": [],                                                                                              // 10960
	                                                                                                                    // 10961
		                                                                                                                   // 10962
		/**                                                                                                                // 10963
		 * Callbacks for modifying the settings to be stored for state saving, prior to                                    // 10964
		 * saving state.                                                                                                   // 10965
		 *  @type array                                                                                                    // 10966
		 *  @default []                                                                                                    // 10967
		 */                                                                                                                // 10968
		"aoStateSaveParams": [],                                                                                           // 10969
		                                                                                                                   // 10970
		/**                                                                                                                // 10971
		 * Callbacks for modifying the settings that have been stored for state saving                                     // 10972
		 * prior to using the stored values to restore the state.                                                          // 10973
		 *  @type array                                                                                                    // 10974
		 *  @default []                                                                                                    // 10975
		 */                                                                                                                // 10976
		"aoStateLoadParams": [],                                                                                           // 10977
		                                                                                                                   // 10978
		/**                                                                                                                // 10979
		 * Callbacks for operating on the settings object once the saved state has been                                    // 10980
		 * loaded                                                                                                          // 10981
		 *  @type array                                                                                                    // 10982
		 *  @default []                                                                                                    // 10983
		 */                                                                                                                // 10984
		"aoStateLoaded": [],                                                                                               // 10985
		                                                                                                                   // 10986
		/**                                                                                                                // 10987
		 * Cache the table ID for quick access                                                                             // 10988
		 *  @type string                                                                                                   // 10989
		 *  @default <i>Empty string</i>                                                                                   // 10990
		 */                                                                                                                // 10991
		"sTableId": "",                                                                                                    // 10992
		                                                                                                                   // 10993
		/**                                                                                                                // 10994
		 * The TABLE node for the main table                                                                               // 10995
		 *  @type node                                                                                                     // 10996
		 *  @default null                                                                                                  // 10997
		 */                                                                                                                // 10998
		"nTable": null,                                                                                                    // 10999
		                                                                                                                   // 11000
		/**                                                                                                                // 11001
		 * Permanent ref to the thead element                                                                              // 11002
		 *  @type node                                                                                                     // 11003
		 *  @default null                                                                                                  // 11004
		 */                                                                                                                // 11005
		"nTHead": null,                                                                                                    // 11006
		                                                                                                                   // 11007
		/**                                                                                                                // 11008
		 * Permanent ref to the tfoot element - if it exists                                                               // 11009
		 *  @type node                                                                                                     // 11010
		 *  @default null                                                                                                  // 11011
		 */                                                                                                                // 11012
		"nTFoot": null,                                                                                                    // 11013
		                                                                                                                   // 11014
		/**                                                                                                                // 11015
		 * Permanent ref to the tbody element                                                                              // 11016
		 *  @type node                                                                                                     // 11017
		 *  @default null                                                                                                  // 11018
		 */                                                                                                                // 11019
		"nTBody": null,                                                                                                    // 11020
		                                                                                                                   // 11021
		/**                                                                                                                // 11022
		 * Cache the wrapper node (contains all DataTables controlled elements)                                            // 11023
		 *  @type node                                                                                                     // 11024
		 *  @default null                                                                                                  // 11025
		 */                                                                                                                // 11026
		"nTableWrapper": null,                                                                                             // 11027
		                                                                                                                   // 11028
		/**                                                                                                                // 11029
		 * Indicate if when using server-side processing the loading of data                                               // 11030
		 * should be deferred until the second draw.                                                                       // 11031
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11032
		 * set a default use {@link DataTable.defaults}.                                                                   // 11033
		 *  @type boolean                                                                                                  // 11034
		 *  @default false                                                                                                 // 11035
		 */                                                                                                                // 11036
		"bDeferLoading": false,                                                                                            // 11037
		                                                                                                                   // 11038
		/**                                                                                                                // 11039
		 * Indicate if all required information has been read in                                                           // 11040
		 *  @type boolean                                                                                                  // 11041
		 *  @default false                                                                                                 // 11042
		 */                                                                                                                // 11043
		"bInitialised": false,                                                                                             // 11044
		                                                                                                                   // 11045
		/**                                                                                                                // 11046
		 * Information about open rows. Each object in the array has the parameters                                        // 11047
		 * 'nTr' and 'nParent'                                                                                             // 11048
		 *  @type array                                                                                                    // 11049
		 *  @default []                                                                                                    // 11050
		 */                                                                                                                // 11051
		"aoOpenRows": [],                                                                                                  // 11052
		                                                                                                                   // 11053
		/**                                                                                                                // 11054
		 * Dictate the positioning of DataTables' control elements - see                                                   // 11055
		 * {@link DataTable.model.oInit.sDom}.                                                                             // 11056
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11057
		 * set a default use {@link DataTable.defaults}.                                                                   // 11058
		 *  @type string                                                                                                   // 11059
		 *  @default null                                                                                                  // 11060
		 */                                                                                                                // 11061
		"sDom": null,                                                                                                      // 11062
		                                                                                                                   // 11063
		/**                                                                                                                // 11064
		 * Which type of pagination should be used.                                                                        // 11065
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11066
		 * set a default use {@link DataTable.defaults}.                                                                   // 11067
		 *  @type string                                                                                                   // 11068
		 *  @default two_button                                                                                            // 11069
		 */                                                                                                                // 11070
		"sPaginationType": "two_button",                                                                                   // 11071
		                                                                                                                   // 11072
		/**                                                                                                                // 11073
		 * The cookie duration (for bStateSave) in seconds.                                                                // 11074
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11075
		 * set a default use {@link DataTable.defaults}.                                                                   // 11076
		 *  @type int                                                                                                      // 11077
		 *  @default 0                                                                                                     // 11078
		 */                                                                                                                // 11079
		"iCookieDuration": 0,                                                                                              // 11080
		                                                                                                                   // 11081
		/**                                                                                                                // 11082
		 * The cookie name prefix.                                                                                         // 11083
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11084
		 * set a default use {@link DataTable.defaults}.                                                                   // 11085
		 *  @type string                                                                                                   // 11086
		 *  @default <i>Empty string</i>                                                                                   // 11087
		 */                                                                                                                // 11088
		"sCookiePrefix": "",                                                                                               // 11089
		                                                                                                                   // 11090
		/**                                                                                                                // 11091
		 * Callback function for cookie creation.                                                                          // 11092
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11093
		 * set a default use {@link DataTable.defaults}.                                                                   // 11094
		 *  @type function                                                                                                 // 11095
		 *  @default null                                                                                                  // 11096
		 */                                                                                                                // 11097
		"fnCookieCallback": null,                                                                                          // 11098
		                                                                                                                   // 11099
		/**                                                                                                                // 11100
		 * Array of callback functions for state saving. Each array element is an                                          // 11101
		 * object with the following parameters:                                                                           // 11102
		 *   <ul>                                                                                                          // 11103
		 *     <li>function:fn - function to call. Takes two parameters, oSettings                                         // 11104
		 *       and the JSON string to save that has been thus far created. Returns                                       // 11105
		 *       a JSON string to be inserted into a json object                                                           // 11106
		 *       (i.e. '"param": [ 0, 1, 2]')</li>                                                                         // 11107
		 *     <li>string:sName - name of callback</li>                                                                    // 11108
		 *   </ul>                                                                                                         // 11109
		 *  @type array                                                                                                    // 11110
		 *  @default []                                                                                                    // 11111
		 */                                                                                                                // 11112
		"aoStateSave": [],                                                                                                 // 11113
		                                                                                                                   // 11114
		/**                                                                                                                // 11115
		 * Array of callback functions for state loading. Each array element is an                                         // 11116
		 * object with the following parameters:                                                                           // 11117
		 *   <ul>                                                                                                          // 11118
		 *     <li>function:fn - function to call. Takes two parameters, oSettings                                         // 11119
		 *       and the object stored. May return false to cancel state loading</li>                                      // 11120
		 *     <li>string:sName - name of callback</li>                                                                    // 11121
		 *   </ul>                                                                                                         // 11122
		 *  @type array                                                                                                    // 11123
		 *  @default []                                                                                                    // 11124
		 */                                                                                                                // 11125
		"aoStateLoad": [],                                                                                                 // 11126
		                                                                                                                   // 11127
		/**                                                                                                                // 11128
		 * State that was loaded from the cookie. Useful for back reference                                                // 11129
		 *  @type object                                                                                                   // 11130
		 *  @default null                                                                                                  // 11131
		 */                                                                                                                // 11132
		"oLoadedState": null,                                                                                              // 11133
		                                                                                                                   // 11134
		/**                                                                                                                // 11135
		 * Source url for AJAX data for the table.                                                                         // 11136
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11137
		 * set a default use {@link DataTable.defaults}.                                                                   // 11138
		 *  @type string                                                                                                   // 11139
		 *  @default null                                                                                                  // 11140
		 */                                                                                                                // 11141
		"sAjaxSource": null,                                                                                               // 11142
		                                                                                                                   // 11143
		/**                                                                                                                // 11144
		 * Property from a given object from which to read the table data from. This                                       // 11145
		 * can be an empty string (when not server-side processing), in which case                                         // 11146
		 * it is  assumed an an array is given directly.                                                                   // 11147
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11148
		 * set a default use {@link DataTable.defaults}.                                                                   // 11149
		 *  @type string                                                                                                   // 11150
		 */                                                                                                                // 11151
		"sAjaxDataProp": null,                                                                                             // 11152
		                                                                                                                   // 11153
		/**                                                                                                                // 11154
		 * Note if draw should be blocked while getting data                                                               // 11155
		 *  @type boolean                                                                                                  // 11156
		 *  @default true                                                                                                  // 11157
		 */                                                                                                                // 11158
		"bAjaxDataGet": true,                                                                                              // 11159
		                                                                                                                   // 11160
		/**                                                                                                                // 11161
		 * The last jQuery XHR object that was used for server-side data gathering.                                        // 11162
		 * This can be used for working with the XHR information in one of the                                             // 11163
		 * callbacks                                                                                                       // 11164
		 *  @type object                                                                                                   // 11165
		 *  @default null                                                                                                  // 11166
		 */                                                                                                                // 11167
		"jqXHR": null,                                                                                                     // 11168
		                                                                                                                   // 11169
		/**                                                                                                                // 11170
		 * Function to get the server-side data.                                                                           // 11171
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11172
		 * set a default use {@link DataTable.defaults}.                                                                   // 11173
		 *  @type function                                                                                                 // 11174
		 */                                                                                                                // 11175
		"fnServerData": null,                                                                                              // 11176
		                                                                                                                   // 11177
		/**                                                                                                                // 11178
		 * Functions which are called prior to sending an Ajax request so extra                                            // 11179
		 * parameters can easily be sent to the server                                                                     // 11180
		 *  @type array                                                                                                    // 11181
		 *  @default []                                                                                                    // 11182
		 */                                                                                                                // 11183
		"aoServerParams": [],                                                                                              // 11184
		                                                                                                                   // 11185
		/**                                                                                                                // 11186
		 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if                                               // 11187
		 * required).                                                                                                      // 11188
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11189
		 * set a default use {@link DataTable.defaults}.                                                                   // 11190
		 *  @type string                                                                                                   // 11191
		 */                                                                                                                // 11192
		"sServerMethod": null,                                                                                             // 11193
		                                                                                                                   // 11194
		/**                                                                                                                // 11195
		 * Format numbers for display.                                                                                     // 11196
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11197
		 * set a default use {@link DataTable.defaults}.                                                                   // 11198
		 *  @type function                                                                                                 // 11199
		 */                                                                                                                // 11200
		"fnFormatNumber": null,                                                                                            // 11201
		                                                                                                                   // 11202
		/**                                                                                                                // 11203
		 * List of options that can be used for the user selectable length menu.                                           // 11204
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11205
		 * set a default use {@link DataTable.defaults}.                                                                   // 11206
		 *  @type array                                                                                                    // 11207
		 *  @default []                                                                                                    // 11208
		 */                                                                                                                // 11209
		"aLengthMenu": null,                                                                                               // 11210
		                                                                                                                   // 11211
		/**                                                                                                                // 11212
		 * Counter for the draws that the table does. Also used as a tracker for                                           // 11213
		 * server-side processing                                                                                          // 11214
		 *  @type int                                                                                                      // 11215
		 *  @default 0                                                                                                     // 11216
		 */                                                                                                                // 11217
		"iDraw": 0,                                                                                                        // 11218
		                                                                                                                   // 11219
		/**                                                                                                                // 11220
		 * Indicate if a redraw is being done - useful for Ajax                                                            // 11221
		 *  @type boolean                                                                                                  // 11222
		 *  @default false                                                                                                 // 11223
		 */                                                                                                                // 11224
		"bDrawing": false,                                                                                                 // 11225
		                                                                                                                   // 11226
		/**                                                                                                                // 11227
		 * Draw index (iDraw) of the last error when parsing the returned data                                             // 11228
		 *  @type int                                                                                                      // 11229
		 *  @default -1                                                                                                    // 11230
		 */                                                                                                                // 11231
		"iDrawError": -1,                                                                                                  // 11232
		                                                                                                                   // 11233
		/**                                                                                                                // 11234
		 * Paging display length                                                                                           // 11235
		 *  @type int                                                                                                      // 11236
		 *  @default 10                                                                                                    // 11237
		 */                                                                                                                // 11238
		"_iDisplayLength": 10,                                                                                             // 11239
	                                                                                                                    // 11240
		/**                                                                                                                // 11241
		 * Paging start point - aiDisplay index                                                                            // 11242
		 *  @type int                                                                                                      // 11243
		 *  @default 0                                                                                                     // 11244
		 */                                                                                                                // 11245
		"_iDisplayStart": 0,                                                                                               // 11246
	                                                                                                                    // 11247
		/**                                                                                                                // 11248
		 * Paging end point - aiDisplay index. Use fnDisplayEnd rather than                                                // 11249
		 * this property to get the end point                                                                              // 11250
		 *  @type int                                                                                                      // 11251
		 *  @default 10                                                                                                    // 11252
		 *  @private                                                                                                       // 11253
		 */                                                                                                                // 11254
		"_iDisplayEnd": 10,                                                                                                // 11255
		                                                                                                                   // 11256
		/**                                                                                                                // 11257
		 * Server-side processing - number of records in the result set                                                    // 11258
		 * (i.e. before filtering), Use fnRecordsTotal rather than                                                         // 11259
		 * this property to get the value of the number of records, regardless of                                          // 11260
		 * the server-side processing setting.                                                                             // 11261
		 *  @type int                                                                                                      // 11262
		 *  @default 0                                                                                                     // 11263
		 *  @private                                                                                                       // 11264
		 */                                                                                                                // 11265
		"_iRecordsTotal": 0,                                                                                               // 11266
	                                                                                                                    // 11267
		/**                                                                                                                // 11268
		 * Server-side processing - number of records in the current display set                                           // 11269
		 * (i.e. after filtering). Use fnRecordsDisplay rather than                                                        // 11270
		 * this property to get the value of the number of records, regardless of                                          // 11271
		 * the server-side processing setting.                                                                             // 11272
		 *  @type boolean                                                                                                  // 11273
		 *  @default 0                                                                                                     // 11274
		 *  @private                                                                                                       // 11275
		 */                                                                                                                // 11276
		"_iRecordsDisplay": 0,                                                                                             // 11277
		                                                                                                                   // 11278
		/**                                                                                                                // 11279
		 * Flag to indicate if jQuery UI marking and classes should be used.                                               // 11280
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11281
		 * set a default use {@link DataTable.defaults}.                                                                   // 11282
		 *  @type boolean                                                                                                  // 11283
		 */                                                                                                                // 11284
		"bJUI": null,                                                                                                      // 11285
		                                                                                                                   // 11286
		/**                                                                                                                // 11287
		 * The classes to use for the table                                                                                // 11288
		 *  @type object                                                                                                   // 11289
		 *  @default {}                                                                                                    // 11290
		 */                                                                                                                // 11291
		"oClasses": {},                                                                                                    // 11292
		                                                                                                                   // 11293
		/**                                                                                                                // 11294
		 * Flag attached to the settings object so you can check in the draw                                               // 11295
		 * callback if filtering has been done in the draw. Deprecated in favour of                                        // 11296
		 * events.                                                                                                         // 11297
		 *  @type boolean                                                                                                  // 11298
		 *  @default false                                                                                                 // 11299
		 *  @deprecated                                                                                                    // 11300
		 */                                                                                                                // 11301
		"bFiltered": false,                                                                                                // 11302
		                                                                                                                   // 11303
		/**                                                                                                                // 11304
		 * Flag attached to the settings object so you can check in the draw                                               // 11305
		 * callback if sorting has been done in the draw. Deprecated in favour of                                          // 11306
		 * events.                                                                                                         // 11307
		 *  @type boolean                                                                                                  // 11308
		 *  @default false                                                                                                 // 11309
		 *  @deprecated                                                                                                    // 11310
		 */                                                                                                                // 11311
		"bSorted": false,                                                                                                  // 11312
		                                                                                                                   // 11313
		/**                                                                                                                // 11314
		 * Indicate that if multiple rows are in the header and there is more than                                         // 11315
		 * one unique cell per column, if the top one (true) or bottom one (false)                                         // 11316
		 * should be used for sorting / title by DataTables.                                                               // 11317
		 * Note that this parameter will be set by the initialisation routine. To                                          // 11318
		 * set a default use {@link DataTable.defaults}.                                                                   // 11319
		 *  @type boolean                                                                                                  // 11320
		 */                                                                                                                // 11321
		"bSortCellsTop": null,                                                                                             // 11322
		                                                                                                                   // 11323
		/**                                                                                                                // 11324
		 * Initialisation object that is used for the table                                                                // 11325
		 *  @type object                                                                                                   // 11326
		 *  @default null                                                                                                  // 11327
		 */                                                                                                                // 11328
		"oInit": null,                                                                                                     // 11329
		                                                                                                                   // 11330
		/**                                                                                                                // 11331
		 * Destroy callback functions - for plug-ins to attach themselves to the                                           // 11332
		 * destroy so they can clean up markup and events.                                                                 // 11333
		 *  @type array                                                                                                    // 11334
		 *  @default []                                                                                                    // 11335
		 */                                                                                                                // 11336
		"aoDestroyCallback": [],                                                                                           // 11337
	                                                                                                                    // 11338
		                                                                                                                   // 11339
		/**                                                                                                                // 11340
		 * Get the number of records in the current record set, before filtering                                           // 11341
		 *  @type function                                                                                                 // 11342
		 */                                                                                                                // 11343
		"fnRecordsTotal": function ()                                                                                      // 11344
		{                                                                                                                  // 11345
			if ( this.oFeatures.bServerSide ) {                                                                               // 11346
				return parseInt(this._iRecordsTotal, 10);                                                                        // 11347
			} else {                                                                                                          // 11348
				return this.aiDisplayMaster.length;                                                                              // 11349
			}                                                                                                                 // 11350
		},                                                                                                                 // 11351
		                                                                                                                   // 11352
		/**                                                                                                                // 11353
		 * Get the number of records in the current record set, after filtering                                            // 11354
		 *  @type function                                                                                                 // 11355
		 */                                                                                                                // 11356
		"fnRecordsDisplay": function ()                                                                                    // 11357
		{                                                                                                                  // 11358
			if ( this.oFeatures.bServerSide ) {                                                                               // 11359
				return parseInt(this._iRecordsDisplay, 10);                                                                      // 11360
			} else {                                                                                                          // 11361
				return this.aiDisplay.length;                                                                                    // 11362
			}                                                                                                                 // 11363
		},                                                                                                                 // 11364
		                                                                                                                   // 11365
		/**                                                                                                                // 11366
		 * Set the display end point - aiDisplay index                                                                     // 11367
		 *  @type function                                                                                                 // 11368
		 *  @todo Should do away with _iDisplayEnd and calculate it on-the-fly here                                        // 11369
		 */                                                                                                                // 11370
		"fnDisplayEnd": function ()                                                                                        // 11371
		{                                                                                                                  // 11372
			if ( this.oFeatures.bServerSide ) {                                                                               // 11373
				if ( this.oFeatures.bPaginate === false || this._iDisplayLength == -1 ) {                                        // 11374
					return this._iDisplayStart+this.aiDisplay.length;                                                               // 11375
				} else {                                                                                                         // 11376
					return Math.min( this._iDisplayStart+this._iDisplayLength,                                                      // 11377
						this._iRecordsDisplay );                                                                                       // 11378
				}                                                                                                                // 11379
			} else {                                                                                                          // 11380
				return this._iDisplayEnd;                                                                                        // 11381
			}                                                                                                                 // 11382
		},                                                                                                                 // 11383
		                                                                                                                   // 11384
		/**                                                                                                                // 11385
		 * The DataTables object for this table                                                                            // 11386
		 *  @type object                                                                                                   // 11387
		 *  @default null                                                                                                  // 11388
		 */                                                                                                                // 11389
		"oInstance": null,                                                                                                 // 11390
		                                                                                                                   // 11391
		/**                                                                                                                // 11392
		 * Unique identifier for each instance of the DataTables object. If there                                          // 11393
		 * is an ID on the table node, then it takes that value, otherwise an                                              // 11394
		 * incrementing internal counter is used.                                                                          // 11395
		 *  @type string                                                                                                   // 11396
		 *  @default null                                                                                                  // 11397
		 */                                                                                                                // 11398
		"sInstance": null,                                                                                                 // 11399
	                                                                                                                    // 11400
		/**                                                                                                                // 11401
		 * tabindex attribute value that is added to DataTables control elements, allowing                                 // 11402
		 * keyboard navigation of the table and its controls.                                                              // 11403
		 */                                                                                                                // 11404
		"iTabIndex": 0,                                                                                                    // 11405
	                                                                                                                    // 11406
		/**                                                                                                                // 11407
		 * DIV container for the footer scrolling table if scrolling                                                       // 11408
		 */                                                                                                                // 11409
		"nScrollHead": null,                                                                                               // 11410
	                                                                                                                    // 11411
		/**                                                                                                                // 11412
		 * DIV container for the footer scrolling table if scrolling                                                       // 11413
		 */                                                                                                                // 11414
		"nScrollFoot": null                                                                                                // 11415
	};                                                                                                                  // 11416
                                                                                                                     // 11417
	/**                                                                                                                 // 11418
	 * Extension object for DataTables that is used to provide all extension options.                                   // 11419
	 *                                                                                                                  // 11420
	 * Note that the <i>DataTable.ext</i> object is available through                                                   // 11421
	 * <i>jQuery.fn.dataTable.ext</i> where it may be accessed and manipulated. It is                                   // 11422
	 * also aliased to <i>jQuery.fn.dataTableExt</i> for historic reasons.                                              // 11423
	 *  @namespace                                                                                                      // 11424
	 *  @extends DataTable.models.ext                                                                                   // 11425
	 */                                                                                                                 // 11426
	DataTable.ext = $.extend( true, {}, DataTable.models.ext );                                                         // 11427
	                                                                                                                    // 11428
	$.extend( DataTable.ext.oStdClasses, {                                                                              // 11429
		"sTable": "dataTable",                                                                                             // 11430
	                                                                                                                    // 11431
		/* Two buttons buttons */                                                                                          // 11432
		"sPagePrevEnabled": "paginate_enabled_previous",                                                                   // 11433
		"sPagePrevDisabled": "paginate_disabled_previous",                                                                 // 11434
		"sPageNextEnabled": "paginate_enabled_next",                                                                       // 11435
		"sPageNextDisabled": "paginate_disabled_next",                                                                     // 11436
		"sPageJUINext": "",                                                                                                // 11437
		"sPageJUIPrev": "",                                                                                                // 11438
		                                                                                                                   // 11439
		/* Full numbers paging buttons */                                                                                  // 11440
		"sPageButton": "paginate_button",                                                                                  // 11441
		"sPageButtonActive": "paginate_active",                                                                            // 11442
		"sPageButtonStaticDisabled": "paginate_button paginate_button_disabled",                                           // 11443
		"sPageFirst": "first",                                                                                             // 11444
		"sPagePrevious": "previous",                                                                                       // 11445
		"sPageNext": "next",                                                                                               // 11446
		"sPageLast": "last",                                                                                               // 11447
		                                                                                                                   // 11448
		/* Striping classes */                                                                                             // 11449
		"sStripeOdd": "odd",                                                                                               // 11450
		"sStripeEven": "even",                                                                                             // 11451
		                                                                                                                   // 11452
		/* Empty row */                                                                                                    // 11453
		"sRowEmpty": "dataTables_empty",                                                                                   // 11454
		                                                                                                                   // 11455
		/* Features */                                                                                                     // 11456
		"sWrapper": "dataTables_wrapper",                                                                                  // 11457
		"sFilter": "dataTables_filter",                                                                                    // 11458
		"sInfo": "dataTables_info",                                                                                        // 11459
		"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */                                    // 11460
		"sLength": "dataTables_length",                                                                                    // 11461
		"sProcessing": "dataTables_processing",                                                                            // 11462
		                                                                                                                   // 11463
		/* Sorting */                                                                                                      // 11464
		"sSortAsc": "sorting_asc",                                                                                         // 11465
		"sSortDesc": "sorting_desc",                                                                                       // 11466
		"sSortable": "sorting", /* Sortable in both directions */                                                          // 11467
		"sSortableAsc": "sorting_asc_disabled",                                                                            // 11468
		"sSortableDesc": "sorting_desc_disabled",                                                                          // 11469
		"sSortableNone": "sorting_disabled",                                                                               // 11470
		"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */                               // 11471
		"sSortJUIAsc": "",                                                                                                 // 11472
		"sSortJUIDesc": "",                                                                                                // 11473
		"sSortJUI": "",                                                                                                    // 11474
		"sSortJUIAscAllowed": "",                                                                                          // 11475
		"sSortJUIDescAllowed": "",                                                                                         // 11476
		"sSortJUIWrapper": "",                                                                                             // 11477
		"sSortIcon": "",                                                                                                   // 11478
		                                                                                                                   // 11479
		/* Scrolling */                                                                                                    // 11480
		"sScrollWrapper": "dataTables_scroll",                                                                             // 11481
		"sScrollHead": "dataTables_scrollHead",                                                                            // 11482
		"sScrollHeadInner": "dataTables_scrollHeadInner",                                                                  // 11483
		"sScrollBody": "dataTables_scrollBody",                                                                            // 11484
		"sScrollFoot": "dataTables_scrollFoot",                                                                            // 11485
		"sScrollFootInner": "dataTables_scrollFootInner",                                                                  // 11486
		                                                                                                                   // 11487
		/* Misc */                                                                                                         // 11488
		"sFooterTH": "",                                                                                                   // 11489
		"sJUIHeader": "",                                                                                                  // 11490
		"sJUIFooter": ""                                                                                                   // 11491
	} );                                                                                                                // 11492
	                                                                                                                    // 11493
	                                                                                                                    // 11494
	$.extend( DataTable.ext.oJUIClasses, DataTable.ext.oStdClasses, {                                                   // 11495
		/* Two buttons buttons */                                                                                          // 11496
		"sPagePrevEnabled": "fg-button ui-button ui-state-default ui-corner-left",                                         // 11497
		"sPagePrevDisabled": "fg-button ui-button ui-state-default ui-corner-left ui-state-disabled",                      // 11498
		"sPageNextEnabled": "fg-button ui-button ui-state-default ui-corner-right",                                        // 11499
		"sPageNextDisabled": "fg-button ui-button ui-state-default ui-corner-right ui-state-disabled",                     // 11500
		"sPageJUINext": "ui-icon ui-icon-circle-arrow-e",                                                                  // 11501
		"sPageJUIPrev": "ui-icon ui-icon-circle-arrow-w",                                                                  // 11502
		                                                                                                                   // 11503
		/* Full numbers paging buttons */                                                                                  // 11504
		"sPageButton": "fg-button ui-button ui-state-default",                                                             // 11505
		"sPageButtonActive": "fg-button ui-button ui-state-default ui-state-disabled",                                     // 11506
		"sPageButtonStaticDisabled": "fg-button ui-button ui-state-default ui-state-disabled",                             // 11507
		"sPageFirst": "first ui-corner-tl ui-corner-bl",                                                                   // 11508
		"sPageLast": "last ui-corner-tr ui-corner-br",                                                                     // 11509
		                                                                                                                   // 11510
		/* Features */                                                                                                     // 11511
		"sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi "+                                    // 11512
			"ui-buttonset-multi paging_", /* Note that the type is postfixed */                                               // 11513
		                                                                                                                   // 11514
		/* Sorting */                                                                                                      // 11515
		"sSortAsc": "ui-state-default",                                                                                    // 11516
		"sSortDesc": "ui-state-default",                                                                                   // 11517
		"sSortable": "ui-state-default",                                                                                   // 11518
		"sSortableAsc": "ui-state-default",                                                                                // 11519
		"sSortableDesc": "ui-state-default",                                                                               // 11520
		"sSortableNone": "ui-state-default",                                                                               // 11521
		"sSortJUIAsc": "css_right ui-icon ui-icon-triangle-1-n",                                                           // 11522
		"sSortJUIDesc": "css_right ui-icon ui-icon-triangle-1-s",                                                          // 11523
		"sSortJUI": "css_right ui-icon ui-icon-carat-2-n-s",                                                               // 11524
		"sSortJUIAscAllowed": "css_right ui-icon ui-icon-carat-1-n",                                                       // 11525
		"sSortJUIDescAllowed": "css_right ui-icon ui-icon-carat-1-s",                                                      // 11526
		"sSortJUIWrapper": "DataTables_sort_wrapper",                                                                      // 11527
		"sSortIcon": "DataTables_sort_icon",                                                                               // 11528
		                                                                                                                   // 11529
		/* Scrolling */                                                                                                    // 11530
		"sScrollHead": "dataTables_scrollHead ui-state-default",                                                           // 11531
		"sScrollFoot": "dataTables_scrollFoot ui-state-default",                                                           // 11532
		                                                                                                                   // 11533
		/* Misc */                                                                                                         // 11534
		"sFooterTH": "ui-state-default",                                                                                   // 11535
		"sJUIHeader": "fg-toolbar ui-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix",               // 11536
		"sJUIFooter": "fg-toolbar ui-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix"                // 11537
	} );                                                                                                                // 11538
	                                                                                                                    // 11539
	/*                                                                                                                  // 11540
	 * Variable: oPagination                                                                                            // 11541
	 * Purpose:                                                                                                         // 11542
	 * Scope:    jQuery.fn.dataTableExt                                                                                 // 11543
	 */                                                                                                                 // 11544
	$.extend( DataTable.ext.oPagination, {                                                                              // 11545
		/*                                                                                                                 // 11546
		 * Variable: two_button                                                                                            // 11547
		 * Purpose:  Standard two button (forward/back) pagination                                                         // 11548
		 * Scope:    jQuery.fn.dataTableExt.oPagination                                                                    // 11549
		 */                                                                                                                // 11550
		"two_button": {                                                                                                    // 11551
			/*                                                                                                                // 11552
			 * Function: oPagination.two_button.fnInit                                                                        // 11553
			 * Purpose:  Initialise dom elements required for pagination with forward/back buttons only                       // 11554
			 * Returns:  -                                                                                                    // 11555
			 * Inputs:   object:oSettings - dataTables settings object                                                        // 11556
			 *           node:nPaging - the DIV which contains this pagination control                                        // 11557
			 *           function:fnCallbackDraw - draw function which must be called on update                               // 11558
			 */                                                                                                               // 11559
			"fnInit": function ( oSettings, nPaging, fnCallbackDraw )                                                         // 11560
			{                                                                                                                 // 11561
				var oLang = oSettings.oLanguage.oPaginate;                                                                       // 11562
				var oClasses = oSettings.oClasses;                                                                               // 11563
				var fnClickHandler = function ( e ) {                                                                            // 11564
					if ( oSettings.oApi._fnPageChange( oSettings, e.data.action ) )                                                 // 11565
					{                                                                                                               // 11566
						fnCallbackDraw( oSettings );                                                                                   // 11567
					}                                                                                                               // 11568
				};                                                                                                               // 11569
	                                                                                                                    // 11570
				var sAppend = (!oSettings.bJUI) ?                                                                                // 11571
					'<a class="'+oSettings.oClasses.sPagePrevDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button">'+oLang.sPrevious+'</a>'+
					'<a class="'+oSettings.oClasses.sPageNextDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button">'+oLang.sNext+'</a>'
					:                                                                                                               // 11574
					'<a class="'+oSettings.oClasses.sPagePrevDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button"><span class="'+oSettings.oClasses.sPageJUIPrev+'"></span></a>'+
					'<a class="'+oSettings.oClasses.sPageNextDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button"><span class="'+oSettings.oClasses.sPageJUINext+'"></span></a>';
				$(nPaging).append( sAppend );                                                                                    // 11577
				                                                                                                                 // 11578
				var els = $('a', nPaging);                                                                                       // 11579
				var nPrevious = els[0],                                                                                          // 11580
					nNext = els[1];                                                                                                 // 11581
				                                                                                                                 // 11582
				oSettings.oApi._fnBindAction( nPrevious, {action: "previous"}, fnClickHandler );                                 // 11583
				oSettings.oApi._fnBindAction( nNext,     {action: "next"},     fnClickHandler );                                 // 11584
				                                                                                                                 // 11585
				/* ID the first elements only */                                                                                 // 11586
				if ( !oSettings.aanFeatures.p )                                                                                  // 11587
				{                                                                                                                // 11588
					nPaging.id = oSettings.sTableId+'_paginate';                                                                    // 11589
					nPrevious.id = oSettings.sTableId+'_previous';                                                                  // 11590
					nNext.id = oSettings.sTableId+'_next';                                                                          // 11591
	                                                                                                                    // 11592
					nPrevious.setAttribute('aria-controls', oSettings.sTableId);                                                    // 11593
					nNext.setAttribute('aria-controls', oSettings.sTableId);                                                        // 11594
				}                                                                                                                // 11595
			},                                                                                                                // 11596
			                                                                                                                  // 11597
			/*                                                                                                                // 11598
			 * Function: oPagination.two_button.fnUpdate                                                                      // 11599
			 * Purpose:  Update the two button pagination at the end of the draw                                              // 11600
			 * Returns:  -                                                                                                    // 11601
			 * Inputs:   object:oSettings - dataTables settings object                                                        // 11602
			 *           function:fnCallbackDraw - draw function to call on page change                                       // 11603
			 */                                                                                                               // 11604
			"fnUpdate": function ( oSettings, fnCallbackDraw )                                                                // 11605
			{                                                                                                                 // 11606
				if ( !oSettings.aanFeatures.p )                                                                                  // 11607
				{                                                                                                                // 11608
					return;                                                                                                         // 11609
				}                                                                                                                // 11610
				                                                                                                                 // 11611
				var oClasses = oSettings.oClasses;                                                                               // 11612
				var an = oSettings.aanFeatures.p;                                                                                // 11613
				var nNode;                                                                                                       // 11614
	                                                                                                                    // 11615
				/* Loop over each instance of the pager */                                                                       // 11616
				for ( var i=0, iLen=an.length ; i<iLen ; i++ )                                                                   // 11617
				{                                                                                                                // 11618
					nNode = an[i].firstChild;                                                                                       // 11619
					if ( nNode )                                                                                                    // 11620
					{                                                                                                               // 11621
						/* Previous page */                                                                                            // 11622
						nNode.className = ( oSettings._iDisplayStart === 0 ) ?                                                         // 11623
						    oClasses.sPagePrevDisabled : oClasses.sPagePrevEnabled;                                                    // 11624
						                                                                                                               // 11625
						/* Next page */                                                                                                // 11626
						nNode = nNode.nextSibling;                                                                                     // 11627
						nNode.className = ( oSettings.fnDisplayEnd() == oSettings.fnRecordsDisplay() ) ?                               // 11628
						    oClasses.sPageNextDisabled : oClasses.sPageNextEnabled;                                                    // 11629
					}                                                                                                               // 11630
				}                                                                                                                // 11631
			}                                                                                                                 // 11632
		},                                                                                                                 // 11633
		                                                                                                                   // 11634
		                                                                                                                   // 11635
		/*                                                                                                                 // 11636
		 * Variable: iFullNumbersShowPages                                                                                 // 11637
		 * Purpose:  Change the number of pages which can be seen                                                          // 11638
		 * Scope:    jQuery.fn.dataTableExt.oPagination                                                                    // 11639
		 */                                                                                                                // 11640
		"iFullNumbersShowPages": 5,                                                                                        // 11641
		                                                                                                                   // 11642
		/*                                                                                                                 // 11643
		 * Variable: full_numbers                                                                                          // 11644
		 * Purpose:  Full numbers pagination                                                                               // 11645
		 * Scope:    jQuery.fn.dataTableExt.oPagination                                                                    // 11646
		 */                                                                                                                // 11647
		"full_numbers": {                                                                                                  // 11648
			/*                                                                                                                // 11649
			 * Function: oPagination.full_numbers.fnInit                                                                      // 11650
			 * Purpose:  Initialise dom elements required for pagination with a list of the pages                             // 11651
			 * Returns:  -                                                                                                    // 11652
			 * Inputs:   object:oSettings - dataTables settings object                                                        // 11653
			 *           node:nPaging - the DIV which contains this pagination control                                        // 11654
			 *           function:fnCallbackDraw - draw function which must be called on update                               // 11655
			 */                                                                                                               // 11656
			"fnInit": function ( oSettings, nPaging, fnCallbackDraw )                                                         // 11657
			{                                                                                                                 // 11658
				var oLang = oSettings.oLanguage.oPaginate;                                                                       // 11659
				var oClasses = oSettings.oClasses;                                                                               // 11660
				var fnClickHandler = function ( e ) {                                                                            // 11661
					if ( oSettings.oApi._fnPageChange( oSettings, e.data.action ) )                                                 // 11662
					{                                                                                                               // 11663
						fnCallbackDraw( oSettings );                                                                                   // 11664
					}                                                                                                               // 11665
				};                                                                                                               // 11666
	                                                                                                                    // 11667
				$(nPaging).append(                                                                                               // 11668
					'<a  tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageFirst+'">'+oLang.sFirst+'</a>'+
					'<a  tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPagePrevious+'">'+oLang.sPrevious+'</a>'+
					'<span></span>'+                                                                                                // 11671
					'<a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageNext+'">'+oLang.sNext+'</a>'+
					'<a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageLast+'">'+oLang.sLast+'</a>'
				);                                                                                                               // 11674
				var els = $('a', nPaging);                                                                                       // 11675
				var nFirst = els[0],                                                                                             // 11676
					nPrev = els[1],                                                                                                 // 11677
					nNext = els[2],                                                                                                 // 11678
					nLast = els[3];                                                                                                 // 11679
				                                                                                                                 // 11680
				oSettings.oApi._fnBindAction( nFirst, {action: "first"},    fnClickHandler );                                    // 11681
				oSettings.oApi._fnBindAction( nPrev,  {action: "previous"}, fnClickHandler );                                    // 11682
				oSettings.oApi._fnBindAction( nNext,  {action: "next"},     fnClickHandler );                                    // 11683
				oSettings.oApi._fnBindAction( nLast,  {action: "last"},     fnClickHandler );                                    // 11684
				                                                                                                                 // 11685
				/* ID the first elements only */                                                                                 // 11686
				if ( !oSettings.aanFeatures.p )                                                                                  // 11687
				{                                                                                                                // 11688
					nPaging.id = oSettings.sTableId+'_paginate';                                                                    // 11689
					nFirst.id =oSettings.sTableId+'_first';                                                                         // 11690
					nPrev.id =oSettings.sTableId+'_previous';                                                                       // 11691
					nNext.id =oSettings.sTableId+'_next';                                                                           // 11692
					nLast.id =oSettings.sTableId+'_last';                                                                           // 11693
				}                                                                                                                // 11694
			},                                                                                                                // 11695
			                                                                                                                  // 11696
			/*                                                                                                                // 11697
			 * Function: oPagination.full_numbers.fnUpdate                                                                    // 11698
			 * Purpose:  Update the list of page buttons shows                                                                // 11699
			 * Returns:  -                                                                                                    // 11700
			 * Inputs:   object:oSettings - dataTables settings object                                                        // 11701
			 *           function:fnCallbackDraw - draw function to call on page change                                       // 11702
			 */                                                                                                               // 11703
			"fnUpdate": function ( oSettings, fnCallbackDraw )                                                                // 11704
			{                                                                                                                 // 11705
				if ( !oSettings.aanFeatures.p )                                                                                  // 11706
				{                                                                                                                // 11707
					return;                                                                                                         // 11708
				}                                                                                                                // 11709
				                                                                                                                 // 11710
				var iPageCount = DataTable.ext.oPagination.iFullNumbersShowPages;                                                // 11711
				var iPageCountHalf = Math.floor(iPageCount / 2);                                                                 // 11712
				var iPages = Math.ceil((oSettings.fnRecordsDisplay()) / oSettings._iDisplayLength);                              // 11713
				var iCurrentPage = Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength) + 1;                          // 11714
				var sList = "";                                                                                                  // 11715
				var iStartButton, iEndButton, i, iLen;                                                                           // 11716
				var oClasses = oSettings.oClasses;                                                                               // 11717
				var anButtons, anStatic, nPaginateList, nNode;                                                                   // 11718
				var an = oSettings.aanFeatures.p;                                                                                // 11719
				var fnBind = function (j) {                                                                                      // 11720
					oSettings.oApi._fnBindAction( this, {"page": j+iStartButton-1}, function(e) {                                   // 11721
						/* Use the information in the element to jump to the required page */                                          // 11722
						oSettings.oApi._fnPageChange( oSettings, e.data.page );                                                        // 11723
						fnCallbackDraw( oSettings );                                                                                   // 11724
						e.preventDefault();                                                                                            // 11725
					} );                                                                                                            // 11726
				};                                                                                                               // 11727
				                                                                                                                 // 11728
				/* Pages calculation */                                                                                          // 11729
				if ( oSettings._iDisplayLength === -1 )                                                                          // 11730
				{                                                                                                                // 11731
					iStartButton = 1;                                                                                               // 11732
					iEndButton = 1;                                                                                                 // 11733
					iCurrentPage = 1;                                                                                               // 11734
				}                                                                                                                // 11735
				else if (iPages < iPageCount)                                                                                    // 11736
				{                                                                                                                // 11737
					iStartButton = 1;                                                                                               // 11738
					iEndButton = iPages;                                                                                            // 11739
				}                                                                                                                // 11740
				else if (iCurrentPage <= iPageCountHalf)                                                                         // 11741
				{                                                                                                                // 11742
					iStartButton = 1;                                                                                               // 11743
					iEndButton = iPageCount;                                                                                        // 11744
				}                                                                                                                // 11745
				else if (iCurrentPage >= (iPages - iPageCountHalf))                                                              // 11746
				{                                                                                                                // 11747
					iStartButton = iPages - iPageCount + 1;                                                                         // 11748
					iEndButton = iPages;                                                                                            // 11749
				}                                                                                                                // 11750
				else                                                                                                             // 11751
				{                                                                                                                // 11752
					iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;                                                    // 11753
					iEndButton = iStartButton + iPageCount - 1;                                                                     // 11754
				}                                                                                                                // 11755
	                                                                                                                    // 11756
				                                                                                                                 // 11757
				/* Build the dynamic list */                                                                                     // 11758
				for ( i=iStartButton ; i<=iEndButton ; i++ )                                                                     // 11759
				{                                                                                                                // 11760
					sList += (iCurrentPage !== i) ?                                                                                 // 11761
						'<a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+'">'+oSettings.fnFormatNumber(i)+'</a>' : // 11762
						'<a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButtonActive+'">'+oSettings.fnFormatNumber(i)+'</a>';
				}                                                                                                                // 11764
				                                                                                                                 // 11765
				/* Loop over each instance of the pager */                                                                       // 11766
				for ( i=0, iLen=an.length ; i<iLen ; i++ )                                                                       // 11767
				{                                                                                                                // 11768
					nNode = an[i];                                                                                                  // 11769
					if ( !nNode.hasChildNodes() )                                                                                   // 11770
					{                                                                                                               // 11771
						continue;                                                                                                      // 11772
					}                                                                                                               // 11773
					                                                                                                                // 11774
					/* Build up the dynamic list first - html and listeners */                                                      // 11775
					$('span:eq(0)', nNode)                                                                                          // 11776
						.html( sList )                                                                                                 // 11777
						.children('a').each( fnBind );                                                                                 // 11778
					                                                                                                                // 11779
					/* Update the permanent button's classes */                                                                     // 11780
					anButtons = nNode.getElementsByTagName('a');                                                                    // 11781
					anStatic = [                                                                                                    // 11782
						anButtons[0], anButtons[1],                                                                                    // 11783
						anButtons[anButtons.length-2], anButtons[anButtons.length-1]                                                   // 11784
					];                                                                                                              // 11785
	                                                                                                                    // 11786
					$(anStatic).removeClass( oClasses.sPageButton+" "+oClasses.sPageButtonActive+" "+oClasses.sPageButtonStaticDisabled );
					$([anStatic[0], anStatic[1]]).addClass(                                                                         // 11788
						(iCurrentPage==1) ?                                                                                            // 11789
							oClasses.sPageButtonStaticDisabled :                                                                          // 11790
							oClasses.sPageButton                                                                                          // 11791
					);                                                                                                              // 11792
					$([anStatic[2], anStatic[3]]).addClass(                                                                         // 11793
						(iPages===0 || iCurrentPage===iPages || oSettings._iDisplayLength===-1) ?                                      // 11794
							oClasses.sPageButtonStaticDisabled :                                                                          // 11795
							oClasses.sPageButton                                                                                          // 11796
					);                                                                                                              // 11797
				}                                                                                                                // 11798
			}                                                                                                                 // 11799
		}                                                                                                                  // 11800
	} );                                                                                                                // 11801
	                                                                                                                    // 11802
	$.extend( DataTable.ext.oSort, {                                                                                    // 11803
		/*                                                                                                                 // 11804
		 * text sorting                                                                                                    // 11805
		 */                                                                                                                // 11806
		"string-pre": function ( a )                                                                                       // 11807
		{                                                                                                                  // 11808
			if ( typeof a != 'string' ) {                                                                                     // 11809
				a = (a !== null && a.toString) ? a.toString() : '';                                                              // 11810
			}                                                                                                                 // 11811
			return a.toLowerCase();                                                                                           // 11812
		},                                                                                                                 // 11813
	                                                                                                                    // 11814
		"string-asc": function ( x, y )                                                                                    // 11815
		{                                                                                                                  // 11816
			return ((x < y) ? -1 : ((x > y) ? 1 : 0));                                                                        // 11817
		},                                                                                                                 // 11818
		                                                                                                                   // 11819
		"string-desc": function ( x, y )                                                                                   // 11820
		{                                                                                                                  // 11821
			return ((x < y) ? 1 : ((x > y) ? -1 : 0));                                                                        // 11822
		},                                                                                                                 // 11823
		                                                                                                                   // 11824
		                                                                                                                   // 11825
		/*                                                                                                                 // 11826
		 * html sorting (ignore html tags)                                                                                 // 11827
		 */                                                                                                                // 11828
		"html-pre": function ( a )                                                                                         // 11829
		{                                                                                                                  // 11830
			return a.replace( /<.*?>/g, "" ).toLowerCase();                                                                   // 11831
		},                                                                                                                 // 11832
		                                                                                                                   // 11833
		"html-asc": function ( x, y )                                                                                      // 11834
		{                                                                                                                  // 11835
			return ((x < y) ? -1 : ((x > y) ? 1 : 0));                                                                        // 11836
		},                                                                                                                 // 11837
		                                                                                                                   // 11838
		"html-desc": function ( x, y )                                                                                     // 11839
		{                                                                                                                  // 11840
			return ((x < y) ? 1 : ((x > y) ? -1 : 0));                                                                        // 11841
		},                                                                                                                 // 11842
		                                                                                                                   // 11843
		                                                                                                                   // 11844
		/*                                                                                                                 // 11845
		 * date sorting                                                                                                    // 11846
		 */                                                                                                                // 11847
		"date-pre": function ( a )                                                                                         // 11848
		{                                                                                                                  // 11849
			var x = Date.parse( a );                                                                                          // 11850
			                                                                                                                  // 11851
			if ( isNaN(x) || x==="" )                                                                                         // 11852
			{                                                                                                                 // 11853
				x = Date.parse( "01/01/1970 00:00:00" );                                                                         // 11854
			}                                                                                                                 // 11855
			return x;                                                                                                         // 11856
		},                                                                                                                 // 11857
	                                                                                                                    // 11858
		"date-asc": function ( x, y )                                                                                      // 11859
		{                                                                                                                  // 11860
			return x - y;                                                                                                     // 11861
		},                                                                                                                 // 11862
		                                                                                                                   // 11863
		"date-desc": function ( x, y )                                                                                     // 11864
		{                                                                                                                  // 11865
			return y - x;                                                                                                     // 11866
		},                                                                                                                 // 11867
		                                                                                                                   // 11868
		                                                                                                                   // 11869
		/*                                                                                                                 // 11870
		 * numerical sorting                                                                                               // 11871
		 */                                                                                                                // 11872
		"numeric-pre": function ( a )                                                                                      // 11873
		{                                                                                                                  // 11874
			return (a=="-" || a==="") ? 0 : a*1;                                                                              // 11875
		},                                                                                                                 // 11876
	                                                                                                                    // 11877
		"numeric-asc": function ( x, y )                                                                                   // 11878
		{                                                                                                                  // 11879
			return x - y;                                                                                                     // 11880
		},                                                                                                                 // 11881
		                                                                                                                   // 11882
		"numeric-desc": function ( x, y )                                                                                  // 11883
		{                                                                                                                  // 11884
			return y - x;                                                                                                     // 11885
		}                                                                                                                  // 11886
	} );                                                                                                                // 11887
	                                                                                                                    // 11888
	                                                                                                                    // 11889
	$.extend( DataTable.ext.aTypes, [                                                                                   // 11890
		/*                                                                                                                 // 11891
		 * Function: -                                                                                                     // 11892
		 * Purpose:  Check to see if a string is numeric                                                                   // 11893
		 * Returns:  string:'numeric' or null                                                                              // 11894
		 * Inputs:   mixed:sText - string to check                                                                         // 11895
		 */                                                                                                                // 11896
		function ( sData )                                                                                                 // 11897
		{                                                                                                                  // 11898
			/* Allow zero length strings as a number */                                                                       // 11899
			if ( typeof sData === 'number' )                                                                                  // 11900
			{                                                                                                                 // 11901
				return 'numeric';                                                                                                // 11902
			}                                                                                                                 // 11903
			else if ( typeof sData !== 'string' )                                                                             // 11904
			{                                                                                                                 // 11905
				return null;                                                                                                     // 11906
			}                                                                                                                 // 11907
			                                                                                                                  // 11908
			var sValidFirstChars = "0123456789-";                                                                             // 11909
			var sValidChars = "0123456789.";                                                                                  // 11910
			var Char;                                                                                                         // 11911
			var bDecimal = false;                                                                                             // 11912
			                                                                                                                  // 11913
			/* Check for a valid first char (no period and allow negatives) */                                                // 11914
			Char = sData.charAt(0);                                                                                           // 11915
			if (sValidFirstChars.indexOf(Char) == -1)                                                                         // 11916
			{                                                                                                                 // 11917
				return null;                                                                                                     // 11918
			}                                                                                                                 // 11919
			                                                                                                                  // 11920
			/* Check all the other characters are valid */                                                                    // 11921
			for ( var i=1 ; i<sData.length ; i++ )                                                                            // 11922
			{                                                                                                                 // 11923
				Char = sData.charAt(i);                                                                                          // 11924
				if (sValidChars.indexOf(Char) == -1)                                                                             // 11925
				{                                                                                                                // 11926
					return null;                                                                                                    // 11927
				}                                                                                                                // 11928
				                                                                                                                 // 11929
				/* Only allowed one decimal place... */                                                                          // 11930
				if ( Char == "." )                                                                                               // 11931
				{                                                                                                                // 11932
					if ( bDecimal )                                                                                                 // 11933
					{                                                                                                               // 11934
						return null;                                                                                                   // 11935
					}                                                                                                               // 11936
					bDecimal = true;                                                                                                // 11937
				}                                                                                                                // 11938
			}                                                                                                                 // 11939
			                                                                                                                  // 11940
			return 'numeric';                                                                                                 // 11941
		},                                                                                                                 // 11942
		                                                                                                                   // 11943
		/*                                                                                                                 // 11944
		 * Function: -                                                                                                     // 11945
		 * Purpose:  Check to see if a string is actually a formatted date                                                 // 11946
		 * Returns:  string:'date' or null                                                                                 // 11947
		 * Inputs:   string:sText - string to check                                                                        // 11948
		 */                                                                                                                // 11949
		function ( sData )                                                                                                 // 11950
		{                                                                                                                  // 11951
			var iParse = Date.parse(sData);                                                                                   // 11952
			if ( (iParse !== null && !isNaN(iParse)) || (typeof sData === 'string' && sData.length === 0) )                   // 11953
			{                                                                                                                 // 11954
				return 'date';                                                                                                   // 11955
			}                                                                                                                 // 11956
			return null;                                                                                                      // 11957
		},                                                                                                                 // 11958
		                                                                                                                   // 11959
		/*                                                                                                                 // 11960
		 * Function: -                                                                                                     // 11961
		 * Purpose:  Check to see if a string should be treated as an HTML string                                          // 11962
		 * Returns:  string:'html' or null                                                                                 // 11963
		 * Inputs:   string:sText - string to check                                                                        // 11964
		 */                                                                                                                // 11965
		function ( sData )                                                                                                 // 11966
		{                                                                                                                  // 11967
			if ( typeof sData === 'string' && sData.indexOf('<') != -1 && sData.indexOf('>') != -1 )                          // 11968
			{                                                                                                                 // 11969
				return 'html';                                                                                                   // 11970
			}                                                                                                                 // 11971
			return null;                                                                                                      // 11972
		}                                                                                                                  // 11973
	] );                                                                                                                // 11974
	                                                                                                                    // 11975
                                                                                                                     // 11976
	// jQuery aliases                                                                                                   // 11977
	$.fn.DataTable = DataTable;                                                                                         // 11978
	$.fn.dataTable = DataTable;                                                                                         // 11979
	$.fn.dataTableSettings = DataTable.settings;                                                                        // 11980
	$.fn.dataTableExt = DataTable.ext;                                                                                  // 11981
                                                                                                                     // 11982
                                                                                                                     // 11983
	// Information about events fired by DataTables - for documentation.                                                // 11984
	/**                                                                                                                 // 11985
	 * Draw event, fired whenever the table is redrawn on the page, at the same point as                                // 11986
	 * fnDrawCallback. This may be useful for binding events or performing calculations when                            // 11987
	 * the table is altered at all.                                                                                     // 11988
	 *  @name DataTable#draw                                                                                            // 11989
	 *  @event                                                                                                          // 11990
	 *  @param {event} e jQuery event object                                                                            // 11991
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                 // 11992
	 */                                                                                                                 // 11993
                                                                                                                     // 11994
	/**                                                                                                                 // 11995
	 * Filter event, fired when the filtering applied to the table (using the build in global                           // 11996
	 * global filter, or column filters) is altered.                                                                    // 11997
	 *  @name DataTable#filter                                                                                          // 11998
	 *  @event                                                                                                          // 11999
	 *  @param {event} e jQuery event object                                                                            // 12000
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                 // 12001
	 */                                                                                                                 // 12002
                                                                                                                     // 12003
	/**                                                                                                                 // 12004
	 * Page change event, fired when the paging of the table is altered.                                                // 12005
	 *  @name DataTable#page                                                                                            // 12006
	 *  @event                                                                                                          // 12007
	 *  @param {event} e jQuery event object                                                                            // 12008
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                 // 12009
	 */                                                                                                                 // 12010
                                                                                                                     // 12011
	/**                                                                                                                 // 12012
	 * Sort event, fired when the sorting applied to the table is altered.                                              // 12013
	 *  @name DataTable#sort                                                                                            // 12014
	 *  @event                                                                                                          // 12015
	 *  @param {event} e jQuery event object                                                                            // 12016
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                 // 12017
	 */                                                                                                                 // 12018
                                                                                                                     // 12019
	/**                                                                                                                 // 12020
	 * DataTables initialisation complete event, fired when the table is fully drawn,                                   // 12021
	 * including Ajax data loaded, if Ajax data is required.                                                            // 12022
	 *  @name DataTable#init                                                                                            // 12023
	 *  @event                                                                                                          // 12024
	 *  @param {event} e jQuery event object                                                                            // 12025
	 *  @param {object} oSettings DataTables settings object                                                            // 12026
	 *  @param {object} json The JSON object request from the server - only                                             // 12027
	 *    present if client-side Ajax sourced data is used</li></ol>                                                    // 12028
	 */                                                                                                                 // 12029
                                                                                                                     // 12030
	/**                                                                                                                 // 12031
	 * State save event, fired when the table has changed state a new state save is required.                           // 12032
	 * This method allows modification of the state saving object prior to actually doing the                           // 12033
	 * save, including addition or other state properties (for plug-ins) or modification                                // 12034
	 * of a DataTables core property.                                                                                   // 12035
	 *  @name DataTable#stateSaveParams                                                                                 // 12036
	 *  @event                                                                                                          // 12037
	 *  @param {event} e jQuery event object                                                                            // 12038
	 *  @param {object} oSettings DataTables settings object                                                            // 12039
	 *  @param {object} json The state information to be saved                                                          // 12040
	 */                                                                                                                 // 12041
                                                                                                                     // 12042
	/**                                                                                                                 // 12043
	 * State load event, fired when the table is loading state from the stored data, but                                // 12044
	 * prior to the settings object being modified by the saved state - allowing modification                           // 12045
	 * of the saved state is required or loading of state for a plug-in.                                                // 12046
	 *  @name DataTable#stateLoadParams                                                                                 // 12047
	 *  @event                                                                                                          // 12048
	 *  @param {event} e jQuery event object                                                                            // 12049
	 *  @param {object} oSettings DataTables settings object                                                            // 12050
	 *  @param {object} json The saved state information                                                                // 12051
	 */                                                                                                                 // 12052
                                                                                                                     // 12053
	/**                                                                                                                 // 12054
	 * State loaded event, fired when state has been loaded from stored data and the settings                           // 12055
	 * object has been modified by the loaded data.                                                                     // 12056
	 *  @name DataTable#stateLoaded                                                                                     // 12057
	 *  @event                                                                                                          // 12058
	 *  @param {event} e jQuery event object                                                                            // 12059
	 *  @param {object} oSettings DataTables settings object                                                            // 12060
	 *  @param {object} json The saved state information                                                                // 12061
	 */                                                                                                                 // 12062
                                                                                                                     // 12063
	/**                                                                                                                 // 12064
	 * Processing event, fired when DataTables is doing some kind of processing (be it,                                 // 12065
	 * sort, filter or anything else). Can be used to indicate to the end user that                                     // 12066
	 * there is something happening, or that something has finished.                                                    // 12067
	 *  @name DataTable#processing                                                                                      // 12068
	 *  @event                                                                                                          // 12069
	 *  @param {event} e jQuery event object                                                                            // 12070
	 *  @param {object} oSettings DataTables settings object                                                            // 12071
	 *  @param {boolean} bShow Flag for if DataTables is doing processing or not                                        // 12072
	 */                                                                                                                 // 12073
                                                                                                                     // 12074
	/**                                                                                                                 // 12075
	 * Ajax (XHR) event, fired whenever an Ajax request is completed from a request to                                  // 12076
	 * made to the server for new data (note that this trigger is called in fnServerData,                               // 12077
	 * if you override fnServerData and which to use this event, you need to trigger it in                              // 12078
	 * you success function).                                                                                           // 12079
	 *  @name DataTable#xhr                                                                                             // 12080
	 *  @event                                                                                                          // 12081
	 *  @param {event} e jQuery event object                                                                            // 12082
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                 // 12083
	 *  @param {object} json JSON returned from the server                                                              // 12084
	 */                                                                                                                 // 12085
                                                                                                                     // 12086
	/**                                                                                                                 // 12087
	 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy or passing                             // 12088
	 * the bDestroy:true parameter in the initialisation object. This can be used to remove                             // 12089
	 * bound events, added DOM nodes, etc.                                                                              // 12090
	 *  @name DataTable#destroy                                                                                         // 12091
	 *  @event                                                                                                          // 12092
	 *  @param {event} e jQuery event object                                                                            // 12093
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}                                 // 12094
	 */                                                                                                                 // 12095
}));                                                                                                                 // 12096
                                                                                                                     // 12097
}(window, document));                                                                                                // 12098
                                                                                                                     // 12099
                                                                                                                     // 12100
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/datatables/lib/DT_bootstrap.js                                                                           //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/* Set the defaults for DataTables initialisation */                                                                // 1
$.extend(true, $.fn.dataTable.defaults, {                                                                           // 2
    "sDom": "<'row-fluid'<'span6'l><'span6'f>r>t<'row-fluid'<'span6'i><'span6'p>>",                                 // 3
    "sPaginationType": "bootstrap",                                                                                 // 4
    "oLanguage": {                                                                                                  // 5
        "sLengthMenu": "_MENU_ records per page"                                                                    // 6
    }                                                                                                               // 7
});                                                                                                                 // 8
                                                                                                                    // 9
/* Default class modification */                                                                                    // 10
$.extend($.fn.dataTableExt.oStdClasses, {                                                                           // 11
    "sWrapper": "dataTables_wrapper form-inline"                                                                    // 12
});                                                                                                                 // 13
                                                                                                                    // 14
/* API method to get paging information */                                                                          // 15
$.fn.dataTableExt.oApi.fnPagingInfo = function (oSettings) {                                                        // 16
    return {                                                                                                        // 17
        "iStart": oSettings._iDisplayStart,                                                                         // 18
        "iEnd": oSettings.fnDisplayEnd(),                                                                           // 19
        "iLength": oSettings._iDisplayLength,                                                                       // 20
        "iTotal": oSettings.fnRecordsTotal(),                                                                       // 21
        "iFilteredTotal": oSettings.fnRecordsDisplay(),                                                             // 22
        "iPage": Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength),                                   // 23
        "iTotalPages": Math.ceil(oSettings.fnRecordsDisplay() / oSettings._iDisplayLength)                          // 24
    };                                                                                                              // 25
};                                                                                                                  // 26
                                                                                                                    // 27
/* Bootstrap style pagination control */                                                                            // 28
$.extend($.fn.dataTableExt.oPagination, {                                                                           // 29
    "bootstrap": {                                                                                                  // 30
        "fnInit": function (oSettings, nPaging, fnDraw) {                                                           // 31
            var oLang = oSettings.oLanguage.oPaginate;                                                              // 32
            var fnClickHandler = function (e) {                                                                     // 33
                e.preventDefault();                                                                                 // 34
                if (oSettings.oApi._fnPageChange(oSettings, e.data.action)) {                                       // 35
                    fnDraw(oSettings);                                                                              // 36
                }                                                                                                   // 37
            };                                                                                                      // 38
                                                                                                                    // 39
            $(nPaging).addClass('pagination').append(                                                               // 40
				'<ul>' +                                                                                                        // 41
					'<li class="prev disabled"><a href="#">&larr; ' + oLang.sPrevious + '</a></li>' +                              // 42
					'<li class="next disabled"><a href="#">' + oLang.sNext + ' &rarr; </a></li>' +                                 // 43
				'</ul>'                                                                                                         // 44
			);                                                                                                               // 45
            var els = $('a', nPaging);                                                                              // 46
            $(els[0]).bind('click.DT', { action: "previous" }, fnClickHandler);                                     // 47
            $(els[1]).bind('click.DT', { action: "next" }, fnClickHandler);                                         // 48
        },                                                                                                          // 49
                                                                                                                    // 50
        "fnUpdate": function (oSettings, fnDraw) {                                                                  // 51
            var iListLength = 5;                                                                                    // 52
            var oPaging = oSettings.oInstance.fnPagingInfo();                                                       // 53
            var an = oSettings.aanFeatures.p;                                                                       // 54
            var i, j, sClass, iStart, iEnd, iHalf = Math.floor(iListLength / 2);                                    // 55
                                                                                                                    // 56
            if (oPaging.iTotalPages < iListLength) {                                                                // 57
                iStart = 1;                                                                                         // 58
                iEnd = oPaging.iTotalPages;                                                                         // 59
            }                                                                                                       // 60
            else if (oPaging.iPage <= iHalf) {                                                                      // 61
                iStart = 1;                                                                                         // 62
                iEnd = iListLength;                                                                                 // 63
            } else if (oPaging.iPage >= (oPaging.iTotalPages - iHalf)) {                                            // 64
                iStart = oPaging.iTotalPages - iListLength + 1;                                                     // 65
                iEnd = oPaging.iTotalPages;                                                                         // 66
            } else {                                                                                                // 67
                iStart = oPaging.iPage - iHalf + 1;                                                                 // 68
                iEnd = iStart + iListLength - 1;                                                                    // 69
            }                                                                                                       // 70
                                                                                                                    // 71
            for (i = 0, iLen = an.length ; i < iLen ; i++) {                                                        // 72
                // Remove the middle elements                                                                       // 73
                $('li:gt(0)', an[i]).filter(':not(:last)').remove();                                                // 74
                                                                                                                    // 75
                // Add the new list items and their event handlers                                                  // 76
                for (j = iStart ; j <= iEnd ; j++) {                                                                // 77
                    sClass = (j == oPaging.iPage + 1) ? 'class="active"' : '';                                      // 78
                    $('<li ' + sClass + '><a href="#">' + j + '</a></li>')                                          // 79
						.insertBefore($('li:last', an[i])[0])                                                                         // 80
						.bind('click', function (e) {                                                                                 // 81
						    e.preventDefault();                                                                                       // 82
						    oSettings._iDisplayStart = (parseInt($('a', this).text(), 10) - 1) * oPaging.iLength;                     // 83
						    fnDraw(oSettings);                                                                                        // 84
						});                                                                                                           // 85
                }                                                                                                   // 86
                                                                                                                    // 87
                // Add / remove disabled classes from the static elements                                           // 88
                if (oPaging.iPage === 0) {                                                                          // 89
                    $('li:first', an[i]).addClass('disabled');                                                      // 90
                } else {                                                                                            // 91
                    $('li:first', an[i]).removeClass('disabled');                                                   // 92
                }                                                                                                   // 93
                                                                                                                    // 94
                if (oPaging.iPage === oPaging.iTotalPages - 1 || oPaging.iTotalPages === 0) {                       // 95
                    $('li:last', an[i]).addClass('disabled');                                                       // 96
                } else {                                                                                            // 97
                    $('li:last', an[i]).removeClass('disabled');                                                    // 98
                }                                                                                                   // 99
            }                                                                                                       // 100
        }                                                                                                           // 101
    }                                                                                                               // 102
});                                                                                                                 // 103
                                                                                                                    // 104
/*                                                                                                                  // 105
 * TableTools Bootstrap compatibility                                                                               // 106
 * Required TableTools 2.1+                                                                                         // 107
 */                                                                                                                 // 108
if ($.fn.DataTable.TableTools) {                                                                                    // 109
    // Set the classes that TableTools uses to something suitable for Bootstrap                                     // 110
    $.extend(true, $.fn.DataTable.TableTools.classes, {                                                             // 111
        "container": "DTTT btn-group",                                                                              // 112
        "buttons": {                                                                                                // 113
            "normal": "btn",                                                                                        // 114
            "disabled": "disabled"                                                                                  // 115
        },                                                                                                          // 116
        "collection": {                                                                                             // 117
            "container": "DTTT_dropdown dropdown-menu",                                                             // 118
            "buttons": {                                                                                            // 119
                "normal": "",                                                                                       // 120
                "disabled": "disabled"                                                                              // 121
            }                                                                                                       // 122
        },                                                                                                          // 123
        "print": {                                                                                                  // 124
            "info": "DTTT_print_info modal"                                                                         // 125
        },                                                                                                          // 126
        "select": {                                                                                                 // 127
            "row": "active"                                                                                         // 128
        }                                                                                                           // 129
    });                                                                                                             // 130
                                                                                                                    // 131
    // Have the collection use a bootstrap compatible dropdown                                                      // 132
    $.extend(true, $.fn.DataTable.TableTools.DEFAULTS.oTags, {                                                      // 133
        "collection": {                                                                                             // 134
            "container": "ul",                                                                                      // 135
            "button": "li",                                                                                         // 136
            "liner": "a"                                                                                            // 137
        }                                                                                                           // 138
    });                                                                                                             // 139
};                                                                                                                   // 140
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.datatables = {};

})();

//# sourceMappingURL=96398e3a5dc461ca6c69eb676199d71d9a4c9c4a.map
